/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package main

import (
        "flag"
        "fmt"
        "http"
        "net"
        "os"
        "strconv"
        "thrift"
)

func Usage() {
  fmt.Fprint(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:\n")
  flag.PrintDefaults()
  fmt.Fprint(os.Stderr, "Functions:\n")
  fmt.Fprint(os.Stderr, "  getSPCmsVerticalVersions() (retval1660 *CmsVerticalVersionsResult, cmsException *CMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getSPVerticalDelta(deltaRequest *DeltaRequest) (retval1661 *DeltaResult, cmsException *CMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getSPVerticalVersion(verticalName string) (retval1662 *VerticalVersionResult, cmsException *CMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getProductWithListings(request *ProductInfoRequest) (retval1663 *ProductListingsResult, cmsException *CMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getProductInfo(request *ProductInfoRequest) (retval1664 *ProductInfoResult, cmsException *CMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getListings(request *ListingRequest) (retval1665 *ListingResult, cmsException *CMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getListingDetail(request *ListingIDRequest) (retval1666 *ListingProductResult, cmsException *CMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getListingIdfromEGV(amount int32) (retval1667 ListingID, cmsException *CMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getProductViews(request *ViewRequest) (retval1668 *ViewResult, cmsException *CMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getViewDefinition(request *ViewDefinitionRequest) (retval1669 *ViewDefinitionResult, cmsException *CMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getContributorInfo(contributorInfoRequest *ContributorInfoRequest) (retval1670 *ContributorInfoResult, spcmsException *SPCMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getItems(itemsRequest *ItemsRequest) (retval1671 *ItemsResult, spcmsException *SPCMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getItemDetails(itemDetailsRequest *ItemDetailsRequest) (retval1672 *ItemDetailsResult, spcmsException *SPCMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getCategorizationTree(categoryTreeRequest *CategoryTreeRequest) (retval1673 *CategoryTreeResult, spcmsException *SPCMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getCategoryNodeInfo(categoryNodeInfoRequest *CategoryNodeInfoRequest) (retval1674 *CategoryNodeInfoResult, spcmsException *SPCMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getCategoryPath(categoryPathRequest *CategoryPathRequest) (retval1675 *CategoryPathResult, spcmsException *SPCMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getProductItemHistory(itemHistoryRequest *ItemHistoryRequest) (retval1676 *ItemHistoryResult, spcmsException *SPCMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getVerticalAttributeDefinition(verticalAttributeDefinitionRequest *VerticalAttributeDefinitionRequest) (retval1677 *VerticalAttributeDefinitionResult, spcmsException *SPCMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getMetaData(metaDataRequest *MetaDataRequest) (retval1678 *MetaDataResponse, spcmsException *SPCMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  searchEntity(entitySearchRequest *EntitySearchRequest) (retval1679 *EntitySearchResult, spcmsException *SPCMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "  getProductIDForEGV(productIdForEGVRequest *ProductIdForEGVRequest) (retval1680 *ProductIdForEGVResponse, spcmsException *SPCMSException, err os.Error)\n")
  fmt.Fprint(os.Stderr, "\n")
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var help bool
  var url http.URL
  var trans thrift.TTransport
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.BoolVar(&help, "help", false, "See usage string")
  flag.Parse()
  if help || flag.NArg() == 0 {
    flag.Usage()
  }
  
  if len(urlString) > 0 {
    url, err := http.ParseURL(urlString)
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
    host = url.Host
    useHttp = len(url.Scheme) <= 0 || url.Scheme == "http"
  } else if useHttp {
    _, err := http.ParseURL(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error parsing URL: ", err.String(), "\n")
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err os.Error
  if useHttp {
    trans, err = thrift.NewTHttpClient(url.Raw)
  } else {
    addr, err := net.ResolveTCPAddr("tcp", fmt.Sprint(host, ":", port))
    if err != nil {
      fmt.Fprint(os.Stderr, "Error resolving address", err.String())
      os.Exit(1)
    }
    trans, err = thrift.NewTNonblockingSocketAddr(addr)
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprint(os.Stderr, "Error creating transport", err.String())
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid protocol specified: ", protocol, "\n")
    Usage()
    os.Exit(1)
  }
  client := sp-cms.NewCMSSPServiceClientFactory(trans, protocolFactory)
  if err = trans.Open(); err != nil {
    fmt.Fprint(os.Stderr, "Error opening socket to ", host, ":", port, " ", err.String())
    os.Exit(1)
  }
  
  switch cmd {
  case "getSPCmsVerticalVersions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprint(os.Stderr, "GetSPCmsVerticalVersions requires 0 args\n")
      flag.Usage()
    }
    fmt.Print(client.GetSPCmsVerticalVersions())
    fmt.Print("\n")
    break
  case "getSPVerticalDelta":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSPVerticalDelta requires 1 args\n")
      flag.Usage()
    }
    arg1681 := flag.Arg(1)
    mbTrans1682 := thrift.NewTMemoryBufferLen(len(arg1681))
    defer mbTrans1682.Close()
    _, err1683 := mbTrans1682.WriteString(arg1681)
    if err1683 != nil {
      Usage()
      return
    }
    factory1684 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1685 := factory1684.GetProtocol(mbTrans1682)
    argvalue0 := sp-cms.NewDeltaRequest()
    err1686 := argvalue0.Read(jsProt1685)
    if err1686 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSPVerticalDelta(value0))
    fmt.Print("\n")
    break
  case "getSPVerticalVersion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetSPVerticalVersion requires 1 args\n")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSPVerticalVersion(value0))
    fmt.Print("\n")
    break
  case "getProductWithListings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetProductWithListings requires 1 args\n")
      flag.Usage()
    }
    arg1688 := flag.Arg(1)
    mbTrans1689 := thrift.NewTMemoryBufferLen(len(arg1688))
    defer mbTrans1689.Close()
    _, err1690 := mbTrans1689.WriteString(arg1688)
    if err1690 != nil {
      Usage()
      return
    }
    factory1691 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1692 := factory1691.GetProtocol(mbTrans1689)
    argvalue0 := sp-cms.NewProductInfoRequest()
    err1693 := argvalue0.Read(jsProt1692)
    if err1693 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetProductWithListings(value0))
    fmt.Print("\n")
    break
  case "getProductInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetProductInfo requires 1 args\n")
      flag.Usage()
    }
    arg1694 := flag.Arg(1)
    mbTrans1695 := thrift.NewTMemoryBufferLen(len(arg1694))
    defer mbTrans1695.Close()
    _, err1696 := mbTrans1695.WriteString(arg1694)
    if err1696 != nil {
      Usage()
      return
    }
    factory1697 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1698 := factory1697.GetProtocol(mbTrans1695)
    argvalue0 := sp-cms.NewProductInfoRequest()
    err1699 := argvalue0.Read(jsProt1698)
    if err1699 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetProductInfo(value0))
    fmt.Print("\n")
    break
  case "getListings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetListings requires 1 args\n")
      flag.Usage()
    }
    arg1700 := flag.Arg(1)
    mbTrans1701 := thrift.NewTMemoryBufferLen(len(arg1700))
    defer mbTrans1701.Close()
    _, err1702 := mbTrans1701.WriteString(arg1700)
    if err1702 != nil {
      Usage()
      return
    }
    factory1703 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1704 := factory1703.GetProtocol(mbTrans1701)
    argvalue0 := sp-cms.NewListingRequest()
    err1705 := argvalue0.Read(jsProt1704)
    if err1705 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetListings(value0))
    fmt.Print("\n")
    break
  case "getListingDetail":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetListingDetail requires 1 args\n")
      flag.Usage()
    }
    arg1706 := flag.Arg(1)
    mbTrans1707 := thrift.NewTMemoryBufferLen(len(arg1706))
    defer mbTrans1707.Close()
    _, err1708 := mbTrans1707.WriteString(arg1706)
    if err1708 != nil {
      Usage()
      return
    }
    factory1709 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1710 := factory1709.GetProtocol(mbTrans1707)
    argvalue0 := sp-cms.NewListingIDRequest()
    err1711 := argvalue0.Read(jsProt1710)
    if err1711 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetListingDetail(value0))
    fmt.Print("\n")
    break
  case "getListingIdfromEGV":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetListingIdfromEGV requires 1 args\n")
      flag.Usage()
    }
    tmp0, err1712 := (strconv.Atoi(flag.Arg(1)))
    if err1712 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetListingIdfromEGV(value0))
    fmt.Print("\n")
    break
  case "getProductViews":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetProductViews requires 1 args\n")
      flag.Usage()
    }
    arg1713 := flag.Arg(1)
    mbTrans1714 := thrift.NewTMemoryBufferLen(len(arg1713))
    defer mbTrans1714.Close()
    _, err1715 := mbTrans1714.WriteString(arg1713)
    if err1715 != nil {
      Usage()
      return
    }
    factory1716 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1717 := factory1716.GetProtocol(mbTrans1714)
    argvalue0 := sp-cms.NewViewRequest()
    err1718 := argvalue0.Read(jsProt1717)
    if err1718 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetProductViews(value0))
    fmt.Print("\n")
    break
  case "getViewDefinition":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetViewDefinition requires 1 args\n")
      flag.Usage()
    }
    arg1719 := flag.Arg(1)
    mbTrans1720 := thrift.NewTMemoryBufferLen(len(arg1719))
    defer mbTrans1720.Close()
    _, err1721 := mbTrans1720.WriteString(arg1719)
    if err1721 != nil {
      Usage()
      return
    }
    factory1722 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1723 := factory1722.GetProtocol(mbTrans1720)
    argvalue0 := sp-cms.NewViewDefinitionRequest()
    err1724 := argvalue0.Read(jsProt1723)
    if err1724 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetViewDefinition(value0))
    fmt.Print("\n")
    break
  case "getContributorInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetContributorInfo requires 1 args\n")
      flag.Usage()
    }
    arg1725 := flag.Arg(1)
    mbTrans1726 := thrift.NewTMemoryBufferLen(len(arg1725))
    defer mbTrans1726.Close()
    _, err1727 := mbTrans1726.WriteString(arg1725)
    if err1727 != nil {
      Usage()
      return
    }
    factory1728 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1729 := factory1728.GetProtocol(mbTrans1726)
    argvalue0 := sp-cms.NewContributorInfoRequest()
    err1730 := argvalue0.Read(jsProt1729)
    if err1730 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetContributorInfo(value0))
    fmt.Print("\n")
    break
  case "getItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetItems requires 1 args\n")
      flag.Usage()
    }
    arg1731 := flag.Arg(1)
    mbTrans1732 := thrift.NewTMemoryBufferLen(len(arg1731))
    defer mbTrans1732.Close()
    _, err1733 := mbTrans1732.WriteString(arg1731)
    if err1733 != nil {
      Usage()
      return
    }
    factory1734 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1735 := factory1734.GetProtocol(mbTrans1732)
    argvalue0 := sp-cms.NewItemsRequest()
    err1736 := argvalue0.Read(jsProt1735)
    if err1736 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetItems(value0))
    fmt.Print("\n")
    break
  case "getItemDetails":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetItemDetails requires 1 args\n")
      flag.Usage()
    }
    arg1737 := flag.Arg(1)
    mbTrans1738 := thrift.NewTMemoryBufferLen(len(arg1737))
    defer mbTrans1738.Close()
    _, err1739 := mbTrans1738.WriteString(arg1737)
    if err1739 != nil {
      Usage()
      return
    }
    factory1740 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1741 := factory1740.GetProtocol(mbTrans1738)
    argvalue0 := sp-cms.NewItemDetailsRequest()
    err1742 := argvalue0.Read(jsProt1741)
    if err1742 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetItemDetails(value0))
    fmt.Print("\n")
    break
  case "getCategorizationTree":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetCategorizationTree requires 1 args\n")
      flag.Usage()
    }
    arg1743 := flag.Arg(1)
    mbTrans1744 := thrift.NewTMemoryBufferLen(len(arg1743))
    defer mbTrans1744.Close()
    _, err1745 := mbTrans1744.WriteString(arg1743)
    if err1745 != nil {
      Usage()
      return
    }
    factory1746 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1747 := factory1746.GetProtocol(mbTrans1744)
    argvalue0 := sp-cms.NewCategoryTreeRequest()
    err1748 := argvalue0.Read(jsProt1747)
    if err1748 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCategorizationTree(value0))
    fmt.Print("\n")
    break
  case "getCategoryNodeInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetCategoryNodeInfo requires 1 args\n")
      flag.Usage()
    }
    arg1749 := flag.Arg(1)
    mbTrans1750 := thrift.NewTMemoryBufferLen(len(arg1749))
    defer mbTrans1750.Close()
    _, err1751 := mbTrans1750.WriteString(arg1749)
    if err1751 != nil {
      Usage()
      return
    }
    factory1752 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1753 := factory1752.GetProtocol(mbTrans1750)
    argvalue0 := sp-cms.NewCategoryNodeInfoRequest()
    err1754 := argvalue0.Read(jsProt1753)
    if err1754 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCategoryNodeInfo(value0))
    fmt.Print("\n")
    break
  case "getCategoryPath":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetCategoryPath requires 1 args\n")
      flag.Usage()
    }
    arg1755 := flag.Arg(1)
    mbTrans1756 := thrift.NewTMemoryBufferLen(len(arg1755))
    defer mbTrans1756.Close()
    _, err1757 := mbTrans1756.WriteString(arg1755)
    if err1757 != nil {
      Usage()
      return
    }
    factory1758 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1759 := factory1758.GetProtocol(mbTrans1756)
    argvalue0 := sp-cms.NewCategoryPathRequest()
    err1760 := argvalue0.Read(jsProt1759)
    if err1760 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCategoryPath(value0))
    fmt.Print("\n")
    break
  case "getProductItemHistory":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetProductItemHistory requires 1 args\n")
      flag.Usage()
    }
    arg1761 := flag.Arg(1)
    mbTrans1762 := thrift.NewTMemoryBufferLen(len(arg1761))
    defer mbTrans1762.Close()
    _, err1763 := mbTrans1762.WriteString(arg1761)
    if err1763 != nil {
      Usage()
      return
    }
    factory1764 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1765 := factory1764.GetProtocol(mbTrans1762)
    argvalue0 := sp-cms.NewItemHistoryRequest()
    err1766 := argvalue0.Read(jsProt1765)
    if err1766 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetProductItemHistory(value0))
    fmt.Print("\n")
    break
  case "getVerticalAttributeDefinition":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetVerticalAttributeDefinition requires 1 args\n")
      flag.Usage()
    }
    arg1767 := flag.Arg(1)
    mbTrans1768 := thrift.NewTMemoryBufferLen(len(arg1767))
    defer mbTrans1768.Close()
    _, err1769 := mbTrans1768.WriteString(arg1767)
    if err1769 != nil {
      Usage()
      return
    }
    factory1770 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1771 := factory1770.GetProtocol(mbTrans1768)
    argvalue0 := sp-cms.NewVerticalAttributeDefinitionRequest()
    err1772 := argvalue0.Read(jsProt1771)
    if err1772 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetVerticalAttributeDefinition(value0))
    fmt.Print("\n")
    break
  case "getMetaData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetMetaData requires 1 args\n")
      flag.Usage()
    }
    arg1773 := flag.Arg(1)
    mbTrans1774 := thrift.NewTMemoryBufferLen(len(arg1773))
    defer mbTrans1774.Close()
    _, err1775 := mbTrans1774.WriteString(arg1773)
    if err1775 != nil {
      Usage()
      return
    }
    factory1776 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1777 := factory1776.GetProtocol(mbTrans1774)
    argvalue0 := sp-cms.NewMetaDataRequest()
    err1778 := argvalue0.Read(jsProt1777)
    if err1778 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetMetaData(value0))
    fmt.Print("\n")
    break
  case "searchEntity":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "SearchEntity requires 1 args\n")
      flag.Usage()
    }
    arg1779 := flag.Arg(1)
    mbTrans1780 := thrift.NewTMemoryBufferLen(len(arg1779))
    defer mbTrans1780.Close()
    _, err1781 := mbTrans1780.WriteString(arg1779)
    if err1781 != nil {
      Usage()
      return
    }
    factory1782 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1783 := factory1782.GetProtocol(mbTrans1780)
    argvalue0 := sp-cms.NewEntitySearchRequest()
    err1784 := argvalue0.Read(jsProt1783)
    if err1784 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SearchEntity(value0))
    fmt.Print("\n")
    break
  case "getProductIDForEGV":
    if flag.NArg() - 1 != 1 {
      fmt.Fprint(os.Stderr, "GetProductIDForEGV requires 1 args\n")
      flag.Usage()
    }
    arg1785 := flag.Arg(1)
    mbTrans1786 := thrift.NewTMemoryBufferLen(len(arg1785))
    defer mbTrans1786.Close()
    _, err1787 := mbTrans1786.WriteString(arg1785)
    if err1787 != nil {
      Usage()
      return
    }
    factory1788 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1789 := factory1788.GetProtocol(mbTrans1786)
    argvalue0 := sp-cms.NewProductIdForEGVRequest()
    err1790 := argvalue0.Read(jsProt1789)
    if err1790 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetProductIDForEGV(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprint(os.Stderr, "Invalid function ", cmd, "\n")
  }
}
