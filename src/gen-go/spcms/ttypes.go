/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

/*
	Rename the package to spcms from sp-cms. There should no special character in package name
	The spcms thrift files are configured to be sp-cms
*/
package spcms;

import (
        "thrift"
        "fmt"
)

import "thriftlib/cms"



type DataType int
const (
  TEXT DataType = 1
  NUMBER DataType = 2
  DECIMAL DataType = 3
  BOOLEAN DataType = 4
  DATETIME DataType = 5
  PRICE_COMPONENT DataType = 6
)
func (p DataType) String() string {
  switch p {
  case TEXT: return "TEXT"
  case NUMBER: return "NUMBER"
  case DECIMAL: return "DECIMAL"
  case BOOLEAN: return "BOOLEAN"
  case DATETIME: return "DATETIME"
  case PRICE_COMPONENT: return "PRICE_COMPONENT"
  }
  return ""
}

func FromDataTypeString(s string) DataType {
  switch s {
  case "TEXT": return TEXT
  case "NUMBER": return NUMBER
  case "DECIMAL": return DECIMAL
  case "BOOLEAN": return BOOLEAN
  case "DATETIME": return DATETIME
  case "PRICE_COMPONENT": return PRICE_COMPONENT
  }
  return DataType(-10000)
}

func (p DataType) Value() int {
  return int(p)
}

func (p DataType) IsEnum() bool {
  return true
}

type EntityType int
const (
  PRODUCT EntityType = 1
  LISTING EntityType = 2
)
func (p EntityType) String() string {
  switch p {
  case PRODUCT: return "PRODUCT"
  case LISTING: return "LISTING"
  }
  return ""
}

func FromEntityTypeString(s string) EntityType {
  switch s {
  case "PRODUCT": return PRODUCT
  case "LISTING": return LISTING
  }
  return EntityType(-10000)
}

func (p EntityType) Value() int {
  return int(p)
}

func (p EntityType) IsEnum() bool {
  return true
}

type ItemID string

type ProductID string

type ListingID string

/**
 * Attributes:
 *  - ClientId
 *  - RequestId
 *  - RequestTimestamp
 *  - RequestParams
 */
type BaseRequest struct {
  thrift.TStruct
  ClientId string "clientId"; // 1
  RequestId string "requestId"; // 2
  RequestTimestamp int64 "requestTimestamp"; // 3
  RequestParams thrift.TMap "requestParams"; // 4
}

func NewBaseRequest() *BaseRequest {
  output := &BaseRequest{
    TStruct:thrift.NewTStruct("BaseRequest", []thrift.TField{
    thrift.NewTField("clientId", thrift.STRING, 1),
    thrift.NewTField("requestId", thrift.STRING, 2),
    thrift.NewTField("requestTimestamp", thrift.I64, 3),
    thrift.NewTField("requestParams", thrift.MAP, 4),
    }),
  }
  {
  }
  return output
}

func (p *BaseRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "clientId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "requestId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "requestTimestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "requestParams" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BaseRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadString()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "clientId", p.ThriftName(), err1); }
  p.ClientId = v0
  return err
}

func (p *BaseRequest) ReadFieldClientId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BaseRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadString()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(2, "requestId", p.ThriftName(), err3); }
  p.RequestId = v2
  return err
}

func (p *BaseRequest) ReadFieldRequestId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BaseRequest) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v4, err5 := iprot.ReadI64()
  if err5 != nil { return thrift.NewTProtocolExceptionReadField(3, "requestTimestamp", p.ThriftName(), err5); }
  p.RequestTimestamp = v4
  return err
}

func (p *BaseRequest) ReadFieldRequestTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *BaseRequest) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype9, _vtype10, _size8, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.RequestParams", "", err)
  }
  p.RequestParams = thrift.NewTMap(_ktype9, _vtype10, _size8)
  for _i12:= 0; _i12 < _size8; _i12++ {
    v15, err16 := iprot.ReadString()
    if err16 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key13", "", err16); }
    _key13 := v15
    v17, err18 := iprot.ReadString()
    if err18 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val14", "", err18); }
    _val14 := v17
    p.RequestParams.Set(_key13, _val14)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *BaseRequest) ReadFieldRequestParams(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *BaseRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("BaseRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BaseRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("clientId", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "clientId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ClientId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "clientId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "clientId", p.ThriftName(), err); }
  return err
}

func (p *BaseRequest) WriteFieldClientId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BaseRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("requestId", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "requestId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.RequestId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "requestId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "requestId", p.ThriftName(), err); }
  return err
}

func (p *BaseRequest) WriteFieldRequestId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BaseRequest) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("requestTimestamp", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "requestTimestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.RequestTimestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "requestTimestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "requestTimestamp", p.ThriftName(), err); }
  return err
}

func (p *BaseRequest) WriteFieldRequestTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *BaseRequest) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.RequestParams != nil {
    err = oprot.WriteFieldBegin("requestParams", thrift.MAP, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "requestParams", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.RequestParams.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter19 := range p.RequestParams.Iter() {
      Kiter20, Viter21 := Miter19.Key().(string), Miter19.Value().(string)
      err = oprot.WriteString(string(Kiter20))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter20", "", err); }
      err = oprot.WriteString(string(Viter21))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter21", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "requestParams", p.ThriftName(), err); }
  }
  return err
}

func (p *BaseRequest) WriteFieldRequestParams(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *BaseRequest) TStructName() string {
  return "BaseRequest"
}

func (p *BaseRequest) ThriftName() string {
  return "BaseRequest"
}

func (p *BaseRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseRequest(%+v)", *p)
}

func (p *BaseRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BaseRequest)
  if !ok {
    return 0, false
  }
  if p.ClientId != data.ClientId {
    if p.ClientId < data.ClientId {
      return -1, true
    }
    return 1, true
  }
  if p.RequestId != data.RequestId {
    if p.RequestId < data.RequestId {
      return -1, true
    }
    return 1, true
  }
  if p.RequestTimestamp != data.RequestTimestamp {
    if p.RequestTimestamp < data.RequestTimestamp {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.RequestParams.CompareTo(data.RequestParams); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *BaseRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ClientId
  case 2: return p.RequestId
  case 3: return p.RequestTimestamp
  case 4: return p.RequestParams
  }
  return nil
}

func (p *BaseRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("clientId", thrift.STRING, 1),
    thrift.NewTField("requestId", thrift.STRING, 2),
    thrift.NewTField("requestTimestamp", thrift.I64, 3),
    thrift.NewTField("requestParams", thrift.MAP, 4),
    })
}

/**
 * Attributes:
 *  - ServerId
 *  - ResponseTimestamp
 *  - CmsRequestTimestamp
 *  - BaseRequest
 *  - ResultParams
 */
type BaseResult struct {
  thrift.TStruct
  ServerId string "serverId"; // 1
  ResponseTimestamp int64 "responseTimestamp"; // 2
  CmsRequestTimestamp int64 "cmsRequestTimestamp"; // 3
  BaseRequest *BaseRequest "baseRequest"; // 4
  ResultParams thrift.TMap "resultParams"; // 5
}

func NewBaseResult() *BaseResult {
  output := &BaseResult{
    TStruct:thrift.NewTStruct("BaseResult", []thrift.TField{
    thrift.NewTField("serverId", thrift.STRING, 1),
    thrift.NewTField("responseTimestamp", thrift.I64, 2),
    thrift.NewTField("cmsRequestTimestamp", thrift.I64, 3),
    thrift.NewTField("baseRequest", thrift.STRUCT, 4),
    thrift.NewTField("resultParams", thrift.MAP, 5),
    }),
  }
  {
  }
  return output
}

func (p *BaseResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "serverId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "responseTimestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "cmsRequestTimestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "resultParams" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *BaseResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v22, err23 := iprot.ReadString()
  if err23 != nil { return thrift.NewTProtocolExceptionReadField(1, "serverId", p.ThriftName(), err23); }
  p.ServerId = v22
  return err
}

func (p *BaseResult) ReadFieldServerId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *BaseResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v24, err25 := iprot.ReadI64()
  if err25 != nil { return thrift.NewTProtocolExceptionReadField(2, "responseTimestamp", p.ThriftName(), err25); }
  p.ResponseTimestamp = v24
  return err
}

func (p *BaseResult) ReadFieldResponseTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *BaseResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v26, err27 := iprot.ReadI64()
  if err27 != nil { return thrift.NewTProtocolExceptionReadField(3, "cmsRequestTimestamp", p.ThriftName(), err27); }
  p.CmsRequestTimestamp = v26
  return err
}

func (p *BaseResult) ReadFieldCmsRequestTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *BaseResult) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err30 := p.BaseRequest.Read(iprot)
  if err30 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err30); }
  return err
}

func (p *BaseResult) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *BaseResult) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype34, _vtype35, _size33, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ResultParams", "", err)
  }
  p.ResultParams = thrift.NewTMap(_ktype34, _vtype35, _size33)
  for _i37:= 0; _i37 < _size33; _i37++ {
    v40, err41 := iprot.ReadString()
    if err41 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key38", "", err41); }
    _key38 := v40
    v42, err43 := iprot.ReadString()
    if err43 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val39", "", err43); }
    _val39 := v42
    p.ResultParams.Set(_key38, _val39)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *BaseResult) ReadFieldResultParams(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *BaseResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("BaseResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *BaseResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("serverId", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "serverId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ServerId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "serverId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "serverId", p.ThriftName(), err); }
  return err
}

func (p *BaseResult) WriteFieldServerId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *BaseResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("responseTimestamp", thrift.I64, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "responseTimestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.ResponseTimestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "responseTimestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "responseTimestamp", p.ThriftName(), err); }
  return err
}

func (p *BaseResult) WriteFieldResponseTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *BaseResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("cmsRequestTimestamp", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "cmsRequestTimestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.CmsRequestTimestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "cmsRequestTimestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "cmsRequestTimestamp", p.ThriftName(), err); }
  return err
}

func (p *BaseResult) WriteFieldCmsRequestTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *BaseResult) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *BaseResult) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *BaseResult) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ResultParams != nil {
    err = oprot.WriteFieldBegin("resultParams", thrift.MAP, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "resultParams", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.ResultParams.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter44 := range p.ResultParams.Iter() {
      Kiter45, Viter46 := Miter44.Key().(string), Miter44.Value().(string)
      err = oprot.WriteString(string(Kiter45))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter45", "", err); }
      err = oprot.WriteString(string(Viter46))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter46", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "resultParams", p.ThriftName(), err); }
  }
  return err
}

func (p *BaseResult) WriteFieldResultParams(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *BaseResult) TStructName() string {
  return "BaseResult"
}

func (p *BaseResult) ThriftName() string {
  return "BaseResult"
}

func (p *BaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseResult(%+v)", *p)
}

func (p *BaseResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*BaseResult)
  if !ok {
    return 0, false
  }
  if p.ServerId != data.ServerId {
    if p.ServerId < data.ServerId {
      return -1, true
    }
    return 1, true
  }
  if p.ResponseTimestamp != data.ResponseTimestamp {
    if p.ResponseTimestamp < data.ResponseTimestamp {
      return -1, true
    }
    return 1, true
  }
  if p.CmsRequestTimestamp != data.CmsRequestTimestamp {
    if p.CmsRequestTimestamp < data.CmsRequestTimestamp {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ResultParams.CompareTo(data.ResultParams); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *BaseResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ServerId
  case 2: return p.ResponseTimestamp
  case 3: return p.CmsRequestTimestamp
  case 4: return p.BaseRequest
  case 5: return p.ResultParams
  }
  return nil
}

func (p *BaseResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("serverId", thrift.STRING, 1),
    thrift.NewTField("responseTimestamp", thrift.I64, 2),
    thrift.NewTField("cmsRequestTimestamp", thrift.I64, 3),
    thrift.NewTField("baseRequest", thrift.STRUCT, 4),
    thrift.NewTField("resultParams", thrift.MAP, 5),
    })
}

/**
 * Attributes:
 *  - ErrorCode
 *  - ErrorMessage
 *  - Trace
 */
type SPCMSException struct {
  thrift.TStruct
  ErrorCode int32 "errorCode"; // 1
  ErrorMessage string "errorMessage"; // 2
  Trace string "trace"; // 3
}

func NewSPCMSException() *SPCMSException {
  output := &SPCMSException{
    TStruct:thrift.NewTStruct("SPCMSException", []thrift.TField{
    thrift.NewTField("errorCode", thrift.I32, 1),
    thrift.NewTField("errorMessage", thrift.STRING, 2),
    thrift.NewTField("trace", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *SPCMSException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "errorCode" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "errorMessage" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "trace" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SPCMSException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v47, err48 := iprot.ReadI32()
  if err48 != nil { return thrift.NewTProtocolExceptionReadField(1, "errorCode", p.ThriftName(), err48); }
  p.ErrorCode = v47
  return err
}

func (p *SPCMSException) ReadFieldErrorCode(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SPCMSException) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v49, err50 := iprot.ReadString()
  if err50 != nil { return thrift.NewTProtocolExceptionReadField(2, "errorMessage", p.ThriftName(), err50); }
  p.ErrorMessage = v49
  return err
}

func (p *SPCMSException) ReadFieldErrorMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *SPCMSException) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v51, err52 := iprot.ReadString()
  if err52 != nil { return thrift.NewTProtocolExceptionReadField(3, "trace", p.ThriftName(), err52); }
  p.Trace = v51
  return err
}

func (p *SPCMSException) ReadFieldTrace(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *SPCMSException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("SPCMSException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SPCMSException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("errorCode", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "errorCode", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.ErrorCode))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "errorCode", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "errorCode", p.ThriftName(), err); }
  return err
}

func (p *SPCMSException) WriteFieldErrorCode(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SPCMSException) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("errorMessage", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "errorMessage", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ErrorMessage))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "errorMessage", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "errorMessage", p.ThriftName(), err); }
  return err
}

func (p *SPCMSException) WriteFieldErrorMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *SPCMSException) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("trace", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "trace", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Trace))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "trace", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "trace", p.ThriftName(), err); }
  return err
}

func (p *SPCMSException) WriteFieldTrace(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *SPCMSException) TStructName() string {
  return "SPCMSException"
}

func (p *SPCMSException) ThriftName() string {
  return "SPCMSException"
}

func (p *SPCMSException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SPCMSException(%+v)", *p)
}

func (p *SPCMSException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SPCMSException)
  if !ok {
    return 0, false
  }
  if p.ErrorCode != data.ErrorCode {
    if p.ErrorCode < data.ErrorCode {
      return -1, true
    }
    return 1, true
  }
  if p.ErrorMessage != data.ErrorMessage {
    if p.ErrorMessage < data.ErrorMessage {
      return -1, true
    }
    return 1, true
  }
  if p.Trace != data.Trace {
    if p.Trace < data.Trace {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *SPCMSException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ErrorCode
  case 2: return p.ErrorMessage
  case 3: return p.Trace
  }
  return nil
}

func (p *SPCMSException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("errorCode", thrift.I32, 1),
    thrift.NewTField("errorMessage", thrift.STRING, 2),
    thrift.NewTField("trace", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - MinShippingDays
 *  - MaxShippingDays
 *  - ProcurementSLA
 */
type ShippingDetails struct {
  thrift.TStruct
  MinShippingDays int32 "minShippingDays"; // 1
  MaxShippingDays int32 "maxShippingDays"; // 2
  ProcurementSLA int32 "procurementSLA"; // 3
}

func NewShippingDetails() *ShippingDetails {
  output := &ShippingDetails{
    TStruct:thrift.NewTStruct("ShippingDetails", []thrift.TField{
    thrift.NewTField("minShippingDays", thrift.I32, 1),
    thrift.NewTField("maxShippingDays", thrift.I32, 2),
    thrift.NewTField("procurementSLA", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *ShippingDetails) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "minShippingDays" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "maxShippingDays" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "procurementSLA" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ShippingDetails) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v53, err54 := iprot.ReadI32()
  if err54 != nil { return thrift.NewTProtocolExceptionReadField(1, "minShippingDays", p.ThriftName(), err54); }
  p.MinShippingDays = v53
  return err
}

func (p *ShippingDetails) ReadFieldMinShippingDays(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ShippingDetails) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v55, err56 := iprot.ReadI32()
  if err56 != nil { return thrift.NewTProtocolExceptionReadField(2, "maxShippingDays", p.ThriftName(), err56); }
  p.MaxShippingDays = v55
  return err
}

func (p *ShippingDetails) ReadFieldMaxShippingDays(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ShippingDetails) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v57, err58 := iprot.ReadI32()
  if err58 != nil { return thrift.NewTProtocolExceptionReadField(3, "procurementSLA", p.ThriftName(), err58); }
  p.ProcurementSLA = v57
  return err
}

func (p *ShippingDetails) ReadFieldProcurementSLA(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ShippingDetails) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ShippingDetails")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ShippingDetails) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("minShippingDays", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "minShippingDays", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MinShippingDays))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "minShippingDays", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "minShippingDays", p.ThriftName(), err); }
  return err
}

func (p *ShippingDetails) WriteFieldMinShippingDays(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ShippingDetails) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("maxShippingDays", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "maxShippingDays", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MaxShippingDays))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "maxShippingDays", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "maxShippingDays", p.ThriftName(), err); }
  return err
}

func (p *ShippingDetails) WriteFieldMaxShippingDays(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ShippingDetails) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("procurementSLA", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "procurementSLA", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.ProcurementSLA))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "procurementSLA", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "procurementSLA", p.ThriftName(), err); }
  return err
}

func (p *ShippingDetails) WriteFieldProcurementSLA(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ShippingDetails) TStructName() string {
  return "ShippingDetails"
}

func (p *ShippingDetails) ThriftName() string {
  return "ShippingDetails"
}

func (p *ShippingDetails) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShippingDetails(%+v)", *p)
}

func (p *ShippingDetails) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ShippingDetails)
  if !ok {
    return 0, false
  }
  if p.MinShippingDays != data.MinShippingDays {
    if p.MinShippingDays < data.MinShippingDays {
      return -1, true
    }
    return 1, true
  }
  if p.MaxShippingDays != data.MaxShippingDays {
    if p.MaxShippingDays < data.MaxShippingDays {
      return -1, true
    }
    return 1, true
  }
  if p.ProcurementSLA != data.ProcurementSLA {
    if p.ProcurementSLA < data.ProcurementSLA {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *ShippingDetails) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.MinShippingDays
  case 2: return p.MaxShippingDays
  case 3: return p.ProcurementSLA
  }
  return nil
}

func (p *ShippingDetails) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("minShippingDays", thrift.I32, 1),
    thrift.NewTField("maxShippingDays", thrift.I32, 2),
    thrift.NewTField("procurementSLA", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - ProductId
 *  - Vertical
 *  - VersionNo
 *  - ItemID
 *  - PreferredListingId
 *  - ItemizedProductIds
 *  - ProductAttributes
 *  - ViewsAsJson
 *  - RelationshipInfo
 *  - StaticContentInfo
 *  - CategorizationInfo
 *  - ContributorInfo
 *  - TagDetails
 */
type ProductData struct {
  thrift.TStruct
  ProductId string "productId"; // 1
  Vertical string "vertical"; // 2
  VersionNo int64 "versionNo"; // 3
  ItemID string "itemID"; // 4
  PreferredListingId ListingID "preferredListingId"; // 5
  ItemizedProductIds thrift.TList "itemizedProductIds"; // 6
  ProductAttributes thrift.TMap "productAttributes"; // 7
  _ interface{} "viewsAsJson"; // nil # 8
  ViewsAsJson thrift.TMap "viewsAsJson"; // 9
  RelationshipInfo thrift.TList "relationshipInfo"; // 10
  StaticContentInfo thrift.TList "staticContentInfo"; // 11
  CategorizationInfo *CategorizationInfo "categorizationInfo"; // 12
  ContributorInfo thrift.TMap "contributorInfo"; // 13
  TagDetails thrift.TMap "tagDetails"; // 14
}

func NewProductData() *ProductData {
  output := &ProductData{
    TStruct:thrift.NewTStruct("ProductData", []thrift.TField{
    thrift.NewTField("productId", thrift.STRING, 1),
    thrift.NewTField("vertical", thrift.STRING, 2),
    thrift.NewTField("versionNo", thrift.I64, 3),
    thrift.NewTField("itemID", thrift.STRING, 4),
    thrift.NewTField("preferredListingId", thrift.STRING, 5),
    thrift.NewTField("itemizedProductIds", thrift.LIST, 6),
    thrift.NewTField("productAttributes", thrift.MAP, 7),
    thrift.NewTField("viewsAsJson", thrift.MAP, 9),
    thrift.NewTField("relationshipInfo", thrift.LIST, 10),
    thrift.NewTField("staticContentInfo", thrift.LIST, 11),
    thrift.NewTField("categorizationInfo", thrift.STRUCT, 12),
    thrift.NewTField("contributorInfo", thrift.MAP, 13),
    thrift.NewTField("tagDetails", thrift.MAP, 14),
    }),
  }
  {
  }
  return output
}

func (p *ProductData) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "vertical" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "versionNo" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "itemID" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "preferredListingId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "itemizedProductIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "productAttributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 9 || fieldName == "viewsAsJson" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 10 || fieldName == "relationshipInfo" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 11 || fieldName == "staticContentInfo" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 12 || fieldName == "categorizationInfo" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 13 || fieldName == "contributorInfo" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField13(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField13(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 14 || fieldName == "tagDetails" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField14(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField14(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductData) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v59, err60 := iprot.ReadString()
  if err60 != nil { return thrift.NewTProtocolExceptionReadField(1, "productId", p.ThriftName(), err60); }
  p.ProductId = v59
  return err
}

func (p *ProductData) ReadFieldProductId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ProductData) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v61, err62 := iprot.ReadString()
  if err62 != nil { return thrift.NewTProtocolExceptionReadField(2, "vertical", p.ThriftName(), err62); }
  p.Vertical = v61
  return err
}

func (p *ProductData) ReadFieldVertical(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ProductData) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v63, err64 := iprot.ReadI64()
  if err64 != nil { return thrift.NewTProtocolExceptionReadField(3, "versionNo", p.ThriftName(), err64); }
  p.VersionNo = v63
  return err
}

func (p *ProductData) ReadFieldVersionNo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ProductData) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v65, err66 := iprot.ReadString()
  if err66 != nil { return thrift.NewTProtocolExceptionReadField(4, "itemID", p.ThriftName(), err66); }
  p.ItemID = v65
  return err
}

func (p *ProductData) ReadFieldItemID(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ProductData) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v67, err68 := iprot.ReadString()
  if err68 != nil { return thrift.NewTProtocolExceptionReadField(5, "preferredListingId", p.ThriftName(), err68); }
  p.PreferredListingId = ListingID(v67)
  return err
}

func (p *ProductData) ReadFieldPreferredListingId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *ProductData) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype74, _size71, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ItemizedProductIds", "", err)
  }
  p.ItemizedProductIds = thrift.NewTList(_etype74, _size71)
  for _i75:= 0; _i75 < _size71; _i75++ {
    v77, err78 := iprot.ReadString()
    if err78 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem76", "", err78); }
    _elem76 := v77
    p.ItemizedProductIds.Push(_elem76)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductData) ReadFieldItemizedProductIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *ProductData) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype82, _vtype83, _size81, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductAttributes", "", err)
  }
  p.ProductAttributes = thrift.NewTMap(_ktype82, _vtype83, _size81)
  for _i85:= 0; _i85 < _size81; _i85++ {
    v88, err89 := iprot.ReadString()
    if err89 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key86", "", err89); }
    _key86 := v88
    _val87 := NewCms.ttypes.Attribute()
    err92 := _val87.Read(iprot)
    if err92 != nil { return thrift.NewTProtocolExceptionReadStruct("_val87Attribute", err92); }
    p.ProductAttributes.Set(_key86, _val87)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ProductData) ReadFieldProductAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *ProductData) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype96, _vtype97, _size95, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ViewsAsJson", "", err)
  }
  p.ViewsAsJson = thrift.NewTMap(_ktype96, _vtype97, _size95)
  for _i99:= 0; _i99 < _size95; _i99++ {
    v102, err103 := iprot.ReadString()
    if err103 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key100", "", err103); }
    _key100 := v102
    v104, err105 := iprot.ReadString()
    if err105 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val101", "", err105); }
    _val101 := v104
    p.ViewsAsJson.Set(_key100, _val101)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ProductData) ReadFieldViewsAsJson(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField9(iprot)
}

func (p *ProductData) ReadField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype111, _size108, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.RelationshipInfo", "", err)
  }
  p.RelationshipInfo = thrift.NewTList(_etype111, _size108)
  for _i112:= 0; _i112 < _size108; _i112++ {
    _elem113 := NewCms.ttypes.RelationshipInfo()
    err116 := _elem113.Read(iprot)
    if err116 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem113RelationshipInfo", err116); }
    p.RelationshipInfo.Push(_elem113)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductData) ReadFieldRelationshipInfo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField10(iprot)
}

func (p *ProductData) ReadField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype122, _size119, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.StaticContentInfo", "", err)
  }
  p.StaticContentInfo = thrift.NewTList(_etype122, _size119)
  for _i123:= 0; _i123 < _size119; _i123++ {
    _elem124 := NewCms.ttypes.StaticContent()
    err127 := _elem124.Read(iprot)
    if err127 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem124StaticContent", err127); }
    p.StaticContentInfo.Push(_elem124)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductData) ReadFieldStaticContentInfo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField11(iprot)
}

func (p *ProductData) ReadField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CategorizationInfo = NewCms.ttypes.CategorizationInfo()
  err130 := p.CategorizationInfo.Read(iprot)
  if err130 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CategorizationInfoCategorizationInfo", err130); }
  return err
}

func (p *ProductData) ReadFieldCategorizationInfo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField12(iprot)
}

func (p *ProductData) ReadField13(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype134, _vtype135, _size133, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ContributorInfo", "", err)
  }
  p.ContributorInfo = thrift.NewTMap(_ktype134, _vtype135, _size133)
  for _i137:= 0; _i137 < _size133; _i137++ {
    v140, err141 := iprot.ReadString()
    if err141 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key138", "", err141); }
    _key138 := v140
    _val139 := NewCms.ttypes.Contributor()
    err144 := _val139.Read(iprot)
    if err144 != nil { return thrift.NewTProtocolExceptionReadStruct("_val139Contributor", err144); }
    p.ContributorInfo.Set(_key138, _val139)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ProductData) ReadFieldContributorInfo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField13(iprot)
}

func (p *ProductData) ReadField14(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype148, _vtype149, _size147, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.TagDetails", "", err)
  }
  p.TagDetails = thrift.NewTMap(_ktype148, _vtype149, _size147)
  for _i151:= 0; _i151 < _size147; _i151++ {
    v154, err155 := iprot.ReadString()
    if err155 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key152", "", err155); }
    _key152 := v154
    _etype161, _size158, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(-1, "_val153", "", err)
    }
    _val153 := thrift.NewTList(_etype161, _size158)
    for _i162:= 0; _i162 < _size158; _i162++ {
      _elem163 := NewCms.ttypes.TagInfo()
      err166 := _elem163.Read(iprot)
      if err166 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem163TagInfo", err166); }
      _val153.Push(_elem163)
    }
    err = iprot.ReadListEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
    p.TagDetails.Set(_key152, _val153)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ProductData) ReadFieldTagDetails(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField14(iprot)
}

func (p *ProductData) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ProductData")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField9(oprot)
  if err != nil { return err }
  err = p.WriteField10(oprot)
  if err != nil { return err }
  err = p.WriteField11(oprot)
  if err != nil { return err }
  err = p.WriteField12(oprot)
  if err != nil { return err }
  err = p.WriteField13(oprot)
  if err != nil { return err }
  err = p.WriteField14(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductData) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("productId", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ProductId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productId", p.ThriftName(), err); }
  return err
}

func (p *ProductData) WriteFieldProductId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ProductData) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("vertical", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "vertical", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Vertical))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "vertical", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "vertical", p.ThriftName(), err); }
  return err
}

func (p *ProductData) WriteFieldVertical(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ProductData) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("versionNo", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "versionNo", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.VersionNo))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "versionNo", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "versionNo", p.ThriftName(), err); }
  return err
}

func (p *ProductData) WriteFieldVersionNo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ProductData) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("itemID", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "itemID", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ItemID))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "itemID", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "itemID", p.ThriftName(), err); }
  return err
}

func (p *ProductData) WriteFieldItemID(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ProductData) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("preferredListingId", thrift.STRING, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "preferredListingId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.PreferredListingId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "preferredListingId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "preferredListingId", p.ThriftName(), err); }
  return err
}

func (p *ProductData) WriteFieldPreferredListingId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *ProductData) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ItemizedProductIds != nil {
    err = oprot.WriteFieldBegin("itemizedProductIds", thrift.LIST, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "itemizedProductIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ItemizedProductIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter167 := range p.ItemizedProductIds.Iter() {
      Iter168 := Iter167.(string)
      err = oprot.WriteString(string(Iter168))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter168", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "itemizedProductIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductData) WriteFieldItemizedProductIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *ProductData) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductAttributes != nil {
    err = oprot.WriteFieldBegin("productAttributes", thrift.MAP, 7)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "productAttributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.ProductAttributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter169 := range p.ProductAttributes.Iter() {
      Kiter170, Viter171 := Miter169.Key().(string), Miter169.Value().(*Attribute)
      err = oprot.WriteString(string(Kiter170))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter170", "", err); }
      err = Viter171.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Attribute", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "productAttributes", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductData) WriteFieldProductAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *ProductData) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ViewsAsJson != nil {
    err = oprot.WriteFieldBegin("viewsAsJson", thrift.MAP, 9)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "viewsAsJson", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.ViewsAsJson.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter172 := range p.ViewsAsJson.Iter() {
      Kiter173, Viter174 := Miter172.Key().(string), Miter172.Value().(string)
      err = oprot.WriteString(string(Kiter173))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter173", "", err); }
      err = oprot.WriteString(string(Viter174))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter174", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "viewsAsJson", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductData) WriteFieldViewsAsJson(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField9(oprot)
}

func (p *ProductData) WriteField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.RelationshipInfo != nil {
    err = oprot.WriteFieldBegin("relationshipInfo", thrift.LIST, 10)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "relationshipInfo", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.RelationshipInfo.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter175 := range p.RelationshipInfo.Iter() {
      Iter176 := Iter175.(*RelationshipInfo)
      err = Iter176.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("RelationshipInfo", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "relationshipInfo", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductData) WriteFieldRelationshipInfo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField10(oprot)
}

func (p *ProductData) WriteField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.StaticContentInfo != nil {
    err = oprot.WriteFieldBegin("staticContentInfo", thrift.LIST, 11)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "staticContentInfo", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.StaticContentInfo.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter177 := range p.StaticContentInfo.Iter() {
      Iter178 := Iter177.(*StaticContent)
      err = Iter178.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("StaticContent", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "staticContentInfo", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductData) WriteFieldStaticContentInfo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField11(oprot)
}

func (p *ProductData) WriteField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CategorizationInfo != nil {
    err = oprot.WriteFieldBegin("categorizationInfo", thrift.STRUCT, 12)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "categorizationInfo", p.ThriftName(), err); }
    err = p.CategorizationInfo.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategorizationInfo", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "categorizationInfo", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductData) WriteFieldCategorizationInfo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField12(oprot)
}

func (p *ProductData) WriteField13(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ContributorInfo != nil {
    err = oprot.WriteFieldBegin("contributorInfo", thrift.MAP, 13)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(13, "contributorInfo", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.ContributorInfo.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter179 := range p.ContributorInfo.Iter() {
      Kiter180, Viter181 := Miter179.Key().(string), Miter179.Value().(*Contributor)
      err = oprot.WriteString(string(Kiter180))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter180", "", err); }
      err = Viter181.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Contributor", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(13, "contributorInfo", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductData) WriteFieldContributorInfo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField13(oprot)
}

func (p *ProductData) WriteField14(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.TagDetails != nil {
    err = oprot.WriteFieldBegin("tagDetails", thrift.MAP, 14)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(14, "tagDetails", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, p.TagDetails.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter182 := range p.TagDetails.Iter() {
      Kiter183, Viter184 := Miter182.Key().(string), Miter182.Value().(thrift.TList)
      err = oprot.WriteString(string(Kiter183))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter183", "", err); }
      err = oprot.WriteListBegin(thrift.STRUCT, Viter184.Len())
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
      for Iter185 := range Viter184.Iter() {
        Iter186 := Iter185.(*TagInfo)
        err = Iter186.Write(oprot)
        if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TagInfo", err); }
      }
      err = oprot.WriteListEnd()
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(14, "tagDetails", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductData) WriteFieldTagDetails(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField14(oprot)
}

func (p *ProductData) TStructName() string {
  return "ProductData"
}

func (p *ProductData) ThriftName() string {
  return "ProductData"
}

func (p *ProductData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductData(%+v)", *p)
}

func (p *ProductData) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ProductData)
  if !ok {
    return 0, false
  }
  if p.ProductId != data.ProductId {
    if p.ProductId < data.ProductId {
      return -1, true
    }
    return 1, true
  }
  if p.Vertical != data.Vertical {
    if p.Vertical < data.Vertical {
      return -1, true
    }
    return 1, true
  }
  if p.VersionNo != data.VersionNo {
    if p.VersionNo < data.VersionNo {
      return -1, true
    }
    return 1, true
  }
  if p.ItemID != data.ItemID {
    if p.ItemID < data.ItemID {
      return -1, true
    }
    return 1, true
  }
  if p.PreferredListingId != data.PreferredListingId {
    if p.PreferredListingId < data.PreferredListingId {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.ItemizedProductIds.CompareTo(data.ItemizedProductIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ProductAttributes.CompareTo(data.ProductAttributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ViewsAsJson.CompareTo(data.ViewsAsJson); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.RelationshipInfo.CompareTo(data.RelationshipInfo); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.StaticContentInfo.CompareTo(data.StaticContentInfo); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.CategorizationInfo.CompareTo(data.CategorizationInfo); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ContributorInfo.CompareTo(data.ContributorInfo); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.TagDetails.CompareTo(data.TagDetails); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ProductData) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductId
  case 2: return p.Vertical
  case 3: return p.VersionNo
  case 4: return p.ItemID
  case 5: return p.PreferredListingId
  case 6: return p.ItemizedProductIds
  case 7: return p.ProductAttributes
  case 9: return p.ViewsAsJson
  case 10: return p.RelationshipInfo
  case 11: return p.StaticContentInfo
  case 12: return p.CategorizationInfo
  case 13: return p.ContributorInfo
  case 14: return p.TagDetails
  }
  return nil
}

func (p *ProductData) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productId", thrift.STRING, 1),
    thrift.NewTField("vertical", thrift.STRING, 2),
    thrift.NewTField("versionNo", thrift.I64, 3),
    thrift.NewTField("itemID", thrift.STRING, 4),
    thrift.NewTField("preferredListingId", thrift.STRING, 5),
    thrift.NewTField("itemizedProductIds", thrift.LIST, 6),
    thrift.NewTField("productAttributes", thrift.MAP, 7),
    thrift.NewTField("viewsAsJson", thrift.MAP, 9),
    thrift.NewTField("relationshipInfo", thrift.LIST, 10),
    thrift.NewTField("staticContentInfo", thrift.LIST, 11),
    thrift.NewTField("categorizationInfo", thrift.STRUCT, 12),
    thrift.NewTField("contributorInfo", thrift.MAP, 13),
    thrift.NewTField("tagDetails", thrift.MAP, 14),
    })
}

/**
 * Attributes:
 *  - ListingId
 *  - ProductId
 *  - SellerId
 *  - ListingStatus
 *  - ListingState
 *  - IsAvailable
 *  - ShippingDetails
 *  - Mrp
 *  - SellerSellingPrice
 *  - PricingAttributes
 *  - ListingAttributes
 *  - TagDetails
 */
type ListingData struct {
  thrift.TStruct
  ListingId string "listingId"; // 1
  ProductId string "productId"; // 2
  SellerId string "sellerId"; // 3
  ListingStatus string "listingStatus"; // 4
  ListingState string "listingState"; // 5
  IsAvailable bool "isAvailable"; // 6
  ShippingDetails *ShippingDetails "shippingDetails"; // 7
  Mrp *Price "mrp"; // 8
  SellerSellingPrice *Price "sellerSellingPrice"; // 9
  PricingAttributes thrift.TMap "pricingAttributes"; // 10
  ListingAttributes thrift.TMap "listingAttributes"; // 11
  TagDetails thrift.TMap "tagDetails"; // 12
}

func NewListingData() *ListingData {
  output := &ListingData{
    TStruct:thrift.NewTStruct("ListingData", []thrift.TField{
    thrift.NewTField("listingId", thrift.STRING, 1),
    thrift.NewTField("productId", thrift.STRING, 2),
    thrift.NewTField("sellerId", thrift.STRING, 3),
    thrift.NewTField("listingStatus", thrift.STRING, 4),
    thrift.NewTField("listingState", thrift.STRING, 5),
    thrift.NewTField("isAvailable", thrift.BOOL, 6),
    thrift.NewTField("shippingDetails", thrift.STRUCT, 7),
    thrift.NewTField("mrp", thrift.STRUCT, 8),
    thrift.NewTField("sellerSellingPrice", thrift.STRUCT, 9),
    thrift.NewTField("pricingAttributes", thrift.MAP, 10),
    thrift.NewTField("listingAttributes", thrift.MAP, 11),
    thrift.NewTField("tagDetails", thrift.MAP, 12),
    }),
  }
  {
  }
  return output
}

func (p *ListingData) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "listingId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "productId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "sellerId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "listingStatus" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "listingState" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "isAvailable" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "shippingDetails" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "mrp" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 9 || fieldName == "sellerSellingPrice" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 10 || fieldName == "pricingAttributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 11 || fieldName == "listingAttributes" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 12 || fieldName == "tagDetails" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ListingData) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v187, err188 := iprot.ReadString()
  if err188 != nil { return thrift.NewTProtocolExceptionReadField(1, "listingId", p.ThriftName(), err188); }
  p.ListingId = v187
  return err
}

func (p *ListingData) ReadFieldListingId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ListingData) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v189, err190 := iprot.ReadString()
  if err190 != nil { return thrift.NewTProtocolExceptionReadField(2, "productId", p.ThriftName(), err190); }
  p.ProductId = v189
  return err
}

func (p *ListingData) ReadFieldProductId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ListingData) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v191, err192 := iprot.ReadString()
  if err192 != nil { return thrift.NewTProtocolExceptionReadField(3, "sellerId", p.ThriftName(), err192); }
  p.SellerId = v191
  return err
}

func (p *ListingData) ReadFieldSellerId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ListingData) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v193, err194 := iprot.ReadString()
  if err194 != nil { return thrift.NewTProtocolExceptionReadField(4, "listingStatus", p.ThriftName(), err194); }
  p.ListingStatus = v193
  return err
}

func (p *ListingData) ReadFieldListingStatus(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ListingData) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v195, err196 := iprot.ReadString()
  if err196 != nil { return thrift.NewTProtocolExceptionReadField(5, "listingState", p.ThriftName(), err196); }
  p.ListingState = v195
  return err
}

func (p *ListingData) ReadFieldListingState(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *ListingData) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v197, err198 := iprot.ReadBool()
  if err198 != nil { return thrift.NewTProtocolExceptionReadField(6, "isAvailable", p.ThriftName(), err198); }
  p.IsAvailable = v197
  return err
}

func (p *ListingData) ReadFieldIsAvailable(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *ListingData) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.ShippingDetails = NewShippingDetails()
  err201 := p.ShippingDetails.Read(iprot)
  if err201 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ShippingDetailsShippingDetails", err201); }
  return err
}

func (p *ListingData) ReadFieldShippingDetails(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *ListingData) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Mrp = NewCms.ttypes.Price()
  err204 := p.Mrp.Read(iprot)
  if err204 != nil { return thrift.NewTProtocolExceptionReadStruct("p.MrpPrice", err204); }
  return err
}

func (p *ListingData) ReadFieldMrp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *ListingData) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SellerSellingPrice = NewCms.ttypes.Price()
  err207 := p.SellerSellingPrice.Read(iprot)
  if err207 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SellerSellingPricePrice", err207); }
  return err
}

func (p *ListingData) ReadFieldSellerSellingPrice(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField9(iprot)
}

func (p *ListingData) ReadField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype211, _vtype212, _size210, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.PricingAttributes", "", err)
  }
  p.PricingAttributes = thrift.NewTMap(_ktype211, _vtype212, _size210)
  for _i214:= 0; _i214 < _size210; _i214++ {
    v217, err218 := iprot.ReadString()
    if err218 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key215", "", err218); }
    _key215 := v217
    _val216 := NewCms.ttypes.Price()
    err221 := _val216.Read(iprot)
    if err221 != nil { return thrift.NewTProtocolExceptionReadStruct("_val216Price", err221); }
    p.PricingAttributes.Set(_key215, _val216)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ListingData) ReadFieldPricingAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField10(iprot)
}

func (p *ListingData) ReadField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype225, _vtype226, _size224, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ListingAttributes", "", err)
  }
  p.ListingAttributes = thrift.NewTMap(_ktype225, _vtype226, _size224)
  for _i228:= 0; _i228 < _size224; _i228++ {
    v231, err232 := iprot.ReadString()
    if err232 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key229", "", err232); }
    _key229 := v231
    _val230 := NewCms.ttypes.Attribute()
    err235 := _val230.Read(iprot)
    if err235 != nil { return thrift.NewTProtocolExceptionReadStruct("_val230Attribute", err235); }
    p.ListingAttributes.Set(_key229, _val230)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ListingData) ReadFieldListingAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField11(iprot)
}

func (p *ListingData) ReadField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype239, _vtype240, _size238, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.TagDetails", "", err)
  }
  p.TagDetails = thrift.NewTMap(_ktype239, _vtype240, _size238)
  for _i242:= 0; _i242 < _size238; _i242++ {
    v245, err246 := iprot.ReadString()
    if err246 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key243", "", err246); }
    _key243 := v245
    _etype252, _size249, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(-1, "_val244", "", err)
    }
    _val244 := thrift.NewTList(_etype252, _size249)
    for _i253:= 0; _i253 < _size249; _i253++ {
      _elem254 := NewCms.ttypes.TagInfo()
      err257 := _elem254.Read(iprot)
      if err257 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem254TagInfo", err257); }
      _val244.Push(_elem254)
    }
    err = iprot.ReadListEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
    p.TagDetails.Set(_key243, _val244)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ListingData) ReadFieldTagDetails(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField12(iprot)
}

func (p *ListingData) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ListingData")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = p.WriteField9(oprot)
  if err != nil { return err }
  err = p.WriteField10(oprot)
  if err != nil { return err }
  err = p.WriteField11(oprot)
  if err != nil { return err }
  err = p.WriteField12(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ListingData) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("listingId", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "listingId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ListingId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "listingId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "listingId", p.ThriftName(), err); }
  return err
}

func (p *ListingData) WriteFieldListingId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ListingData) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("productId", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "productId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ProductId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "productId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "productId", p.ThriftName(), err); }
  return err
}

func (p *ListingData) WriteFieldProductId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ListingData) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("sellerId", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "sellerId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.SellerId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "sellerId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "sellerId", p.ThriftName(), err); }
  return err
}

func (p *ListingData) WriteFieldSellerId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ListingData) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("listingStatus", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "listingStatus", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ListingStatus))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "listingStatus", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "listingStatus", p.ThriftName(), err); }
  return err
}

func (p *ListingData) WriteFieldListingStatus(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ListingData) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("listingState", thrift.STRING, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "listingState", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ListingState))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "listingState", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "listingState", p.ThriftName(), err); }
  return err
}

func (p *ListingData) WriteFieldListingState(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *ListingData) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isAvailable", thrift.BOOL, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "isAvailable", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsAvailable))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "isAvailable", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "isAvailable", p.ThriftName(), err); }
  return err
}

func (p *ListingData) WriteFieldIsAvailable(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *ListingData) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ShippingDetails != nil {
    err = oprot.WriteFieldBegin("shippingDetails", thrift.STRUCT, 7)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "shippingDetails", p.ThriftName(), err); }
    err = p.ShippingDetails.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ShippingDetails", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "shippingDetails", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingData) WriteFieldShippingDetails(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *ListingData) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Mrp != nil {
    err = oprot.WriteFieldBegin("mrp", thrift.STRUCT, 8)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "mrp", p.ThriftName(), err); }
    err = p.Mrp.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Price", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "mrp", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingData) WriteFieldMrp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *ListingData) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SellerSellingPrice != nil {
    err = oprot.WriteFieldBegin("sellerSellingPrice", thrift.STRUCT, 9)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "sellerSellingPrice", p.ThriftName(), err); }
    err = p.SellerSellingPrice.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Price", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "sellerSellingPrice", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingData) WriteFieldSellerSellingPrice(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField9(oprot)
}

func (p *ListingData) WriteField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.PricingAttributes != nil {
    err = oprot.WriteFieldBegin("pricingAttributes", thrift.MAP, 10)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "pricingAttributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.PricingAttributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter258 := range p.PricingAttributes.Iter() {
      Kiter259, Viter260 := Miter258.Key().(string), Miter258.Value().(*Price)
      err = oprot.WriteString(string(Kiter259))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter259", "", err); }
      err = Viter260.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Price", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "pricingAttributes", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingData) WriteFieldPricingAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField10(oprot)
}

func (p *ListingData) WriteField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ListingAttributes != nil {
    err = oprot.WriteFieldBegin("listingAttributes", thrift.MAP, 11)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "listingAttributes", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.ListingAttributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter261 := range p.ListingAttributes.Iter() {
      Kiter262, Viter263 := Miter261.Key().(string), Miter261.Value().(*Attribute)
      err = oprot.WriteString(string(Kiter262))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter262", "", err); }
      err = Viter263.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Attribute", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "listingAttributes", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingData) WriteFieldListingAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField11(oprot)
}

func (p *ListingData) WriteField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.TagDetails != nil {
    err = oprot.WriteFieldBegin("tagDetails", thrift.MAP, 12)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "tagDetails", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, p.TagDetails.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter264 := range p.TagDetails.Iter() {
      Kiter265, Viter266 := Miter264.Key().(string), Miter264.Value().(thrift.TList)
      err = oprot.WriteString(string(Kiter265))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter265", "", err); }
      err = oprot.WriteListBegin(thrift.STRUCT, Viter266.Len())
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
      for Iter267 := range Viter266.Iter() {
        Iter268 := Iter267.(*TagInfo)
        err = Iter268.Write(oprot)
        if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TagInfo", err); }
      }
      err = oprot.WriteListEnd()
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "tagDetails", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingData) WriteFieldTagDetails(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField12(oprot)
}

func (p *ListingData) TStructName() string {
  return "ListingData"
}

func (p *ListingData) ThriftName() string {
  return "ListingData"
}

func (p *ListingData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListingData(%+v)", *p)
}

func (p *ListingData) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ListingData)
  if !ok {
    return 0, false
  }
  if p.ListingId != data.ListingId {
    if p.ListingId < data.ListingId {
      return -1, true
    }
    return 1, true
  }
  if p.ProductId != data.ProductId {
    if p.ProductId < data.ProductId {
      return -1, true
    }
    return 1, true
  }
  if p.SellerId != data.SellerId {
    if p.SellerId < data.SellerId {
      return -1, true
    }
    return 1, true
  }
  if p.ListingStatus != data.ListingStatus {
    if p.ListingStatus < data.ListingStatus {
      return -1, true
    }
    return 1, true
  }
  if p.ListingState != data.ListingState {
    if p.ListingState < data.ListingState {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.IsAvailable, data.IsAvailable); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.ShippingDetails.CompareTo(data.ShippingDetails); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Mrp.CompareTo(data.Mrp); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SellerSellingPrice.CompareTo(data.SellerSellingPrice); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.PricingAttributes.CompareTo(data.PricingAttributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ListingAttributes.CompareTo(data.ListingAttributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.TagDetails.CompareTo(data.TagDetails); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ListingData) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ListingId
  case 2: return p.ProductId
  case 3: return p.SellerId
  case 4: return p.ListingStatus
  case 5: return p.ListingState
  case 6: return p.IsAvailable
  case 7: return p.ShippingDetails
  case 8: return p.Mrp
  case 9: return p.SellerSellingPrice
  case 10: return p.PricingAttributes
  case 11: return p.ListingAttributes
  case 12: return p.TagDetails
  }
  return nil
}

func (p *ListingData) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("listingId", thrift.STRING, 1),
    thrift.NewTField("productId", thrift.STRING, 2),
    thrift.NewTField("sellerId", thrift.STRING, 3),
    thrift.NewTField("listingStatus", thrift.STRING, 4),
    thrift.NewTField("listingState", thrift.STRING, 5),
    thrift.NewTField("isAvailable", thrift.BOOL, 6),
    thrift.NewTField("shippingDetails", thrift.STRUCT, 7),
    thrift.NewTField("mrp", thrift.STRUCT, 8),
    thrift.NewTField("sellerSellingPrice", thrift.STRUCT, 9),
    thrift.NewTField("pricingAttributes", thrift.MAP, 10),
    thrift.NewTField("listingAttributes", thrift.MAP, 11),
    thrift.NewTField("tagDetails", thrift.MAP, 12),
    })
}

/**
 * Attributes:
 *  - VariationID
 *  - ProductData
 */
type VariationDetail struct {
  thrift.TStruct
  VariationID string "variationID"; // 1
  ProductData *ProductData "productData"; // 2
}

func NewVariationDetail() *VariationDetail {
  output := &VariationDetail{
    TStruct:thrift.NewTStruct("VariationDetail", []thrift.TField{
    thrift.NewTField("variationID", thrift.STRING, 1),
    thrift.NewTField("productData", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *VariationDetail) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "variationID" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "productData" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *VariationDetail) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v269, err270 := iprot.ReadString()
  if err270 != nil { return thrift.NewTProtocolExceptionReadField(1, "variationID", p.ThriftName(), err270); }
  p.VariationID = v269
  return err
}

func (p *VariationDetail) ReadFieldVariationID(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *VariationDetail) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.ProductData = NewProductData()
  err273 := p.ProductData.Read(iprot)
  if err273 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ProductDataProductData", err273); }
  return err
}

func (p *VariationDetail) ReadFieldProductData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *VariationDetail) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("VariationDetail")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *VariationDetail) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("variationID", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "variationID", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.VariationID))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "variationID", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "variationID", p.ThriftName(), err); }
  return err
}

func (p *VariationDetail) WriteFieldVariationID(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *VariationDetail) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductData != nil {
    err = oprot.WriteFieldBegin("productData", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "productData", p.ThriftName(), err); }
    err = p.ProductData.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductData", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "productData", p.ThriftName(), err); }
  }
  return err
}

func (p *VariationDetail) WriteFieldProductData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *VariationDetail) TStructName() string {
  return "VariationDetail"
}

func (p *VariationDetail) ThriftName() string {
  return "VariationDetail"
}

func (p *VariationDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VariationDetail(%+v)", *p)
}

func (p *VariationDetail) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*VariationDetail)
  if !ok {
    return 0, false
  }
  if p.VariationID != data.VariationID {
    if p.VariationID < data.VariationID {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.ProductData.CompareTo(data.ProductData); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *VariationDetail) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.VariationID
  case 2: return p.ProductData
  }
  return nil
}

func (p *VariationDetail) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("variationID", thrift.STRING, 1),
    thrift.NewTField("productData", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - LiveExperimentName
 *  - VariationDetailList
 */
type LiveExperimentDetail struct {
  thrift.TStruct
  LiveExperimentName string "liveExperimentName"; // 1
  VariationDetailList thrift.TList "variationDetailList"; // 2
}

func NewLiveExperimentDetail() *LiveExperimentDetail {
  output := &LiveExperimentDetail{
    TStruct:thrift.NewTStruct("LiveExperimentDetail", []thrift.TField{
    thrift.NewTField("liveExperimentName", thrift.STRING, 1),
    thrift.NewTField("variationDetailList", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *LiveExperimentDetail) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "liveExperimentName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "variationDetailList" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *LiveExperimentDetail) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v274, err275 := iprot.ReadString()
  if err275 != nil { return thrift.NewTProtocolExceptionReadField(1, "liveExperimentName", p.ThriftName(), err275); }
  p.LiveExperimentName = v274
  return err
}

func (p *LiveExperimentDetail) ReadFieldLiveExperimentName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *LiveExperimentDetail) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype281, _size278, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.VariationDetailList", "", err)
  }
  p.VariationDetailList = thrift.NewTList(_etype281, _size278)
  for _i282:= 0; _i282 < _size278; _i282++ {
    _elem283 := NewVariationDetail()
    err286 := _elem283.Read(iprot)
    if err286 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem283VariationDetail", err286); }
    p.VariationDetailList.Push(_elem283)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *LiveExperimentDetail) ReadFieldVariationDetailList(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *LiveExperimentDetail) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("LiveExperimentDetail")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *LiveExperimentDetail) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("liveExperimentName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "liveExperimentName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.LiveExperimentName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "liveExperimentName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "liveExperimentName", p.ThriftName(), err); }
  return err
}

func (p *LiveExperimentDetail) WriteFieldLiveExperimentName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *LiveExperimentDetail) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.VariationDetailList != nil {
    err = oprot.WriteFieldBegin("variationDetailList", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "variationDetailList", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.VariationDetailList.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter287 := range p.VariationDetailList.Iter() {
      Iter288 := Iter287.(*VariationDetail)
      err = Iter288.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("VariationDetail", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "variationDetailList", p.ThriftName(), err); }
  }
  return err
}

func (p *LiveExperimentDetail) WriteFieldVariationDetailList(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *LiveExperimentDetail) TStructName() string {
  return "LiveExperimentDetail"
}

func (p *LiveExperimentDetail) ThriftName() string {
  return "LiveExperimentDetail"
}

func (p *LiveExperimentDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LiveExperimentDetail(%+v)", *p)
}

func (p *LiveExperimentDetail) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*LiveExperimentDetail)
  if !ok {
    return 0, false
  }
  if p.LiveExperimentName != data.LiveExperimentName {
    if p.LiveExperimentName < data.LiveExperimentName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.VariationDetailList.CompareTo(data.VariationDetailList); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *LiveExperimentDetail) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.LiveExperimentName
  case 2: return p.VariationDetailList
  }
  return nil
}

func (p *LiveExperimentDetail) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("liveExperimentName", thrift.STRING, 1),
    thrift.NewTField("variationDetailList", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - ProductData
 *  - Listings
 *  - LiveExperimentDetail
 */
type ProductDataWithListings struct {
  thrift.TStruct
  ProductData *ProductData "productData"; // 1
  Listings thrift.TMap "listings"; // 2
  LiveExperimentDetail *LiveExperimentDetail "liveExperimentDetail"; // 3
}

func NewProductDataWithListings() *ProductDataWithListings {
  output := &ProductDataWithListings{
    TStruct:thrift.NewTStruct("ProductDataWithListings", []thrift.TField{
    thrift.NewTField("productData", thrift.STRUCT, 1),
    thrift.NewTField("listings", thrift.MAP, 2),
    thrift.NewTField("liveExperimentDetail", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ProductDataWithListings) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productData" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "listings" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "liveExperimentDetail" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductDataWithListings) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.ProductData = NewProductData()
  err291 := p.ProductData.Read(iprot)
  if err291 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ProductDataProductData", err291); }
  return err
}

func (p *ProductDataWithListings) ReadFieldProductData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ProductDataWithListings) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype295, _vtype296, _size294, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Listings", "", err)
  }
  p.Listings = thrift.NewTMap(_ktype295, _vtype296, _size294)
  for _i298:= 0; _i298 < _size294; _i298++ {
    v301, err302 := iprot.ReadString()
    if err302 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key299", "", err302); }
    _key299 := ListingID(v301)
    _val300 := NewListingData()
    err305 := _val300.Read(iprot)
    if err305 != nil { return thrift.NewTProtocolExceptionReadStruct("_val300ListingData", err305); }
    p.Listings.Set(_key299, _val300)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ProductDataWithListings) ReadFieldListings(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ProductDataWithListings) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.LiveExperimentDetail = NewLiveExperimentDetail()
  err308 := p.LiveExperimentDetail.Read(iprot)
  if err308 != nil { return thrift.NewTProtocolExceptionReadStruct("p.LiveExperimentDetailLiveExperimentDetail", err308); }
  return err
}

func (p *ProductDataWithListings) ReadFieldLiveExperimentDetail(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ProductDataWithListings) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ProductDataWithListings")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductDataWithListings) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductData != nil {
    err = oprot.WriteFieldBegin("productData", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productData", p.ThriftName(), err); }
    err = p.ProductData.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductData", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productData", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductDataWithListings) WriteFieldProductData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ProductDataWithListings) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Listings != nil {
    err = oprot.WriteFieldBegin("listings", thrift.MAP, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "listings", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.Listings.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter309 := range p.Listings.Iter() {
      Kiter310, Viter311 := Miter309.Key().(ListingID), Miter309.Value().(*ListingData)
      err = oprot.WriteString(string(Kiter310))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter310", "", err); }
      err = Viter311.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ListingData", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "listings", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductDataWithListings) WriteFieldListings(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ProductDataWithListings) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.LiveExperimentDetail != nil {
    err = oprot.WriteFieldBegin("liveExperimentDetail", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "liveExperimentDetail", p.ThriftName(), err); }
    err = p.LiveExperimentDetail.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("LiveExperimentDetail", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "liveExperimentDetail", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductDataWithListings) WriteFieldLiveExperimentDetail(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ProductDataWithListings) TStructName() string {
  return "ProductDataWithListings"
}

func (p *ProductDataWithListings) ThriftName() string {
  return "ProductDataWithListings"
}

func (p *ProductDataWithListings) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductDataWithListings(%+v)", *p)
}

func (p *ProductDataWithListings) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ProductDataWithListings)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductData.CompareTo(data.ProductData); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Listings.CompareTo(data.Listings); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.LiveExperimentDetail.CompareTo(data.LiveExperimentDetail); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ProductDataWithListings) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductData
  case 2: return p.Listings
  case 3: return p.LiveExperimentDetail
  }
  return nil
}

func (p *ProductDataWithListings) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productData", thrift.STRUCT, 1),
    thrift.NewTField("listings", thrift.MAP, 2),
    thrift.NewTField("liveExperimentDetail", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - Listing
 *  - ProductData
 *  - LiveExperimentDetail
 */
type ListingWithProductData struct {
  thrift.TStruct
  Listing *ListingData "listing"; // 1
  ProductData *ProductData "productData"; // 2
  LiveExperimentDetail *LiveExperimentDetail "liveExperimentDetail"; // 3
}

func NewListingWithProductData() *ListingWithProductData {
  output := &ListingWithProductData{
    TStruct:thrift.NewTStruct("ListingWithProductData", []thrift.TField{
    thrift.NewTField("listing", thrift.STRUCT, 1),
    thrift.NewTField("productData", thrift.STRUCT, 2),
    thrift.NewTField("liveExperimentDetail", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ListingWithProductData) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "listing" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "productData" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "liveExperimentDetail" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ListingWithProductData) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Listing = NewListingData()
  err314 := p.Listing.Read(iprot)
  if err314 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ListingListingData", err314); }
  return err
}

func (p *ListingWithProductData) ReadFieldListing(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ListingWithProductData) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.ProductData = NewProductData()
  err317 := p.ProductData.Read(iprot)
  if err317 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ProductDataProductData", err317); }
  return err
}

func (p *ListingWithProductData) ReadFieldProductData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ListingWithProductData) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.LiveExperimentDetail = NewLiveExperimentDetail()
  err320 := p.LiveExperimentDetail.Read(iprot)
  if err320 != nil { return thrift.NewTProtocolExceptionReadStruct("p.LiveExperimentDetailLiveExperimentDetail", err320); }
  return err
}

func (p *ListingWithProductData) ReadFieldLiveExperimentDetail(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ListingWithProductData) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ListingWithProductData")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ListingWithProductData) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Listing != nil {
    err = oprot.WriteFieldBegin("listing", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "listing", p.ThriftName(), err); }
    err = p.Listing.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ListingData", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "listing", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingWithProductData) WriteFieldListing(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ListingWithProductData) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductData != nil {
    err = oprot.WriteFieldBegin("productData", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "productData", p.ThriftName(), err); }
    err = p.ProductData.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductData", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "productData", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingWithProductData) WriteFieldProductData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ListingWithProductData) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.LiveExperimentDetail != nil {
    err = oprot.WriteFieldBegin("liveExperimentDetail", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "liveExperimentDetail", p.ThriftName(), err); }
    err = p.LiveExperimentDetail.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("LiveExperimentDetail", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "liveExperimentDetail", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingWithProductData) WriteFieldLiveExperimentDetail(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ListingWithProductData) TStructName() string {
  return "ListingWithProductData"
}

func (p *ListingWithProductData) ThriftName() string {
  return "ListingWithProductData"
}

func (p *ListingWithProductData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListingWithProductData(%+v)", *p)
}

func (p *ListingWithProductData) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ListingWithProductData)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Listing.CompareTo(data.Listing); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ProductData.CompareTo(data.ProductData); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.LiveExperimentDetail.CompareTo(data.LiveExperimentDetail); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ListingWithProductData) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Listing
  case 2: return p.ProductData
  case 3: return p.LiveExperimentDetail
  }
  return nil
}

func (p *ListingWithProductData) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("listing", thrift.STRUCT, 1),
    thrift.NewTField("productData", thrift.STRUCT, 2),
    thrift.NewTField("liveExperimentDetail", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - ProductIds
 *  - ProductAttributes
 *  - ListingAttributes
 *  - ViewNames
 *  - IsRelationshipInfoRequired
 *  - IsStaticContentsRequired
 *  - IsCategorizationInfoRequired
 *  - IsContributorInfoRequired
 *  - BaseRequest
 *  - IsTagInfoRequired
 *  - SellerIds
 *  - IsABInfoRequest
 */
type ProductInfoRequest struct {
  thrift.TStruct
  ProductIds thrift.TList "productIds"; // 1
  ProductAttributes thrift.TList "productAttributes"; // 2
  ListingAttributes thrift.TList "listingAttributes"; // 3
  ViewNames thrift.TList "viewNames"; // 4
  IsRelationshipInfoRequired bool "isRelationshipInfoRequired"; // 5
  IsStaticContentsRequired bool "isStaticContentsRequired"; // 6
  IsCategorizationInfoRequired bool "isCategorizationInfoRequired"; // 7
  IsContributorInfoRequired bool "isContributorInfoRequired"; // 8
  BaseRequest *BaseRequest "baseRequest"; // 9
  IsTagInfoRequired bool "isTagInfoRequired"; // 10
  SellerIds thrift.TList "sellerIds"; // 11
  IsABInfoRequest bool "isABInfoRequest"; // 12
}

func NewProductInfoRequest() *ProductInfoRequest {
  output := &ProductInfoRequest{
    TStruct:thrift.NewTStruct("ProductInfoRequest", []thrift.TField{
    thrift.NewTField("productIds", thrift.LIST, 1),
    thrift.NewTField("productAttributes", thrift.LIST, 2),
    thrift.NewTField("listingAttributes", thrift.LIST, 3),
    thrift.NewTField("viewNames", thrift.LIST, 4),
    thrift.NewTField("isRelationshipInfoRequired", thrift.BOOL, 5),
    thrift.NewTField("isStaticContentsRequired", thrift.BOOL, 6),
    thrift.NewTField("isCategorizationInfoRequired", thrift.BOOL, 7),
    thrift.NewTField("isContributorInfoRequired", thrift.BOOL, 8),
    thrift.NewTField("baseRequest", thrift.STRUCT, 9),
    thrift.NewTField("isTagInfoRequired", thrift.BOOL, 10),
    thrift.NewTField("sellerIds", thrift.LIST, 11),
    thrift.NewTField("isABInfoRequest", thrift.BOOL, 12),
    }),
  }
  {
    output.IsRelationshipInfoRequired = true
    output.IsStaticContentsRequired = true
    output.IsCategorizationInfoRequired = true
    output.IsContributorInfoRequired = true
    output.IsTagInfoRequired = true
    output.IsABInfoRequest = false
  }
  return output
}

func (p *ProductInfoRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "productAttributes" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "listingAttributes" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "viewNames" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "isRelationshipInfoRequired" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "isStaticContentsRequired" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "isCategorizationInfoRequired" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "isContributorInfoRequired" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 9 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField9(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 10 || fieldName == "isTagInfoRequired" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField10(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 11 || fieldName == "sellerIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField11(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 12 || fieldName == "isABInfoRequest" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField12(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductInfoRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype326, _size323, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductIds", "", err)
  }
  p.ProductIds = thrift.NewTList(_etype326, _size323)
  for _i327:= 0; _i327 < _size323; _i327++ {
    v329, err330 := iprot.ReadString()
    if err330 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem328", "", err330); }
    _elem328 := v329
    p.ProductIds.Push(_elem328)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductInfoRequest) ReadFieldProductIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ProductInfoRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype336, _size333, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductAttributes", "", err)
  }
  p.ProductAttributes = thrift.NewTList(_etype336, _size333)
  for _i337:= 0; _i337 < _size333; _i337++ {
    v339, err340 := iprot.ReadString()
    if err340 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem338", "", err340); }
    _elem338 := v339
    p.ProductAttributes.Push(_elem338)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductInfoRequest) ReadFieldProductAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ProductInfoRequest) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype346, _size343, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ListingAttributes", "", err)
  }
  p.ListingAttributes = thrift.NewTList(_etype346, _size343)
  for _i347:= 0; _i347 < _size343; _i347++ {
    v349, err350 := iprot.ReadString()
    if err350 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem348", "", err350); }
    _elem348 := v349
    p.ListingAttributes.Push(_elem348)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductInfoRequest) ReadFieldListingAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ProductInfoRequest) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype356, _size353, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ViewNames", "", err)
  }
  p.ViewNames = thrift.NewTList(_etype356, _size353)
  for _i357:= 0; _i357 < _size353; _i357++ {
    v359, err360 := iprot.ReadString()
    if err360 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem358", "", err360); }
    _elem358 := v359
    p.ViewNames.Push(_elem358)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductInfoRequest) ReadFieldViewNames(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ProductInfoRequest) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v361, err362 := iprot.ReadBool()
  if err362 != nil { return thrift.NewTProtocolExceptionReadField(5, "isRelationshipInfoRequired", p.ThriftName(), err362); }
  p.IsRelationshipInfoRequired = v361
  return err
}

func (p *ProductInfoRequest) ReadFieldIsRelationshipInfoRequired(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *ProductInfoRequest) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v363, err364 := iprot.ReadBool()
  if err364 != nil { return thrift.NewTProtocolExceptionReadField(6, "isStaticContentsRequired", p.ThriftName(), err364); }
  p.IsStaticContentsRequired = v363
  return err
}

func (p *ProductInfoRequest) ReadFieldIsStaticContentsRequired(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *ProductInfoRequest) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v365, err366 := iprot.ReadBool()
  if err366 != nil { return thrift.NewTProtocolExceptionReadField(7, "isCategorizationInfoRequired", p.ThriftName(), err366); }
  p.IsCategorizationInfoRequired = v365
  return err
}

func (p *ProductInfoRequest) ReadFieldIsCategorizationInfoRequired(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *ProductInfoRequest) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v367, err368 := iprot.ReadBool()
  if err368 != nil { return thrift.NewTProtocolExceptionReadField(8, "isContributorInfoRequired", p.ThriftName(), err368); }
  p.IsContributorInfoRequired = v367
  return err
}

func (p *ProductInfoRequest) ReadFieldIsContributorInfoRequired(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *ProductInfoRequest) ReadField9(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err371 := p.BaseRequest.Read(iprot)
  if err371 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err371); }
  return err
}

func (p *ProductInfoRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField9(iprot)
}

func (p *ProductInfoRequest) ReadField10(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v372, err373 := iprot.ReadBool()
  if err373 != nil { return thrift.NewTProtocolExceptionReadField(10, "isTagInfoRequired", p.ThriftName(), err373); }
  p.IsTagInfoRequired = v372
  return err
}

func (p *ProductInfoRequest) ReadFieldIsTagInfoRequired(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField10(iprot)
}

func (p *ProductInfoRequest) ReadField11(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype379, _size376, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.SellerIds", "", err)
  }
  p.SellerIds = thrift.NewTList(_etype379, _size376)
  for _i380:= 0; _i380 < _size376; _i380++ {
    v382, err383 := iprot.ReadString()
    if err383 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem381", "", err383); }
    _elem381 := v382
    p.SellerIds.Push(_elem381)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductInfoRequest) ReadFieldSellerIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField11(iprot)
}

func (p *ProductInfoRequest) ReadField12(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v384, err385 := iprot.ReadBool()
  if err385 != nil { return thrift.NewTProtocolExceptionReadField(12, "isABInfoRequest", p.ThriftName(), err385); }
  p.IsABInfoRequest = v384
  return err
}

func (p *ProductInfoRequest) ReadFieldIsABInfoRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField12(iprot)
}

func (p *ProductInfoRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ProductInfoRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = p.WriteField9(oprot)
  if err != nil { return err }
  err = p.WriteField10(oprot)
  if err != nil { return err }
  err = p.WriteField11(oprot)
  if err != nil { return err }
  err = p.WriteField12(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductInfoRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductIds != nil {
    err = oprot.WriteFieldBegin("productIds", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ProductIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter386 := range p.ProductIds.Iter() {
      Iter387 := Iter386.(string)
      err = oprot.WriteString(string(Iter387))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter387", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductInfoRequest) WriteFieldProductIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ProductInfoRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductAttributes != nil {
    err = oprot.WriteFieldBegin("productAttributes", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "productAttributes", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ProductAttributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter388 := range p.ProductAttributes.Iter() {
      Iter389 := Iter388.(string)
      err = oprot.WriteString(string(Iter389))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter389", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "productAttributes", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductInfoRequest) WriteFieldProductAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ProductInfoRequest) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ListingAttributes != nil {
    err = oprot.WriteFieldBegin("listingAttributes", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "listingAttributes", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ListingAttributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter390 := range p.ListingAttributes.Iter() {
      Iter391 := Iter390.(string)
      err = oprot.WriteString(string(Iter391))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter391", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "listingAttributes", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductInfoRequest) WriteFieldListingAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ProductInfoRequest) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ViewNames != nil {
    err = oprot.WriteFieldBegin("viewNames", thrift.LIST, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "viewNames", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ViewNames.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter392 := range p.ViewNames.Iter() {
      Iter393 := Iter392.(string)
      err = oprot.WriteString(string(Iter393))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter393", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "viewNames", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductInfoRequest) WriteFieldViewNames(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ProductInfoRequest) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isRelationshipInfoRequired", thrift.BOOL, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "isRelationshipInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsRelationshipInfoRequired))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "isRelationshipInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "isRelationshipInfoRequired", p.ThriftName(), err); }
  return err
}

func (p *ProductInfoRequest) WriteFieldIsRelationshipInfoRequired(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *ProductInfoRequest) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isStaticContentsRequired", thrift.BOOL, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "isStaticContentsRequired", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsStaticContentsRequired))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "isStaticContentsRequired", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "isStaticContentsRequired", p.ThriftName(), err); }
  return err
}

func (p *ProductInfoRequest) WriteFieldIsStaticContentsRequired(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *ProductInfoRequest) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isCategorizationInfoRequired", thrift.BOOL, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "isCategorizationInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsCategorizationInfoRequired))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "isCategorizationInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "isCategorizationInfoRequired", p.ThriftName(), err); }
  return err
}

func (p *ProductInfoRequest) WriteFieldIsCategorizationInfoRequired(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *ProductInfoRequest) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isContributorInfoRequired", thrift.BOOL, 8)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "isContributorInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsContributorInfoRequired))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "isContributorInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "isContributorInfoRequired", p.ThriftName(), err); }
  return err
}

func (p *ProductInfoRequest) WriteFieldIsContributorInfoRequired(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *ProductInfoRequest) WriteField9(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 9)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(9, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductInfoRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField9(oprot)
}

func (p *ProductInfoRequest) WriteField10(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isTagInfoRequired", thrift.BOOL, 10)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "isTagInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsTagInfoRequired))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "isTagInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(10, "isTagInfoRequired", p.ThriftName(), err); }
  return err
}

func (p *ProductInfoRequest) WriteFieldIsTagInfoRequired(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField10(oprot)
}

func (p *ProductInfoRequest) WriteField11(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SellerIds != nil {
    err = oprot.WriteFieldBegin("sellerIds", thrift.LIST, 11)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "sellerIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.SellerIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter394 := range p.SellerIds.Iter() {
      Iter395 := Iter394.(string)
      err = oprot.WriteString(string(Iter395))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter395", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(11, "sellerIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductInfoRequest) WriteFieldSellerIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField11(oprot)
}

func (p *ProductInfoRequest) WriteField12(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isABInfoRequest", thrift.BOOL, 12)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "isABInfoRequest", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsABInfoRequest))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "isABInfoRequest", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(12, "isABInfoRequest", p.ThriftName(), err); }
  return err
}

func (p *ProductInfoRequest) WriteFieldIsABInfoRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField12(oprot)
}

func (p *ProductInfoRequest) TStructName() string {
  return "ProductInfoRequest"
}

func (p *ProductInfoRequest) ThriftName() string {
  return "ProductInfoRequest"
}

func (p *ProductInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductInfoRequest(%+v)", *p)
}

func (p *ProductInfoRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ProductInfoRequest)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductIds.CompareTo(data.ProductIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ProductAttributes.CompareTo(data.ProductAttributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ListingAttributes.CompareTo(data.ListingAttributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ViewNames.CompareTo(data.ViewNames); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.IsRelationshipInfoRequired, data.IsRelationshipInfoRequired); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.IsStaticContentsRequired, data.IsStaticContentsRequired); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.IsCategorizationInfoRequired, data.IsCategorizationInfoRequired); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.IsContributorInfoRequired, data.IsContributorInfoRequired); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.IsTagInfoRequired, data.IsTagInfoRequired); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.SellerIds.CompareTo(data.SellerIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.IsABInfoRequest, data.IsABInfoRequest); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *ProductInfoRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductIds
  case 2: return p.ProductAttributes
  case 3: return p.ListingAttributes
  case 4: return p.ViewNames
  case 5: return p.IsRelationshipInfoRequired
  case 6: return p.IsStaticContentsRequired
  case 7: return p.IsCategorizationInfoRequired
  case 8: return p.IsContributorInfoRequired
  case 9: return p.BaseRequest
  case 10: return p.IsTagInfoRequired
  case 11: return p.SellerIds
  case 12: return p.IsABInfoRequest
  }
  return nil
}

func (p *ProductInfoRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productIds", thrift.LIST, 1),
    thrift.NewTField("productAttributes", thrift.LIST, 2),
    thrift.NewTField("listingAttributes", thrift.LIST, 3),
    thrift.NewTField("viewNames", thrift.LIST, 4),
    thrift.NewTField("isRelationshipInfoRequired", thrift.BOOL, 5),
    thrift.NewTField("isStaticContentsRequired", thrift.BOOL, 6),
    thrift.NewTField("isCategorizationInfoRequired", thrift.BOOL, 7),
    thrift.NewTField("isContributorInfoRequired", thrift.BOOL, 8),
    thrift.NewTField("baseRequest", thrift.STRUCT, 9),
    thrift.NewTField("isTagInfoRequired", thrift.BOOL, 10),
    thrift.NewTField("sellerIds", thrift.LIST, 11),
    thrift.NewTField("isABInfoRequest", thrift.BOOL, 12),
    })
}

/**
 * Attributes:
 *  - ProductDataWithListings
 *  - InvalidProductIds
 *  - BaseResult
 */
type ProductListingsResult struct {
  thrift.TStruct
  ProductDataWithListings thrift.TMap "productDataWithListings"; // 1
  InvalidProductIds thrift.TList "invalidProductIds"; // 2
  BaseResult *BaseResult "baseResult"; // 3
}

func NewProductListingsResult() *ProductListingsResult {
  output := &ProductListingsResult{
    TStruct:thrift.NewTStruct("ProductListingsResult", []thrift.TField{
    thrift.NewTField("productDataWithListings", thrift.MAP, 1),
    thrift.NewTField("invalidProductIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ProductListingsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productDataWithListings" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "invalidProductIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductListingsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype399, _vtype400, _size398, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductDataWithListings", "", err)
  }
  p.ProductDataWithListings = thrift.NewTMap(_ktype399, _vtype400, _size398)
  for _i402:= 0; _i402 < _size398; _i402++ {
    v405, err406 := iprot.ReadString()
    if err406 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key403", "", err406); }
    _key403 := ProductID(v405)
    _val404 := NewProductDataWithListings()
    err409 := _val404.Read(iprot)
    if err409 != nil { return thrift.NewTProtocolExceptionReadStruct("_val404ProductDataWithListings", err409); }
    p.ProductDataWithListings.Set(_key403, _val404)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ProductListingsResult) ReadFieldProductDataWithListings(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ProductListingsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype415, _size412, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.InvalidProductIds", "", err)
  }
  p.InvalidProductIds = thrift.NewTList(_etype415, _size412)
  for _i416:= 0; _i416 < _size412; _i416++ {
    v418, err419 := iprot.ReadString()
    if err419 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem417", "", err419); }
    _elem417 := ProductID(v418)
    p.InvalidProductIds.Push(_elem417)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductListingsResult) ReadFieldInvalidProductIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ProductListingsResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err422 := p.BaseResult.Read(iprot)
  if err422 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err422); }
  return err
}

func (p *ProductListingsResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ProductListingsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ProductListingsResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductListingsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductDataWithListings != nil {
    err = oprot.WriteFieldBegin("productDataWithListings", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productDataWithListings", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.ProductDataWithListings.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter423 := range p.ProductDataWithListings.Iter() {
      Kiter424, Viter425 := Miter423.Key().(ProductID), Miter423.Value().(*ProductDataWithListings)
      err = oprot.WriteString(string(Kiter424))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter424", "", err); }
      err = Viter425.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductDataWithListings", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productDataWithListings", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductListingsResult) WriteFieldProductDataWithListings(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ProductListingsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.InvalidProductIds != nil {
    err = oprot.WriteFieldBegin("invalidProductIds", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "invalidProductIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.InvalidProductIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter426 := range p.InvalidProductIds.Iter() {
      Iter427 := Iter426.(ProductID)
      err = oprot.WriteString(string(Iter427))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter427", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "invalidProductIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductListingsResult) WriteFieldInvalidProductIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ProductListingsResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductListingsResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ProductListingsResult) TStructName() string {
  return "ProductListingsResult"
}

func (p *ProductListingsResult) ThriftName() string {
  return "ProductListingsResult"
}

func (p *ProductListingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductListingsResult(%+v)", *p)
}

func (p *ProductListingsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ProductListingsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductDataWithListings.CompareTo(data.ProductDataWithListings); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.InvalidProductIds.CompareTo(data.InvalidProductIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ProductListingsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductDataWithListings
  case 2: return p.InvalidProductIds
  case 3: return p.BaseResult
  }
  return nil
}

func (p *ProductListingsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productDataWithListings", thrift.MAP, 1),
    thrift.NewTField("invalidProductIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - ListingWithProductData
 *  - InvalidListingIds
 *  - BaseResult
 */
type ListingProductResult struct {
  thrift.TStruct
  ListingWithProductData thrift.TMap "listingWithProductData"; // 1
  InvalidListingIds thrift.TList "invalidListingIds"; // 2
  BaseResult *BaseResult "baseResult"; // 3
}

func NewListingProductResult() *ListingProductResult {
  output := &ListingProductResult{
    TStruct:thrift.NewTStruct("ListingProductResult", []thrift.TField{
    thrift.NewTField("listingWithProductData", thrift.MAP, 1),
    thrift.NewTField("invalidListingIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ListingProductResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "listingWithProductData" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "invalidListingIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ListingProductResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype431, _vtype432, _size430, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ListingWithProductData", "", err)
  }
  p.ListingWithProductData = thrift.NewTMap(_ktype431, _vtype432, _size430)
  for _i434:= 0; _i434 < _size430; _i434++ {
    v437, err438 := iprot.ReadString()
    if err438 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key435", "", err438); }
    _key435 := ListingID(v437)
    _val436 := NewListingWithProductData()
    err441 := _val436.Read(iprot)
    if err441 != nil { return thrift.NewTProtocolExceptionReadStruct("_val436ListingWithProductData", err441); }
    p.ListingWithProductData.Set(_key435, _val436)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ListingProductResult) ReadFieldListingWithProductData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ListingProductResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype447, _size444, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.InvalidListingIds", "", err)
  }
  p.InvalidListingIds = thrift.NewTList(_etype447, _size444)
  for _i448:= 0; _i448 < _size444; _i448++ {
    v450, err451 := iprot.ReadString()
    if err451 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem449", "", err451); }
    _elem449 := ListingID(v450)
    p.InvalidListingIds.Push(_elem449)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ListingProductResult) ReadFieldInvalidListingIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ListingProductResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err454 := p.BaseResult.Read(iprot)
  if err454 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err454); }
  return err
}

func (p *ListingProductResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ListingProductResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ListingProductResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ListingProductResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ListingWithProductData != nil {
    err = oprot.WriteFieldBegin("listingWithProductData", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "listingWithProductData", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.ListingWithProductData.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter455 := range p.ListingWithProductData.Iter() {
      Kiter456, Viter457 := Miter455.Key().(ListingID), Miter455.Value().(*ListingWithProductData)
      err = oprot.WriteString(string(Kiter456))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter456", "", err); }
      err = Viter457.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ListingWithProductData", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "listingWithProductData", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingProductResult) WriteFieldListingWithProductData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ListingProductResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.InvalidListingIds != nil {
    err = oprot.WriteFieldBegin("invalidListingIds", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "invalidListingIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.InvalidListingIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter458 := range p.InvalidListingIds.Iter() {
      Iter459 := Iter458.(ListingID)
      err = oprot.WriteString(string(Iter459))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter459", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "invalidListingIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingProductResult) WriteFieldInvalidListingIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ListingProductResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingProductResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ListingProductResult) TStructName() string {
  return "ListingProductResult"
}

func (p *ListingProductResult) ThriftName() string {
  return "ListingProductResult"
}

func (p *ListingProductResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListingProductResult(%+v)", *p)
}

func (p *ListingProductResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ListingProductResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ListingWithProductData.CompareTo(data.ListingWithProductData); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.InvalidListingIds.CompareTo(data.InvalidListingIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ListingProductResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ListingWithProductData
  case 2: return p.InvalidListingIds
  case 3: return p.BaseResult
  }
  return nil
}

func (p *ListingProductResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("listingWithProductData", thrift.MAP, 1),
    thrift.NewTField("invalidListingIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - ProductData
 *  - InvalidProductIds
 *  - BaseResult
 *  - LiveExperimentDetailForPIDs
 */
type ProductInfoResult struct {
  thrift.TStruct
  ProductData thrift.TMap "productData"; // 1
  InvalidProductIds thrift.TList "invalidProductIds"; // 2
  BaseResult *BaseResult "baseResult"; // 3
  LiveExperimentDetailForPIDs thrift.TMap "liveExperimentDetailForPIDs"; // 4
}

func NewProductInfoResult() *ProductInfoResult {
  output := &ProductInfoResult{
    TStruct:thrift.NewTStruct("ProductInfoResult", []thrift.TField{
    thrift.NewTField("productData", thrift.MAP, 1),
    thrift.NewTField("invalidProductIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    thrift.NewTField("liveExperimentDetailForPIDs", thrift.MAP, 4),
    }),
  }
  {
  }
  return output
}

func (p *ProductInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productData" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "invalidProductIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "liveExperimentDetailForPIDs" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductInfoResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype463, _vtype464, _size462, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductData", "", err)
  }
  p.ProductData = thrift.NewTMap(_ktype463, _vtype464, _size462)
  for _i466:= 0; _i466 < _size462; _i466++ {
    v469, err470 := iprot.ReadString()
    if err470 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key467", "", err470); }
    _key467 := ProductID(v469)
    _val468 := NewProductData()
    err473 := _val468.Read(iprot)
    if err473 != nil { return thrift.NewTProtocolExceptionReadStruct("_val468ProductData", err473); }
    p.ProductData.Set(_key467, _val468)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ProductInfoResult) ReadFieldProductData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ProductInfoResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype479, _size476, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.InvalidProductIds", "", err)
  }
  p.InvalidProductIds = thrift.NewTList(_etype479, _size476)
  for _i480:= 0; _i480 < _size476; _i480++ {
    v482, err483 := iprot.ReadString()
    if err483 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem481", "", err483); }
    _elem481 := ProductID(v482)
    p.InvalidProductIds.Push(_elem481)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductInfoResult) ReadFieldInvalidProductIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ProductInfoResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err486 := p.BaseResult.Read(iprot)
  if err486 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err486); }
  return err
}

func (p *ProductInfoResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ProductInfoResult) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype490, _vtype491, _size489, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.LiveExperimentDetailForPIDs", "", err)
  }
  p.LiveExperimentDetailForPIDs = thrift.NewTMap(_ktype490, _vtype491, _size489)
  for _i493:= 0; _i493 < _size489; _i493++ {
    v496, err497 := iprot.ReadString()
    if err497 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key494", "", err497); }
    _key494 := ProductID(v496)
    _val495 := NewLiveExperimentDetail()
    err500 := _val495.Read(iprot)
    if err500 != nil { return thrift.NewTProtocolExceptionReadStruct("_val495LiveExperimentDetail", err500); }
    p.LiveExperimentDetailForPIDs.Set(_key494, _val495)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ProductInfoResult) ReadFieldLiveExperimentDetailForPIDs(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ProductInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ProductInfoResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductInfoResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductData != nil {
    err = oprot.WriteFieldBegin("productData", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productData", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.ProductData.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter501 := range p.ProductData.Iter() {
      Kiter502, Viter503 := Miter501.Key().(ProductID), Miter501.Value().(*ProductData)
      err = oprot.WriteString(string(Kiter502))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter502", "", err); }
      err = Viter503.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductData", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productData", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductInfoResult) WriteFieldProductData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ProductInfoResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.InvalidProductIds != nil {
    err = oprot.WriteFieldBegin("invalidProductIds", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "invalidProductIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.InvalidProductIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter504 := range p.InvalidProductIds.Iter() {
      Iter505 := Iter504.(ProductID)
      err = oprot.WriteString(string(Iter505))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter505", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "invalidProductIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductInfoResult) WriteFieldInvalidProductIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ProductInfoResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductInfoResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ProductInfoResult) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.LiveExperimentDetailForPIDs != nil {
    err = oprot.WriteFieldBegin("liveExperimentDetailForPIDs", thrift.MAP, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "liveExperimentDetailForPIDs", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.LiveExperimentDetailForPIDs.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter506 := range p.LiveExperimentDetailForPIDs.Iter() {
      Kiter507, Viter508 := Miter506.Key().(ProductID), Miter506.Value().(*LiveExperimentDetail)
      err = oprot.WriteString(string(Kiter507))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter507", "", err); }
      err = Viter508.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("LiveExperimentDetail", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "liveExperimentDetailForPIDs", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductInfoResult) WriteFieldLiveExperimentDetailForPIDs(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ProductInfoResult) TStructName() string {
  return "ProductInfoResult"
}

func (p *ProductInfoResult) ThriftName() string {
  return "ProductInfoResult"
}

func (p *ProductInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductInfoResult(%+v)", *p)
}

func (p *ProductInfoResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ProductInfoResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductData.CompareTo(data.ProductData); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.InvalidProductIds.CompareTo(data.InvalidProductIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.LiveExperimentDetailForPIDs.CompareTo(data.LiveExperimentDetailForPIDs); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ProductInfoResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductData
  case 2: return p.InvalidProductIds
  case 3: return p.BaseResult
  case 4: return p.LiveExperimentDetailForPIDs
  }
  return nil
}

func (p *ProductInfoResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productData", thrift.MAP, 1),
    thrift.NewTField("invalidProductIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    thrift.NewTField("liveExperimentDetailForPIDs", thrift.MAP, 4),
    })
}

/**
 * Attributes:
 *  - ProductIds
 *  - ListingAttributes
 *  - BaseRequest
 *  - SellerIds
 *  - IsABInfoRequest
 */
type ListingRequest struct {
  thrift.TStruct
  ProductIds thrift.TList "productIds"; // 1
  ListingAttributes thrift.TList "listingAttributes"; // 2
  BaseRequest *BaseRequest "baseRequest"; // 3
  SellerIds thrift.TList "sellerIds"; // 4
  IsABInfoRequest bool "isABInfoRequest"; // 5
}

func NewListingRequest() *ListingRequest {
  output := &ListingRequest{
    TStruct:thrift.NewTStruct("ListingRequest", []thrift.TField{
    thrift.NewTField("productIds", thrift.LIST, 1),
    thrift.NewTField("listingAttributes", thrift.LIST, 2),
    thrift.NewTField("baseRequest", thrift.STRUCT, 3),
    thrift.NewTField("sellerIds", thrift.LIST, 4),
    thrift.NewTField("isABInfoRequest", thrift.BOOL, 5),
    }),
  }
  {
    output.IsABInfoRequest = false
  }
  return output
}

func (p *ListingRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "listingAttributes" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "sellerIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "isABInfoRequest" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ListingRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype514, _size511, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductIds", "", err)
  }
  p.ProductIds = thrift.NewTList(_etype514, _size511)
  for _i515:= 0; _i515 < _size511; _i515++ {
    v517, err518 := iprot.ReadString()
    if err518 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem516", "", err518); }
    _elem516 := v517
    p.ProductIds.Push(_elem516)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ListingRequest) ReadFieldProductIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ListingRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype524, _size521, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ListingAttributes", "", err)
  }
  p.ListingAttributes = thrift.NewTList(_etype524, _size521)
  for _i525:= 0; _i525 < _size521; _i525++ {
    v527, err528 := iprot.ReadString()
    if err528 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem526", "", err528); }
    _elem526 := v527
    p.ListingAttributes.Push(_elem526)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ListingRequest) ReadFieldListingAttributes(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ListingRequest) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err531 := p.BaseRequest.Read(iprot)
  if err531 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err531); }
  return err
}

func (p *ListingRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ListingRequest) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype537, _size534, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.SellerIds", "", err)
  }
  p.SellerIds = thrift.NewTList(_etype537, _size534)
  for _i538:= 0; _i538 < _size534; _i538++ {
    v540, err541 := iprot.ReadString()
    if err541 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem539", "", err541); }
    _elem539 := v540
    p.SellerIds.Push(_elem539)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ListingRequest) ReadFieldSellerIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ListingRequest) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v542, err543 := iprot.ReadBool()
  if err543 != nil { return thrift.NewTProtocolExceptionReadField(5, "isABInfoRequest", p.ThriftName(), err543); }
  p.IsABInfoRequest = v542
  return err
}

func (p *ListingRequest) ReadFieldIsABInfoRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *ListingRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ListingRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ListingRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductIds != nil {
    err = oprot.WriteFieldBegin("productIds", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ProductIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter544 := range p.ProductIds.Iter() {
      Iter545 := Iter544.(string)
      err = oprot.WriteString(string(Iter545))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter545", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingRequest) WriteFieldProductIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ListingRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ListingAttributes != nil {
    err = oprot.WriteFieldBegin("listingAttributes", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "listingAttributes", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ListingAttributes.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter546 := range p.ListingAttributes.Iter() {
      Iter547 := Iter546.(string)
      err = oprot.WriteString(string(Iter547))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter547", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "listingAttributes", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingRequest) WriteFieldListingAttributes(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ListingRequest) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ListingRequest) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SellerIds != nil {
    err = oprot.WriteFieldBegin("sellerIds", thrift.LIST, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "sellerIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.SellerIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter548 := range p.SellerIds.Iter() {
      Iter549 := Iter548.(string)
      err = oprot.WriteString(string(Iter549))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter549", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "sellerIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingRequest) WriteFieldSellerIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ListingRequest) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isABInfoRequest", thrift.BOOL, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "isABInfoRequest", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsABInfoRequest))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "isABInfoRequest", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "isABInfoRequest", p.ThriftName(), err); }
  return err
}

func (p *ListingRequest) WriteFieldIsABInfoRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *ListingRequest) TStructName() string {
  return "ListingRequest"
}

func (p *ListingRequest) ThriftName() string {
  return "ListingRequest"
}

func (p *ListingRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListingRequest(%+v)", *p)
}

func (p *ListingRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ListingRequest)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductIds.CompareTo(data.ProductIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ListingAttributes.CompareTo(data.ListingAttributes); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SellerIds.CompareTo(data.SellerIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.IsABInfoRequest, data.IsABInfoRequest); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *ListingRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductIds
  case 2: return p.ListingAttributes
  case 3: return p.BaseRequest
  case 4: return p.SellerIds
  case 5: return p.IsABInfoRequest
  }
  return nil
}

func (p *ListingRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productIds", thrift.LIST, 1),
    thrift.NewTField("listingAttributes", thrift.LIST, 2),
    thrift.NewTField("baseRequest", thrift.STRUCT, 3),
    thrift.NewTField("sellerIds", thrift.LIST, 4),
    thrift.NewTField("isABInfoRequest", thrift.BOOL, 5),
    })
}

/**
 * Attributes:
 *  - ListingId
 *  - IsCommonInfoRequired
 *  - BaseRequest
 *  - IsABInfoRequest
 */
type ListingIDRequest struct {
  thrift.TStruct
  ListingId thrift.TList "listingId"; // 1
  IsCommonInfoRequired bool "isCommonInfoRequired"; // 2
  BaseRequest *BaseRequest "baseRequest"; // 3
  IsABInfoRequest bool "isABInfoRequest"; // 4
}

func NewListingIDRequest() *ListingIDRequest {
  output := &ListingIDRequest{
    TStruct:thrift.NewTStruct("ListingIDRequest", []thrift.TField{
    thrift.NewTField("listingId", thrift.LIST, 1),
    thrift.NewTField("isCommonInfoRequired", thrift.BOOL, 2),
    thrift.NewTField("baseRequest", thrift.STRUCT, 3),
    thrift.NewTField("isABInfoRequest", thrift.BOOL, 4),
    }),
  }
  {
    output.IsCommonInfoRequired = false
    output.IsABInfoRequest = false
  }
  return output
}

func (p *ListingIDRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "listingId" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "isCommonInfoRequired" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "isABInfoRequest" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ListingIDRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype555, _size552, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ListingId", "", err)
  }
  p.ListingId = thrift.NewTList(_etype555, _size552)
  for _i556:= 0; _i556 < _size552; _i556++ {
    v558, err559 := iprot.ReadString()
    if err559 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem557", "", err559); }
    _elem557 := v558
    p.ListingId.Push(_elem557)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ListingIDRequest) ReadFieldListingId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ListingIDRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v560, err561 := iprot.ReadBool()
  if err561 != nil { return thrift.NewTProtocolExceptionReadField(2, "isCommonInfoRequired", p.ThriftName(), err561); }
  p.IsCommonInfoRequired = v560
  return err
}

func (p *ListingIDRequest) ReadFieldIsCommonInfoRequired(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ListingIDRequest) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err564 := p.BaseRequest.Read(iprot)
  if err564 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err564); }
  return err
}

func (p *ListingIDRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ListingIDRequest) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v565, err566 := iprot.ReadBool()
  if err566 != nil { return thrift.NewTProtocolExceptionReadField(4, "isABInfoRequest", p.ThriftName(), err566); }
  p.IsABInfoRequest = v565
  return err
}

func (p *ListingIDRequest) ReadFieldIsABInfoRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ListingIDRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ListingIDRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ListingIDRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ListingId != nil {
    err = oprot.WriteFieldBegin("listingId", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "listingId", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ListingId.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter567 := range p.ListingId.Iter() {
      Iter568 := Iter567.(string)
      err = oprot.WriteString(string(Iter568))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter568", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "listingId", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingIDRequest) WriteFieldListingId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ListingIDRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isCommonInfoRequired", thrift.BOOL, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "isCommonInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsCommonInfoRequired))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "isCommonInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "isCommonInfoRequired", p.ThriftName(), err); }
  return err
}

func (p *ListingIDRequest) WriteFieldIsCommonInfoRequired(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ListingIDRequest) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingIDRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ListingIDRequest) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isABInfoRequest", thrift.BOOL, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "isABInfoRequest", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsABInfoRequest))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "isABInfoRequest", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "isABInfoRequest", p.ThriftName(), err); }
  return err
}

func (p *ListingIDRequest) WriteFieldIsABInfoRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ListingIDRequest) TStructName() string {
  return "ListingIDRequest"
}

func (p *ListingIDRequest) ThriftName() string {
  return "ListingIDRequest"
}

func (p *ListingIDRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListingIDRequest(%+v)", *p)
}

func (p *ListingIDRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ListingIDRequest)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ListingId.CompareTo(data.ListingId); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.IsCommonInfoRequired, data.IsCommonInfoRequired); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.IsABInfoRequest, data.IsABInfoRequest); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *ListingIDRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ListingId
  case 2: return p.IsCommonInfoRequired
  case 3: return p.BaseRequest
  case 4: return p.IsABInfoRequest
  }
  return nil
}

func (p *ListingIDRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("listingId", thrift.LIST, 1),
    thrift.NewTField("isCommonInfoRequired", thrift.BOOL, 2),
    thrift.NewTField("baseRequest", thrift.STRUCT, 3),
    thrift.NewTField("isABInfoRequest", thrift.BOOL, 4),
    })
}

/**
 * Attributes:
 *  - Listing
 *  - InvalidProductIds
 *  - BaseResult
 *  - LiveExperimentDetailForPIDs
 */
type ListingResult struct {
  thrift.TStruct
  Listing thrift.TMap "listing"; // 1
  InvalidProductIds thrift.TList "invalidProductIds"; // 2
  BaseResult *BaseResult "baseResult"; // 3
  LiveExperimentDetailForPIDs thrift.TMap "liveExperimentDetailForPIDs"; // 4
}

func NewListingResult() *ListingResult {
  output := &ListingResult{
    TStruct:thrift.NewTStruct("ListingResult", []thrift.TField{
    thrift.NewTField("listing", thrift.MAP, 1),
    thrift.NewTField("invalidProductIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    thrift.NewTField("liveExperimentDetailForPIDs", thrift.MAP, 4),
    }),
  }
  {
  }
  return output
}

func (p *ListingResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "listing" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "invalidProductIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "liveExperimentDetailForPIDs" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ListingResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype572, _vtype573, _size571, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Listing", "", err)
  }
  p.Listing = thrift.NewTMap(_ktype572, _vtype573, _size571)
  for _i575:= 0; _i575 < _size571; _i575++ {
    v578, err579 := iprot.ReadString()
    if err579 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key576", "", err579); }
    _key576 := ProductID(v578)
    _etype585, _size582, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(-1, "_val577", "", err)
    }
    _val577 := thrift.NewTList(_etype585, _size582)
    for _i586:= 0; _i586 < _size582; _i586++ {
      _elem587 := NewListingData()
      err590 := _elem587.Read(iprot)
      if err590 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem587ListingData", err590); }
      _val577.Push(_elem587)
    }
    err = iprot.ReadListEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
    p.Listing.Set(_key576, _val577)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ListingResult) ReadFieldListing(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ListingResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype596, _size593, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.InvalidProductIds", "", err)
  }
  p.InvalidProductIds = thrift.NewTList(_etype596, _size593)
  for _i597:= 0; _i597 < _size593; _i597++ {
    v599, err600 := iprot.ReadString()
    if err600 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem598", "", err600); }
    _elem598 := ProductID(v599)
    p.InvalidProductIds.Push(_elem598)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ListingResult) ReadFieldInvalidProductIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ListingResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err603 := p.BaseResult.Read(iprot)
  if err603 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err603); }
  return err
}

func (p *ListingResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ListingResult) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype607, _vtype608, _size606, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.LiveExperimentDetailForPIDs", "", err)
  }
  p.LiveExperimentDetailForPIDs = thrift.NewTMap(_ktype607, _vtype608, _size606)
  for _i610:= 0; _i610 < _size606; _i610++ {
    v613, err614 := iprot.ReadString()
    if err614 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key611", "", err614); }
    _key611 := ProductID(v613)
    _val612 := NewLiveExperimentDetail()
    err617 := _val612.Read(iprot)
    if err617 != nil { return thrift.NewTProtocolExceptionReadStruct("_val612LiveExperimentDetail", err617); }
    p.LiveExperimentDetailForPIDs.Set(_key611, _val612)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ListingResult) ReadFieldLiveExperimentDetailForPIDs(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ListingResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ListingResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ListingResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Listing != nil {
    err = oprot.WriteFieldBegin("listing", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "listing", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, p.Listing.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter618 := range p.Listing.Iter() {
      Kiter619, Viter620 := Miter618.Key().(ProductID), Miter618.Value().(thrift.TList)
      err = oprot.WriteString(string(Kiter619))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter619", "", err); }
      err = oprot.WriteListBegin(thrift.STRUCT, Viter620.Len())
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
      for Iter621 := range Viter620.Iter() {
        Iter622 := Iter621.(*ListingData)
        err = Iter622.Write(oprot)
        if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ListingData", err); }
      }
      err = oprot.WriteListEnd()
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "listing", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingResult) WriteFieldListing(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ListingResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.InvalidProductIds != nil {
    err = oprot.WriteFieldBegin("invalidProductIds", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "invalidProductIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.InvalidProductIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter623 := range p.InvalidProductIds.Iter() {
      Iter624 := Iter623.(ProductID)
      err = oprot.WriteString(string(Iter624))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter624", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "invalidProductIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingResult) WriteFieldInvalidProductIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ListingResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ListingResult) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.LiveExperimentDetailForPIDs != nil {
    err = oprot.WriteFieldBegin("liveExperimentDetailForPIDs", thrift.MAP, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "liveExperimentDetailForPIDs", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.LiveExperimentDetailForPIDs.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter625 := range p.LiveExperimentDetailForPIDs.Iter() {
      Kiter626, Viter627 := Miter625.Key().(ProductID), Miter625.Value().(*LiveExperimentDetail)
      err = oprot.WriteString(string(Kiter626))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter626", "", err); }
      err = Viter627.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("LiveExperimentDetail", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "liveExperimentDetailForPIDs", p.ThriftName(), err); }
  }
  return err
}

func (p *ListingResult) WriteFieldLiveExperimentDetailForPIDs(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ListingResult) TStructName() string {
  return "ListingResult"
}

func (p *ListingResult) ThriftName() string {
  return "ListingResult"
}

func (p *ListingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListingResult(%+v)", *p)
}

func (p *ListingResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ListingResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Listing.CompareTo(data.Listing); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.InvalidProductIds.CompareTo(data.InvalidProductIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.LiveExperimentDetailForPIDs.CompareTo(data.LiveExperimentDetailForPIDs); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ListingResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Listing
  case 2: return p.InvalidProductIds
  case 3: return p.BaseResult
  case 4: return p.LiveExperimentDetailForPIDs
  }
  return nil
}

func (p *ListingResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("listing", thrift.MAP, 1),
    thrift.NewTField("invalidProductIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    thrift.NewTField("liveExperimentDetailForPIDs", thrift.MAP, 4),
    })
}

/**
 * Attributes:
 *  - ViewsAsJson
 */
type ViewsJson struct {
  thrift.TStruct
  ViewsAsJson thrift.TMap "viewsAsJson"; // 1
}

func NewViewsJson() *ViewsJson {
  output := &ViewsJson{
    TStruct:thrift.NewTStruct("ViewsJson", []thrift.TField{
    thrift.NewTField("viewsAsJson", thrift.MAP, 1),
    }),
  }
  {
  }
  return output
}

func (p *ViewsJson) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "viewsAsJson" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ViewsJson) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype631, _vtype632, _size630, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ViewsAsJson", "", err)
  }
  p.ViewsAsJson = thrift.NewTMap(_ktype631, _vtype632, _size630)
  for _i634:= 0; _i634 < _size630; _i634++ {
    v637, err638 := iprot.ReadString()
    if err638 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key635", "", err638); }
    _key635 := v637
    v639, err640 := iprot.ReadString()
    if err640 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val636", "", err640); }
    _val636 := v639
    p.ViewsAsJson.Set(_key635, _val636)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ViewsJson) ReadFieldViewsAsJson(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ViewsJson) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ViewsJson")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ViewsJson) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ViewsAsJson != nil {
    err = oprot.WriteFieldBegin("viewsAsJson", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "viewsAsJson", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.ViewsAsJson.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter641 := range p.ViewsAsJson.Iter() {
      Kiter642, Viter643 := Miter641.Key().(string), Miter641.Value().(string)
      err = oprot.WriteString(string(Kiter642))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter642", "", err); }
      err = oprot.WriteString(string(Viter643))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter643", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "viewsAsJson", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewsJson) WriteFieldViewsAsJson(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ViewsJson) TStructName() string {
  return "ViewsJson"
}

func (p *ViewsJson) ThriftName() string {
  return "ViewsJson"
}

func (p *ViewsJson) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ViewsJson(%+v)", *p)
}

func (p *ViewsJson) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ViewsJson)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ViewsAsJson.CompareTo(data.ViewsAsJson); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ViewsJson) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ViewsAsJson
  }
  return nil
}

func (p *ViewsJson) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("viewsAsJson", thrift.MAP, 1),
    })
}

/**
 * Attributes:
 *  - DefinitionAsJson
 */
type DefinitionJson struct {
  thrift.TStruct
  DefinitionAsJson thrift.TMap "definitionAsJson"; // 1
}

func NewDefinitionJson() *DefinitionJson {
  output := &DefinitionJson{
    TStruct:thrift.NewTStruct("DefinitionJson", []thrift.TField{
    thrift.NewTField("definitionAsJson", thrift.MAP, 1),
    }),
  }
  {
  }
  return output
}

func (p *DefinitionJson) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "definitionAsJson" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DefinitionJson) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype647, _vtype648, _size646, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.DefinitionAsJson", "", err)
  }
  p.DefinitionAsJson = thrift.NewTMap(_ktype647, _vtype648, _size646)
  for _i650:= 0; _i650 < _size646; _i650++ {
    v653, err654 := iprot.ReadString()
    if err654 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key651", "", err654); }
    _key651 := v653
    v655, err656 := iprot.ReadString()
    if err656 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val652", "", err656); }
    _val652 := v655
    p.DefinitionAsJson.Set(_key651, _val652)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *DefinitionJson) ReadFieldDefinitionAsJson(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DefinitionJson) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("DefinitionJson")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DefinitionJson) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.DefinitionAsJson != nil {
    err = oprot.WriteFieldBegin("definitionAsJson", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "definitionAsJson", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.DefinitionAsJson.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter657 := range p.DefinitionAsJson.Iter() {
      Kiter658, Viter659 := Miter657.Key().(string), Miter657.Value().(string)
      err = oprot.WriteString(string(Kiter658))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter658", "", err); }
      err = oprot.WriteString(string(Viter659))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter659", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "definitionAsJson", p.ThriftName(), err); }
  }
  return err
}

func (p *DefinitionJson) WriteFieldDefinitionAsJson(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DefinitionJson) TStructName() string {
  return "DefinitionJson"
}

func (p *DefinitionJson) ThriftName() string {
  return "DefinitionJson"
}

func (p *DefinitionJson) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DefinitionJson(%+v)", *p)
}

func (p *DefinitionJson) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DefinitionJson)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.DefinitionAsJson.CompareTo(data.DefinitionAsJson); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DefinitionJson) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DefinitionAsJson
  }
  return nil
}

func (p *DefinitionJson) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("definitionAsJson", thrift.MAP, 1),
    })
}

/**
 * Attributes:
 *  - ProductIds
 *  - ViewNames
 *  - BaseRequest
 */
type ViewRequest struct {
  thrift.TStruct
  ProductIds thrift.TList "productIds"; // 1
  ViewNames thrift.TList "viewNames"; // 2
  BaseRequest *BaseRequest "baseRequest"; // 3
}

func NewViewRequest() *ViewRequest {
  output := &ViewRequest{
    TStruct:thrift.NewTStruct("ViewRequest", []thrift.TField{
    thrift.NewTField("productIds", thrift.LIST, 1),
    thrift.NewTField("viewNames", thrift.LIST, 2),
    thrift.NewTField("baseRequest", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ViewRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "viewNames" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ViewRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype665, _size662, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductIds", "", err)
  }
  p.ProductIds = thrift.NewTList(_etype665, _size662)
  for _i666:= 0; _i666 < _size662; _i666++ {
    v668, err669 := iprot.ReadString()
    if err669 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem667", "", err669); }
    _elem667 := v668
    p.ProductIds.Push(_elem667)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ViewRequest) ReadFieldProductIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ViewRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype675, _size672, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ViewNames", "", err)
  }
  p.ViewNames = thrift.NewTList(_etype675, _size672)
  for _i676:= 0; _i676 < _size672; _i676++ {
    v678, err679 := iprot.ReadString()
    if err679 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem677", "", err679); }
    _elem677 := v678
    p.ViewNames.Push(_elem677)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ViewRequest) ReadFieldViewNames(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ViewRequest) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err682 := p.BaseRequest.Read(iprot)
  if err682 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err682); }
  return err
}

func (p *ViewRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ViewRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ViewRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ViewRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductIds != nil {
    err = oprot.WriteFieldBegin("productIds", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ProductIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter683 := range p.ProductIds.Iter() {
      Iter684 := Iter683.(string)
      err = oprot.WriteString(string(Iter684))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter684", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewRequest) WriteFieldProductIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ViewRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ViewNames != nil {
    err = oprot.WriteFieldBegin("viewNames", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "viewNames", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ViewNames.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter685 := range p.ViewNames.Iter() {
      Iter686 := Iter685.(string)
      err = oprot.WriteString(string(Iter686))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter686", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "viewNames", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewRequest) WriteFieldViewNames(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ViewRequest) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ViewRequest) TStructName() string {
  return "ViewRequest"
}

func (p *ViewRequest) ThriftName() string {
  return "ViewRequest"
}

func (p *ViewRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ViewRequest(%+v)", *p)
}

func (p *ViewRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ViewRequest)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductIds.CompareTo(data.ProductIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ViewNames.CompareTo(data.ViewNames); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ViewRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductIds
  case 2: return p.ViewNames
  case 3: return p.BaseRequest
  }
  return nil
}

func (p *ViewRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productIds", thrift.LIST, 1),
    thrift.NewTField("viewNames", thrift.LIST, 2),
    thrift.NewTField("baseRequest", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - ProductViewMap
 *  - InvalidProductIds
 *  - BaseResult
 */
type ViewResult struct {
  thrift.TStruct
  ProductViewMap thrift.TMap "productViewMap"; // 1
  InvalidProductIds thrift.TList "invalidProductIds"; // 2
  BaseResult *BaseResult "baseResult"; // 3
}

func NewViewResult() *ViewResult {
  output := &ViewResult{
    TStruct:thrift.NewTStruct("ViewResult", []thrift.TField{
    thrift.NewTField("productViewMap", thrift.MAP, 1),
    thrift.NewTField("invalidProductIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ViewResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productViewMap" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "invalidProductIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ViewResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype690, _vtype691, _size689, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductViewMap", "", err)
  }
  p.ProductViewMap = thrift.NewTMap(_ktype690, _vtype691, _size689)
  for _i693:= 0; _i693 < _size689; _i693++ {
    v696, err697 := iprot.ReadString()
    if err697 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key694", "", err697); }
    _key694 := ProductID(v696)
    _val695 := NewViewsJson()
    err700 := _val695.Read(iprot)
    if err700 != nil { return thrift.NewTProtocolExceptionReadStruct("_val695ViewsJson", err700); }
    p.ProductViewMap.Set(_key694, _val695)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ViewResult) ReadFieldProductViewMap(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ViewResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype706, _size703, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.InvalidProductIds", "", err)
  }
  p.InvalidProductIds = thrift.NewTList(_etype706, _size703)
  for _i707:= 0; _i707 < _size703; _i707++ {
    v709, err710 := iprot.ReadString()
    if err710 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem708", "", err710); }
    _elem708 := ProductID(v709)
    p.InvalidProductIds.Push(_elem708)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ViewResult) ReadFieldInvalidProductIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ViewResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err713 := p.BaseResult.Read(iprot)
  if err713 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err713); }
  return err
}

func (p *ViewResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ViewResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ViewResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ViewResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductViewMap != nil {
    err = oprot.WriteFieldBegin("productViewMap", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productViewMap", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.ProductViewMap.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter714 := range p.ProductViewMap.Iter() {
      Kiter715, Viter716 := Miter714.Key().(ProductID), Miter714.Value().(*ViewsJson)
      err = oprot.WriteString(string(Kiter715))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter715", "", err); }
      err = Viter716.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ViewsJson", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productViewMap", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewResult) WriteFieldProductViewMap(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ViewResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.InvalidProductIds != nil {
    err = oprot.WriteFieldBegin("invalidProductIds", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "invalidProductIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.InvalidProductIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter717 := range p.InvalidProductIds.Iter() {
      Iter718 := Iter717.(ProductID)
      err = oprot.WriteString(string(Iter718))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter718", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "invalidProductIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewResult) WriteFieldInvalidProductIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ViewResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ViewResult) TStructName() string {
  return "ViewResult"
}

func (p *ViewResult) ThriftName() string {
  return "ViewResult"
}

func (p *ViewResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ViewResult(%+v)", *p)
}

func (p *ViewResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ViewResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductViewMap.CompareTo(data.ProductViewMap); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.InvalidProductIds.CompareTo(data.InvalidProductIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ViewResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductViewMap
  case 2: return p.InvalidProductIds
  case 3: return p.BaseResult
  }
  return nil
}

func (p *ViewResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productViewMap", thrift.MAP, 1),
    thrift.NewTField("invalidProductIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - Verticals
 *  - ViewNames
 *  - BaseRequest
 */
type ViewDefinitionRequest struct {
  thrift.TStruct
  Verticals thrift.TList "verticals"; // 1
  ViewNames thrift.TList "viewNames"; // 2
  BaseRequest *BaseRequest "baseRequest"; // 3
}

func NewViewDefinitionRequest() *ViewDefinitionRequest {
  output := &ViewDefinitionRequest{
    TStruct:thrift.NewTStruct("ViewDefinitionRequest", []thrift.TField{
    thrift.NewTField("verticals", thrift.LIST, 1),
    thrift.NewTField("viewNames", thrift.LIST, 2),
    thrift.NewTField("baseRequest", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ViewDefinitionRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "verticals" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "viewNames" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ViewDefinitionRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype724, _size721, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Verticals", "", err)
  }
  p.Verticals = thrift.NewTList(_etype724, _size721)
  for _i725:= 0; _i725 < _size721; _i725++ {
    v727, err728 := iprot.ReadString()
    if err728 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem726", "", err728); }
    _elem726 := v727
    p.Verticals.Push(_elem726)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ViewDefinitionRequest) ReadFieldVerticals(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ViewDefinitionRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype734, _size731, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ViewNames", "", err)
  }
  p.ViewNames = thrift.NewTList(_etype734, _size731)
  for _i735:= 0; _i735 < _size731; _i735++ {
    v737, err738 := iprot.ReadString()
    if err738 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem736", "", err738); }
    _elem736 := v737
    p.ViewNames.Push(_elem736)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ViewDefinitionRequest) ReadFieldViewNames(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ViewDefinitionRequest) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err741 := p.BaseRequest.Read(iprot)
  if err741 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err741); }
  return err
}

func (p *ViewDefinitionRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ViewDefinitionRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ViewDefinitionRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ViewDefinitionRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Verticals != nil {
    err = oprot.WriteFieldBegin("verticals", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticals", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Verticals.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter742 := range p.Verticals.Iter() {
      Iter743 := Iter742.(string)
      err = oprot.WriteString(string(Iter743))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter743", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticals", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewDefinitionRequest) WriteFieldVerticals(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ViewDefinitionRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ViewNames != nil {
    err = oprot.WriteFieldBegin("viewNames", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "viewNames", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ViewNames.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter744 := range p.ViewNames.Iter() {
      Iter745 := Iter744.(string)
      err = oprot.WriteString(string(Iter745))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter745", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "viewNames", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewDefinitionRequest) WriteFieldViewNames(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ViewDefinitionRequest) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewDefinitionRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ViewDefinitionRequest) TStructName() string {
  return "ViewDefinitionRequest"
}

func (p *ViewDefinitionRequest) ThriftName() string {
  return "ViewDefinitionRequest"
}

func (p *ViewDefinitionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ViewDefinitionRequest(%+v)", *p)
}

func (p *ViewDefinitionRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ViewDefinitionRequest)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Verticals.CompareTo(data.Verticals); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ViewNames.CompareTo(data.ViewNames); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ViewDefinitionRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Verticals
  case 2: return p.ViewNames
  case 3: return p.BaseRequest
  }
  return nil
}

func (p *ViewDefinitionRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("verticals", thrift.LIST, 1),
    thrift.NewTField("viewNames", thrift.LIST, 2),
    thrift.NewTField("baseRequest", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - ViewDefinitionMap
 *  - InvalidVerticals
 *  - BaseResult
 */
type ViewDefinitionResult struct {
  thrift.TStruct
  ViewDefinitionMap thrift.TMap "viewDefinitionMap"; // 1
  InvalidVerticals thrift.TList "invalidVerticals"; // 2
  BaseResult *BaseResult "baseResult"; // 3
}

func NewViewDefinitionResult() *ViewDefinitionResult {
  output := &ViewDefinitionResult{
    TStruct:thrift.NewTStruct("ViewDefinitionResult", []thrift.TField{
    thrift.NewTField("viewDefinitionMap", thrift.MAP, 1),
    thrift.NewTField("invalidVerticals", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ViewDefinitionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "viewDefinitionMap" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "invalidVerticals" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ViewDefinitionResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype749, _vtype750, _size748, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ViewDefinitionMap", "", err)
  }
  p.ViewDefinitionMap = thrift.NewTMap(_ktype749, _vtype750, _size748)
  for _i752:= 0; _i752 < _size748; _i752++ {
    v755, err756 := iprot.ReadString()
    if err756 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key753", "", err756); }
    _key753 := v755
    _val754 := NewDefinitionJson()
    err759 := _val754.Read(iprot)
    if err759 != nil { return thrift.NewTProtocolExceptionReadStruct("_val754DefinitionJson", err759); }
    p.ViewDefinitionMap.Set(_key753, _val754)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ViewDefinitionResult) ReadFieldViewDefinitionMap(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ViewDefinitionResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype765, _size762, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.InvalidVerticals", "", err)
  }
  p.InvalidVerticals = thrift.NewTList(_etype765, _size762)
  for _i766:= 0; _i766 < _size762; _i766++ {
    v768, err769 := iprot.ReadString()
    if err769 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem767", "", err769); }
    _elem767 := v768
    p.InvalidVerticals.Push(_elem767)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ViewDefinitionResult) ReadFieldInvalidVerticals(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ViewDefinitionResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err772 := p.BaseResult.Read(iprot)
  if err772 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err772); }
  return err
}

func (p *ViewDefinitionResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ViewDefinitionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ViewDefinitionResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ViewDefinitionResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ViewDefinitionMap != nil {
    err = oprot.WriteFieldBegin("viewDefinitionMap", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "viewDefinitionMap", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.ViewDefinitionMap.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter773 := range p.ViewDefinitionMap.Iter() {
      Kiter774, Viter775 := Miter773.Key().(string), Miter773.Value().(*DefinitionJson)
      err = oprot.WriteString(string(Kiter774))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter774", "", err); }
      err = Viter775.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("DefinitionJson", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "viewDefinitionMap", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewDefinitionResult) WriteFieldViewDefinitionMap(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ViewDefinitionResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.InvalidVerticals != nil {
    err = oprot.WriteFieldBegin("invalidVerticals", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "invalidVerticals", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.InvalidVerticals.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter776 := range p.InvalidVerticals.Iter() {
      Iter777 := Iter776.(string)
      err = oprot.WriteString(string(Iter777))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter777", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "invalidVerticals", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewDefinitionResult) WriteFieldInvalidVerticals(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ViewDefinitionResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *ViewDefinitionResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ViewDefinitionResult) TStructName() string {
  return "ViewDefinitionResult"
}

func (p *ViewDefinitionResult) ThriftName() string {
  return "ViewDefinitionResult"
}

func (p *ViewDefinitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ViewDefinitionResult(%+v)", *p)
}

func (p *ViewDefinitionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ViewDefinitionResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ViewDefinitionMap.CompareTo(data.ViewDefinitionMap); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.InvalidVerticals.CompareTo(data.InvalidVerticals); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ViewDefinitionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ViewDefinitionMap
  case 2: return p.InvalidVerticals
  case 3: return p.BaseResult
  }
  return nil
}

func (p *ViewDefinitionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("viewDefinitionMap", thrift.MAP, 1),
    thrift.NewTField("invalidVerticals", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - Ids
 *  - BaseRequest
 */
type ContributorInfoRequest struct {
  thrift.TStruct
  Ids thrift.TList "ids"; // 1
  BaseRequest *BaseRequest "baseRequest"; // 2
}

func NewContributorInfoRequest() *ContributorInfoRequest {
  output := &ContributorInfoRequest{
    TStruct:thrift.NewTStruct("ContributorInfoRequest", []thrift.TField{
    thrift.NewTField("ids", thrift.LIST, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *ContributorInfoRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "ids" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ContributorInfoRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype783, _size780, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Ids", "", err)
  }
  p.Ids = thrift.NewTList(_etype783, _size780)
  for _i784:= 0; _i784 < _size780; _i784++ {
    v786, err787 := iprot.ReadString()
    if err787 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem785", "", err787); }
    _elem785 := v786
    p.Ids.Push(_elem785)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ContributorInfoRequest) ReadFieldIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ContributorInfoRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err790 := p.BaseRequest.Read(iprot)
  if err790 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err790); }
  return err
}

func (p *ContributorInfoRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ContributorInfoRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ContributorInfoRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ContributorInfoRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Ids != nil {
    err = oprot.WriteFieldBegin("ids", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ids", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Ids.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter791 := range p.Ids.Iter() {
      Iter792 := Iter791.(string)
      err = oprot.WriteString(string(Iter792))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter792", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "ids", p.ThriftName(), err); }
  }
  return err
}

func (p *ContributorInfoRequest) WriteFieldIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ContributorInfoRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *ContributorInfoRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ContributorInfoRequest) TStructName() string {
  return "ContributorInfoRequest"
}

func (p *ContributorInfoRequest) ThriftName() string {
  return "ContributorInfoRequest"
}

func (p *ContributorInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContributorInfoRequest(%+v)", *p)
}

func (p *ContributorInfoRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ContributorInfoRequest)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Ids.CompareTo(data.Ids); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ContributorInfoRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Ids
  case 2: return p.BaseRequest
  }
  return nil
}

func (p *ContributorInfoRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("ids", thrift.LIST, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - IdToContributorMap
 *  - UnavailableIds
 *  - BaseResult
 */
type ContributorInfoResult struct {
  thrift.TStruct
  IdToContributorMap thrift.TMap "idToContributorMap"; // 1
  UnavailableIds thrift.TList "unavailableIds"; // 2
  BaseResult *BaseResult "baseResult"; // 3
}

func NewContributorInfoResult() *ContributorInfoResult {
  output := &ContributorInfoResult{
    TStruct:thrift.NewTStruct("ContributorInfoResult", []thrift.TField{
    thrift.NewTField("idToContributorMap", thrift.MAP, 1),
    thrift.NewTField("unavailableIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ContributorInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "idToContributorMap" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "unavailableIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ContributorInfoResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype796, _vtype797, _size795, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.IdToContributorMap", "", err)
  }
  p.IdToContributorMap = thrift.NewTMap(_ktype796, _vtype797, _size795)
  for _i799:= 0; _i799 < _size795; _i799++ {
    v802, err803 := iprot.ReadString()
    if err803 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key800", "", err803); }
    _key800 := v802
    _val801 := NewCms.ttypes.Contributor()
    err806 := _val801.Read(iprot)
    if err806 != nil { return thrift.NewTProtocolExceptionReadStruct("_val801Contributor", err806); }
    p.IdToContributorMap.Set(_key800, _val801)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ContributorInfoResult) ReadFieldIdToContributorMap(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ContributorInfoResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype812, _size809, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.UnavailableIds", "", err)
  }
  p.UnavailableIds = thrift.NewTList(_etype812, _size809)
  for _i813:= 0; _i813 < _size809; _i813++ {
    v815, err816 := iprot.ReadString()
    if err816 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem814", "", err816); }
    _elem814 := v815
    p.UnavailableIds.Push(_elem814)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ContributorInfoResult) ReadFieldUnavailableIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ContributorInfoResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err819 := p.BaseResult.Read(iprot)
  if err819 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err819); }
  return err
}

func (p *ContributorInfoResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ContributorInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ContributorInfoResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ContributorInfoResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.IdToContributorMap != nil {
    err = oprot.WriteFieldBegin("idToContributorMap", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "idToContributorMap", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.IdToContributorMap.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter820 := range p.IdToContributorMap.Iter() {
      Kiter821, Viter822 := Miter820.Key().(string), Miter820.Value().(*Contributor)
      err = oprot.WriteString(string(Kiter821))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter821", "", err); }
      err = Viter822.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Contributor", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "idToContributorMap", p.ThriftName(), err); }
  }
  return err
}

func (p *ContributorInfoResult) WriteFieldIdToContributorMap(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ContributorInfoResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.UnavailableIds != nil {
    err = oprot.WriteFieldBegin("unavailableIds", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "unavailableIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.UnavailableIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter823 := range p.UnavailableIds.Iter() {
      Iter824 := Iter823.(string)
      err = oprot.WriteString(string(Iter824))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter824", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "unavailableIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ContributorInfoResult) WriteFieldUnavailableIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ContributorInfoResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *ContributorInfoResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ContributorInfoResult) TStructName() string {
  return "ContributorInfoResult"
}

func (p *ContributorInfoResult) ThriftName() string {
  return "ContributorInfoResult"
}

func (p *ContributorInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContributorInfoResult(%+v)", *p)
}

func (p *ContributorInfoResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ContributorInfoResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.IdToContributorMap.CompareTo(data.IdToContributorMap); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.UnavailableIds.CompareTo(data.UnavailableIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ContributorInfoResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.IdToContributorMap
  case 2: return p.UnavailableIds
  case 3: return p.BaseResult
  }
  return nil
}

func (p *ContributorInfoResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("idToContributorMap", thrift.MAP, 1),
    thrift.NewTField("unavailableIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - ItemIDs
 *  - BaseRequest
 */
type ItemsRequest struct {
  thrift.TStruct
  ItemIDs thrift.TList "itemIDs"; // 1
  BaseRequest *BaseRequest "baseRequest"; // 2
}

func NewItemsRequest() *ItemsRequest {
  output := &ItemsRequest{
    TStruct:thrift.NewTStruct("ItemsRequest", []thrift.TField{
    thrift.NewTField("itemIDs", thrift.LIST, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *ItemsRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "itemIDs" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemsRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype830, _size827, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ItemIDs", "", err)
  }
  p.ItemIDs = thrift.NewTList(_etype830, _size827)
  for _i831:= 0; _i831 < _size827; _i831++ {
    v833, err834 := iprot.ReadString()
    if err834 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem832", "", err834); }
    _elem832 := ItemID(v833)
    p.ItemIDs.Push(_elem832)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ItemsRequest) ReadFieldItemIDs(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ItemsRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err837 := p.BaseRequest.Read(iprot)
  if err837 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err837); }
  return err
}

func (p *ItemsRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ItemsRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ItemsRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemsRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ItemIDs != nil {
    err = oprot.WriteFieldBegin("itemIDs", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemIDs", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ItemIDs.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter838 := range p.ItemIDs.Iter() {
      Iter839 := Iter838.(ItemID)
      err = oprot.WriteString(string(Iter839))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter839", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemIDs", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemsRequest) WriteFieldItemIDs(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ItemsRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemsRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ItemsRequest) TStructName() string {
  return "ItemsRequest"
}

func (p *ItemsRequest) ThriftName() string {
  return "ItemsRequest"
}

func (p *ItemsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemsRequest(%+v)", *p)
}

func (p *ItemsRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ItemsRequest)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ItemIDs.CompareTo(data.ItemIDs); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ItemsRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ItemIDs
  case 2: return p.BaseRequest
  }
  return nil
}

func (p *ItemsRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("itemIDs", thrift.LIST, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - ItemsMap
 *  - UnavailableItemIds
 *  - BaseResult
 */
type ItemsResult struct {
  thrift.TStruct
  ItemsMap thrift.TMap "itemsMap"; // 1
  UnavailableItemIds thrift.TList "unavailableItemIds"; // 2
  BaseResult *BaseResult "baseResult"; // 3
}

func NewItemsResult() *ItemsResult {
  output := &ItemsResult{
    TStruct:thrift.NewTStruct("ItemsResult", []thrift.TField{
    thrift.NewTField("itemsMap", thrift.MAP, 1),
    thrift.NewTField("unavailableItemIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ItemsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "itemsMap" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "unavailableItemIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype843, _vtype844, _size842, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ItemsMap", "", err)
  }
  p.ItemsMap = thrift.NewTMap(_ktype843, _vtype844, _size842)
  for _i846:= 0; _i846 < _size842; _i846++ {
    v849, err850 := iprot.ReadString()
    if err850 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key847", "", err850); }
    _key847 := ItemID(v849)
    _etype856, _size853, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(-1, "_val848", "", err)
    }
    _val848 := thrift.NewTList(_etype856, _size853)
    for _i857:= 0; _i857 < _size853; _i857++ {
      v859, err860 := iprot.ReadString()
      if err860 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem858", "", err860); }
      _elem858 := v859
      _val848.Push(_elem858)
    }
    err = iprot.ReadListEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
    p.ItemsMap.Set(_key847, _val848)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ItemsResult) ReadFieldItemsMap(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ItemsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype866, _size863, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.UnavailableItemIds", "", err)
  }
  p.UnavailableItemIds = thrift.NewTList(_etype866, _size863)
  for _i867:= 0; _i867 < _size863; _i867++ {
    v869, err870 := iprot.ReadString()
    if err870 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem868", "", err870); }
    _elem868 := ItemID(v869)
    p.UnavailableItemIds.Push(_elem868)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ItemsResult) ReadFieldUnavailableItemIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ItemsResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err873 := p.BaseResult.Read(iprot)
  if err873 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err873); }
  return err
}

func (p *ItemsResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ItemsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ItemsResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ItemsMap != nil {
    err = oprot.WriteFieldBegin("itemsMap", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemsMap", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, p.ItemsMap.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter874 := range p.ItemsMap.Iter() {
      Kiter875, Viter876 := Miter874.Key().(ItemID), Miter874.Value().(thrift.TList)
      err = oprot.WriteString(string(Kiter875))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter875", "", err); }
      err = oprot.WriteListBegin(thrift.STRING, Viter876.Len())
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
      for Iter877 := range Viter876.Iter() {
        Iter878 := Iter877.(string)
        err = oprot.WriteString(string(Iter878))
        if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter878", "", err); }
      }
      err = oprot.WriteListEnd()
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemsMap", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemsResult) WriteFieldItemsMap(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ItemsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.UnavailableItemIds != nil {
    err = oprot.WriteFieldBegin("unavailableItemIds", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "unavailableItemIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.UnavailableItemIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter879 := range p.UnavailableItemIds.Iter() {
      Iter880 := Iter879.(ItemID)
      err = oprot.WriteString(string(Iter880))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter880", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "unavailableItemIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemsResult) WriteFieldUnavailableItemIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ItemsResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemsResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ItemsResult) TStructName() string {
  return "ItemsResult"
}

func (p *ItemsResult) ThriftName() string {
  return "ItemsResult"
}

func (p *ItemsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemsResult(%+v)", *p)
}

func (p *ItemsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ItemsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ItemsMap.CompareTo(data.ItemsMap); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.UnavailableItemIds.CompareTo(data.UnavailableItemIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ItemsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ItemsMap
  case 2: return p.UnavailableItemIds
  case 3: return p.BaseResult
  }
  return nil
}

func (p *ItemsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("itemsMap", thrift.MAP, 1),
    thrift.NewTField("unavailableItemIds", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - AttributeNames
 *  - ViewNames
 *  - SellerIds
 *  - IsRelationshipInfoRequired
 *  - IsStaticContentsRequired
 *  - IsCategorizationInfoRequired
 *  - IsContributorInfoRequired
 *  - IsTagInfoRequired
 */
type ProductDataOptions struct {
  thrift.TStruct
  AttributeNames thrift.TList "attributeNames"; // 1
  ViewNames thrift.TList "viewNames"; // 2
  SellerIds thrift.TList "sellerIds"; // 3
  IsRelationshipInfoRequired bool "isRelationshipInfoRequired"; // 4
  IsStaticContentsRequired bool "isStaticContentsRequired"; // 5
  IsCategorizationInfoRequired bool "isCategorizationInfoRequired"; // 6
  IsContributorInfoRequired bool "isContributorInfoRequired"; // 7
  IsTagInfoRequired bool "isTagInfoRequired"; // 8
}

func NewProductDataOptions() *ProductDataOptions {
  output := &ProductDataOptions{
    TStruct:thrift.NewTStruct("ProductDataOptions", []thrift.TField{
    thrift.NewTField("attributeNames", thrift.LIST, 1),
    thrift.NewTField("viewNames", thrift.LIST, 2),
    thrift.NewTField("sellerIds", thrift.LIST, 3),
    thrift.NewTField("isRelationshipInfoRequired", thrift.BOOL, 4),
    thrift.NewTField("isStaticContentsRequired", thrift.BOOL, 5),
    thrift.NewTField("isCategorizationInfoRequired", thrift.BOOL, 6),
    thrift.NewTField("isContributorInfoRequired", thrift.BOOL, 7),
    thrift.NewTField("isTagInfoRequired", thrift.BOOL, 8),
    }),
  }
  {
    output.IsRelationshipInfoRequired = true
    output.IsStaticContentsRequired = true
    output.IsCategorizationInfoRequired = true
    output.IsContributorInfoRequired = true
    output.IsTagInfoRequired = true
  }
  return output
}

func (p *ProductDataOptions) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "attributeNames" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "viewNames" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "sellerIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "isRelationshipInfoRequired" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "isStaticContentsRequired" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "isCategorizationInfoRequired" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 7 || fieldName == "isContributorInfoRequired" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField7(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 8 || fieldName == "isTagInfoRequired" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField8(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductDataOptions) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype886, _size883, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.AttributeNames", "", err)
  }
  p.AttributeNames = thrift.NewTList(_etype886, _size883)
  for _i887:= 0; _i887 < _size883; _i887++ {
    v889, err890 := iprot.ReadString()
    if err890 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem888", "", err890); }
    _elem888 := v889
    p.AttributeNames.Push(_elem888)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductDataOptions) ReadFieldAttributeNames(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ProductDataOptions) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype896, _size893, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ViewNames", "", err)
  }
  p.ViewNames = thrift.NewTList(_etype896, _size893)
  for _i897:= 0; _i897 < _size893; _i897++ {
    v899, err900 := iprot.ReadString()
    if err900 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem898", "", err900); }
    _elem898 := v899
    p.ViewNames.Push(_elem898)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductDataOptions) ReadFieldViewNames(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ProductDataOptions) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype906, _size903, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.SellerIds", "", err)
  }
  p.SellerIds = thrift.NewTList(_etype906, _size903)
  for _i907:= 0; _i907 < _size903; _i907++ {
    v909, err910 := iprot.ReadString()
    if err910 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem908", "", err910); }
    _elem908 := v909
    p.SellerIds.Push(_elem908)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ProductDataOptions) ReadFieldSellerIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ProductDataOptions) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v911, err912 := iprot.ReadBool()
  if err912 != nil { return thrift.NewTProtocolExceptionReadField(4, "isRelationshipInfoRequired", p.ThriftName(), err912); }
  p.IsRelationshipInfoRequired = v911
  return err
}

func (p *ProductDataOptions) ReadFieldIsRelationshipInfoRequired(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ProductDataOptions) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v913, err914 := iprot.ReadBool()
  if err914 != nil { return thrift.NewTProtocolExceptionReadField(5, "isStaticContentsRequired", p.ThriftName(), err914); }
  p.IsStaticContentsRequired = v913
  return err
}

func (p *ProductDataOptions) ReadFieldIsStaticContentsRequired(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *ProductDataOptions) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v915, err916 := iprot.ReadBool()
  if err916 != nil { return thrift.NewTProtocolExceptionReadField(6, "isCategorizationInfoRequired", p.ThriftName(), err916); }
  p.IsCategorizationInfoRequired = v915
  return err
}

func (p *ProductDataOptions) ReadFieldIsCategorizationInfoRequired(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *ProductDataOptions) ReadField7(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v917, err918 := iprot.ReadBool()
  if err918 != nil { return thrift.NewTProtocolExceptionReadField(7, "isContributorInfoRequired", p.ThriftName(), err918); }
  p.IsContributorInfoRequired = v917
  return err
}

func (p *ProductDataOptions) ReadFieldIsContributorInfoRequired(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField7(iprot)
}

func (p *ProductDataOptions) ReadField8(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v919, err920 := iprot.ReadBool()
  if err920 != nil { return thrift.NewTProtocolExceptionReadField(8, "isTagInfoRequired", p.ThriftName(), err920); }
  p.IsTagInfoRequired = v919
  return err
}

func (p *ProductDataOptions) ReadFieldIsTagInfoRequired(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField8(iprot)
}

func (p *ProductDataOptions) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ProductDataOptions")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = p.WriteField7(oprot)
  if err != nil { return err }
  err = p.WriteField8(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductDataOptions) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.AttributeNames != nil {
    err = oprot.WriteFieldBegin("attributeNames", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "attributeNames", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.AttributeNames.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter921 := range p.AttributeNames.Iter() {
      Iter922 := Iter921.(string)
      err = oprot.WriteString(string(Iter922))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter922", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "attributeNames", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductDataOptions) WriteFieldAttributeNames(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ProductDataOptions) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ViewNames != nil {
    err = oprot.WriteFieldBegin("viewNames", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "viewNames", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ViewNames.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter923 := range p.ViewNames.Iter() {
      Iter924 := Iter923.(string)
      err = oprot.WriteString(string(Iter924))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter924", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "viewNames", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductDataOptions) WriteFieldViewNames(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ProductDataOptions) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SellerIds != nil {
    err = oprot.WriteFieldBegin("sellerIds", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "sellerIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.SellerIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter925 := range p.SellerIds.Iter() {
      Iter926 := Iter925.(string)
      err = oprot.WriteString(string(Iter926))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter926", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "sellerIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductDataOptions) WriteFieldSellerIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ProductDataOptions) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isRelationshipInfoRequired", thrift.BOOL, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "isRelationshipInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsRelationshipInfoRequired))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "isRelationshipInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "isRelationshipInfoRequired", p.ThriftName(), err); }
  return err
}

func (p *ProductDataOptions) WriteFieldIsRelationshipInfoRequired(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ProductDataOptions) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isStaticContentsRequired", thrift.BOOL, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "isStaticContentsRequired", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsStaticContentsRequired))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "isStaticContentsRequired", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "isStaticContentsRequired", p.ThriftName(), err); }
  return err
}

func (p *ProductDataOptions) WriteFieldIsStaticContentsRequired(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *ProductDataOptions) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isCategorizationInfoRequired", thrift.BOOL, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "isCategorizationInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsCategorizationInfoRequired))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "isCategorizationInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "isCategorizationInfoRequired", p.ThriftName(), err); }
  return err
}

func (p *ProductDataOptions) WriteFieldIsCategorizationInfoRequired(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *ProductDataOptions) WriteField7(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isContributorInfoRequired", thrift.BOOL, 7)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "isContributorInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsContributorInfoRequired))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "isContributorInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(7, "isContributorInfoRequired", p.ThriftName(), err); }
  return err
}

func (p *ProductDataOptions) WriteFieldIsContributorInfoRequired(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField7(oprot)
}

func (p *ProductDataOptions) WriteField8(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isTagInfoRequired", thrift.BOOL, 8)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "isTagInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsTagInfoRequired))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "isTagInfoRequired", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(8, "isTagInfoRequired", p.ThriftName(), err); }
  return err
}

func (p *ProductDataOptions) WriteFieldIsTagInfoRequired(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField8(oprot)
}

func (p *ProductDataOptions) TStructName() string {
  return "ProductDataOptions"
}

func (p *ProductDataOptions) ThriftName() string {
  return "ProductDataOptions"
}

func (p *ProductDataOptions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductDataOptions(%+v)", *p)
}

func (p *ProductDataOptions) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ProductDataOptions)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.AttributeNames.CompareTo(data.AttributeNames); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ViewNames.CompareTo(data.ViewNames); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SellerIds.CompareTo(data.SellerIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.IsRelationshipInfoRequired, data.IsRelationshipInfoRequired); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.IsStaticContentsRequired, data.IsStaticContentsRequired); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.IsCategorizationInfoRequired, data.IsCategorizationInfoRequired); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.IsContributorInfoRequired, data.IsContributorInfoRequired); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.IsTagInfoRequired, data.IsTagInfoRequired); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *ProductDataOptions) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.AttributeNames
  case 2: return p.ViewNames
  case 3: return p.SellerIds
  case 4: return p.IsRelationshipInfoRequired
  case 5: return p.IsStaticContentsRequired
  case 6: return p.IsCategorizationInfoRequired
  case 7: return p.IsContributorInfoRequired
  case 8: return p.IsTagInfoRequired
  }
  return nil
}

func (p *ProductDataOptions) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("attributeNames", thrift.LIST, 1),
    thrift.NewTField("viewNames", thrift.LIST, 2),
    thrift.NewTField("sellerIds", thrift.LIST, 3),
    thrift.NewTField("isRelationshipInfoRequired", thrift.BOOL, 4),
    thrift.NewTField("isStaticContentsRequired", thrift.BOOL, 5),
    thrift.NewTField("isCategorizationInfoRequired", thrift.BOOL, 6),
    thrift.NewTField("isContributorInfoRequired", thrift.BOOL, 7),
    thrift.NewTField("isTagInfoRequired", thrift.BOOL, 8),
    })
}

/**
 * Attributes:
 *  - ItemIDs
 *  - ProductDataOptions
 *  - BaseRequest
 */
type ItemDetailsRequest struct {
  thrift.TStruct
  ItemIDs thrift.TList "itemIDs"; // 1
  ProductDataOptions *ProductDataOptions "productDataOptions"; // 2
  BaseRequest *BaseRequest "baseRequest"; // 3
}

func NewItemDetailsRequest() *ItemDetailsRequest {
  output := &ItemDetailsRequest{
    TStruct:thrift.NewTStruct("ItemDetailsRequest", []thrift.TField{
    thrift.NewTField("itemIDs", thrift.LIST, 1),
    thrift.NewTField("productDataOptions", thrift.STRUCT, 2),
    thrift.NewTField("baseRequest", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ItemDetailsRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "itemIDs" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "productDataOptions" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemDetailsRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype932, _size929, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ItemIDs", "", err)
  }
  p.ItemIDs = thrift.NewTList(_etype932, _size929)
  for _i933:= 0; _i933 < _size929; _i933++ {
    v935, err936 := iprot.ReadString()
    if err936 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem934", "", err936); }
    _elem934 := ItemID(v935)
    p.ItemIDs.Push(_elem934)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ItemDetailsRequest) ReadFieldItemIDs(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ItemDetailsRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.ProductDataOptions = NewProductDataOptions()
  err939 := p.ProductDataOptions.Read(iprot)
  if err939 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ProductDataOptionsProductDataOptions", err939); }
  return err
}

func (p *ItemDetailsRequest) ReadFieldProductDataOptions(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ItemDetailsRequest) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err942 := p.BaseRequest.Read(iprot)
  if err942 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err942); }
  return err
}

func (p *ItemDetailsRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ItemDetailsRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ItemDetailsRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemDetailsRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ItemIDs != nil {
    err = oprot.WriteFieldBegin("itemIDs", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemIDs", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ItemIDs.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter943 := range p.ItemIDs.Iter() {
      Iter944 := Iter943.(ItemID)
      err = oprot.WriteString(string(Iter944))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter944", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemIDs", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemDetailsRequest) WriteFieldItemIDs(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ItemDetailsRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductDataOptions != nil {
    err = oprot.WriteFieldBegin("productDataOptions", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "productDataOptions", p.ThriftName(), err); }
    err = p.ProductDataOptions.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductDataOptions", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "productDataOptions", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemDetailsRequest) WriteFieldProductDataOptions(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ItemDetailsRequest) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemDetailsRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ItemDetailsRequest) TStructName() string {
  return "ItemDetailsRequest"
}

func (p *ItemDetailsRequest) ThriftName() string {
  return "ItemDetailsRequest"
}

func (p *ItemDetailsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemDetailsRequest(%+v)", *p)
}

func (p *ItemDetailsRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ItemDetailsRequest)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ItemIDs.CompareTo(data.ItemIDs); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ProductDataOptions.CompareTo(data.ProductDataOptions); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ItemDetailsRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ItemIDs
  case 2: return p.ProductDataOptions
  case 3: return p.BaseRequest
  }
  return nil
}

func (p *ItemDetailsRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("itemIDs", thrift.LIST, 1),
    thrift.NewTField("productDataOptions", thrift.STRUCT, 2),
    thrift.NewTField("baseRequest", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - ItemID
 *  - Products
 */
type ItemDetail struct {
  thrift.TStruct
  ItemID ItemID "itemID"; // 1
  Products thrift.TMap "products"; // 2
}

func NewItemDetail() *ItemDetail {
  output := &ItemDetail{
    TStruct:thrift.NewTStruct("ItemDetail", []thrift.TField{
    thrift.NewTField("itemID", thrift.STRING, 1),
    thrift.NewTField("products", thrift.MAP, 2),
    }),
  }
  {
  }
  return output
}

func (p *ItemDetail) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "itemID" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "products" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemDetail) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v945, err946 := iprot.ReadString()
  if err946 != nil { return thrift.NewTProtocolExceptionReadField(1, "itemID", p.ThriftName(), err946); }
  p.ItemID = ItemID(v945)
  return err
}

func (p *ItemDetail) ReadFieldItemID(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ItemDetail) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype950, _vtype951, _size949, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Products", "", err)
  }
  p.Products = thrift.NewTMap(_ktype950, _vtype951, _size949)
  for _i953:= 0; _i953 < _size949; _i953++ {
    v956, err957 := iprot.ReadString()
    if err957 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key954", "", err957); }
    _key954 := ProductID(v956)
    _val955 := NewProductData()
    err960 := _val955.Read(iprot)
    if err960 != nil { return thrift.NewTProtocolExceptionReadStruct("_val955ProductData", err960); }
    p.Products.Set(_key954, _val955)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ItemDetail) ReadFieldProducts(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ItemDetail) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ItemDetail")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemDetail) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("itemID", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemID", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ItemID))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemID", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemID", p.ThriftName(), err); }
  return err
}

func (p *ItemDetail) WriteFieldItemID(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ItemDetail) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Products != nil {
    err = oprot.WriteFieldBegin("products", thrift.MAP, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "products", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.Products.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter961 := range p.Products.Iter() {
      Kiter962, Viter963 := Miter961.Key().(ProductID), Miter961.Value().(*ProductData)
      err = oprot.WriteString(string(Kiter962))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter962", "", err); }
      err = Viter963.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductData", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "products", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemDetail) WriteFieldProducts(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ItemDetail) TStructName() string {
  return "ItemDetail"
}

func (p *ItemDetail) ThriftName() string {
  return "ItemDetail"
}

func (p *ItemDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemDetail(%+v)", *p)
}

func (p *ItemDetail) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ItemDetail)
  if !ok {
    return 0, false
  }
  if p.ItemID != data.ItemID {
    if p.ItemID < data.ItemID {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Products.CompareTo(data.Products); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ItemDetail) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ItemID
  case 2: return p.Products
  }
  return nil
}

func (p *ItemDetail) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("itemID", thrift.STRING, 1),
    thrift.NewTField("products", thrift.MAP, 2),
    })
}

/**
 * Attributes:
 *  - ItemDetails
 *  - UnavailableItemIDs
 *  - BaseResult
 */
type ItemDetailsResult struct {
  thrift.TStruct
  ItemDetails thrift.TMap "itemDetails"; // 1
  UnavailableItemIDs thrift.TList "unavailableItemIDs"; // 2
  BaseResult *BaseResult "baseResult"; // 3
}

func NewItemDetailsResult() *ItemDetailsResult {
  output := &ItemDetailsResult{
    TStruct:thrift.NewTStruct("ItemDetailsResult", []thrift.TField{
    thrift.NewTField("itemDetails", thrift.MAP, 1),
    thrift.NewTField("unavailableItemIDs", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ItemDetailsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "itemDetails" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "unavailableItemIDs" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemDetailsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype967, _vtype968, _size966, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ItemDetails", "", err)
  }
  p.ItemDetails = thrift.NewTMap(_ktype967, _vtype968, _size966)
  for _i970:= 0; _i970 < _size966; _i970++ {
    v973, err974 := iprot.ReadString()
    if err974 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key971", "", err974); }
    _key971 := ItemID(v973)
    _val972 := NewItemDetail()
    err977 := _val972.Read(iprot)
    if err977 != nil { return thrift.NewTProtocolExceptionReadStruct("_val972ItemDetail", err977); }
    p.ItemDetails.Set(_key971, _val972)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ItemDetailsResult) ReadFieldItemDetails(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ItemDetailsResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype983, _size980, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.UnavailableItemIDs", "", err)
  }
  p.UnavailableItemIDs = thrift.NewTList(_etype983, _size980)
  for _i984:= 0; _i984 < _size980; _i984++ {
    v986, err987 := iprot.ReadString()
    if err987 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem985", "", err987); }
    _elem985 := ItemID(v986)
    p.UnavailableItemIDs.Push(_elem985)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ItemDetailsResult) ReadFieldUnavailableItemIDs(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ItemDetailsResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err990 := p.BaseResult.Read(iprot)
  if err990 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err990); }
  return err
}

func (p *ItemDetailsResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ItemDetailsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ItemDetailsResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemDetailsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ItemDetails != nil {
    err = oprot.WriteFieldBegin("itemDetails", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemDetails", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.ItemDetails.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter991 := range p.ItemDetails.Iter() {
      Kiter992, Viter993 := Miter991.Key().(ItemID), Miter991.Value().(*ItemDetail)
      err = oprot.WriteString(string(Kiter992))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter992", "", err); }
      err = Viter993.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ItemDetail", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemDetails", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemDetailsResult) WriteFieldItemDetails(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ItemDetailsResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.UnavailableItemIDs != nil {
    err = oprot.WriteFieldBegin("unavailableItemIDs", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "unavailableItemIDs", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.UnavailableItemIDs.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter994 := range p.UnavailableItemIDs.Iter() {
      Iter995 := Iter994.(ItemID)
      err = oprot.WriteString(string(Iter995))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter995", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "unavailableItemIDs", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemDetailsResult) WriteFieldUnavailableItemIDs(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ItemDetailsResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemDetailsResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ItemDetailsResult) TStructName() string {
  return "ItemDetailsResult"
}

func (p *ItemDetailsResult) ThriftName() string {
  return "ItemDetailsResult"
}

func (p *ItemDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemDetailsResult(%+v)", *p)
}

func (p *ItemDetailsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ItemDetailsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ItemDetails.CompareTo(data.ItemDetails); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.UnavailableItemIDs.CompareTo(data.UnavailableItemIDs); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ItemDetailsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ItemDetails
  case 2: return p.UnavailableItemIDs
  case 3: return p.BaseResult
  }
  return nil
}

func (p *ItemDetailsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("itemDetails", thrift.MAP, 1),
    thrift.NewTField("unavailableItemIDs", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - VerticalName
 *  - NodeId
 *  - MaxDepth
 *  - BaseRequest
 */
type CategoryTreeRequest struct {
  thrift.TStruct
  VerticalName string "verticalName"; // 1
  NodeId int32 "nodeId"; // 2
  MaxDepth int16 "maxDepth"; // 3
  BaseRequest *BaseRequest "baseRequest"; // 4
}

func NewCategoryTreeRequest() *CategoryTreeRequest {
  output := &CategoryTreeRequest{
    TStruct:thrift.NewTStruct("CategoryTreeRequest", []thrift.TField{
    thrift.NewTField("verticalName", thrift.STRING, 1),
    thrift.NewTField("nodeId", thrift.I32, 2),
    thrift.NewTField("maxDepth", thrift.I16, 3),
    thrift.NewTField("baseRequest", thrift.STRUCT, 4),
    }),
  }
  {
  }
  return output
}

func (p *CategoryTreeRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "verticalName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "nodeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "maxDepth" {
      if fieldTypeId == thrift.I16 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryTreeRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v996, err997 := iprot.ReadString()
  if err997 != nil { return thrift.NewTProtocolExceptionReadField(1, "verticalName", p.ThriftName(), err997); }
  p.VerticalName = v996
  return err
}

func (p *CategoryTreeRequest) ReadFieldVerticalName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CategoryTreeRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v998, err999 := iprot.ReadI32()
  if err999 != nil { return thrift.NewTProtocolExceptionReadField(2, "nodeId", p.ThriftName(), err999); }
  p.NodeId = v998
  return err
}

func (p *CategoryTreeRequest) ReadFieldNodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CategoryTreeRequest) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1000, err1001 := iprot.ReadI16()
  if err1001 != nil { return thrift.NewTProtocolExceptionReadField(3, "maxDepth", p.ThriftName(), err1001); }
  p.MaxDepth = v1000
  return err
}

func (p *CategoryTreeRequest) ReadFieldMaxDepth(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CategoryTreeRequest) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err1004 := p.BaseRequest.Read(iprot)
  if err1004 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err1004); }
  return err
}

func (p *CategoryTreeRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *CategoryTreeRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CategoryTreeRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryTreeRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("verticalName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.VerticalName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalName", p.ThriftName(), err); }
  return err
}

func (p *CategoryTreeRequest) WriteFieldVerticalName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CategoryTreeRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("nodeId", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "nodeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "nodeId", p.ThriftName(), err); }
  return err
}

func (p *CategoryTreeRequest) WriteFieldNodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CategoryTreeRequest) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("maxDepth", thrift.I16, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "maxDepth", p.ThriftName(), err); }
  err = oprot.WriteI16(int16(p.MaxDepth))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "maxDepth", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "maxDepth", p.ThriftName(), err); }
  return err
}

func (p *CategoryTreeRequest) WriteFieldMaxDepth(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CategoryTreeRequest) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryTreeRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *CategoryTreeRequest) TStructName() string {
  return "CategoryTreeRequest"
}

func (p *CategoryTreeRequest) ThriftName() string {
  return "CategoryTreeRequest"
}

func (p *CategoryTreeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryTreeRequest(%+v)", *p)
}

func (p *CategoryTreeRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CategoryTreeRequest)
  if !ok {
    return 0, false
  }
  if p.VerticalName != data.VerticalName {
    if p.VerticalName < data.VerticalName {
      return -1, true
    }
    return 1, true
  }
  if p.NodeId != data.NodeId {
    if p.NodeId < data.NodeId {
      return -1, true
    }
    return 1, true
  }
  if p.MaxDepth != data.MaxDepth {
    if p.MaxDepth < data.MaxDepth {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CategoryTreeRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.VerticalName
  case 2: return p.NodeId
  case 3: return p.MaxDepth
  case 4: return p.BaseRequest
  }
  return nil
}

func (p *CategoryTreeRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("verticalName", thrift.STRING, 1),
    thrift.NewTField("nodeId", thrift.I32, 2),
    thrift.NewTField("maxDepth", thrift.I16, 3),
    thrift.NewTField("baseRequest", thrift.STRUCT, 4),
    })
}

/**
 * Attributes:
 *  - CurrentNode
 *  - NodePath
 *  - Children
 *  - BaseResult
 */
type CategoryTreeResult struct {
  thrift.TStruct
  CurrentNode *CategoryNodeInfo "currentNode"; // 1
  NodePath thrift.TList "nodePath"; // 2
  Children thrift.TMap "children"; // 3
  BaseResult *BaseResult "baseResult"; // 4
}

func NewCategoryTreeResult() *CategoryTreeResult {
  output := &CategoryTreeResult{
    TStruct:thrift.NewTStruct("CategoryTreeResult", []thrift.TField{
    thrift.NewTField("currentNode", thrift.STRUCT, 1),
    thrift.NewTField("nodePath", thrift.LIST, 2),
    thrift.NewTField("children", thrift.MAP, 3),
    thrift.NewTField("baseResult", thrift.STRUCT, 4),
    }),
  }
  {
  }
  return output
}

func (p *CategoryTreeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "currentNode" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "nodePath" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "children" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryTreeResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CurrentNode = NewCms.ttypes.CategoryNodeInfo()
  err1007 := p.CurrentNode.Read(iprot)
  if err1007 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CurrentNodeCategoryNodeInfo", err1007); }
  return err
}

func (p *CategoryTreeResult) ReadFieldCurrentNode(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CategoryTreeResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1013, _size1010, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.NodePath", "", err)
  }
  p.NodePath = thrift.NewTList(_etype1013, _size1010)
  for _i1014:= 0; _i1014 < _size1010; _i1014++ {
    _elem1015 := NewCms.ttypes.CategoryNodeInfo()
    err1018 := _elem1015.Read(iprot)
    if err1018 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1015CategoryNodeInfo", err1018); }
    p.NodePath.Push(_elem1015)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *CategoryTreeResult) ReadFieldNodePath(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CategoryTreeResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype1022, _vtype1023, _size1021, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Children", "", err)
  }
  p.Children = thrift.NewTMap(_ktype1022, _vtype1023, _size1021)
  for _i1025:= 0; _i1025 < _size1021; _i1025++ {
    v1028, err1029 := iprot.ReadI32()
    if err1029 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key1026", "", err1029); }
    _key1026 := v1028
    _etype1035, _size1032, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(-1, "_val1027", "", err)
    }
    _val1027 := thrift.NewTList(_etype1035, _size1032)
    for _i1036:= 0; _i1036 < _size1032; _i1036++ {
      _elem1037 := NewCms.ttypes.CategoryNodeInfo()
      err1040 := _elem1037.Read(iprot)
      if err1040 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1037CategoryNodeInfo", err1040); }
      _val1027.Push(_elem1037)
    }
    err = iprot.ReadListEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
    p.Children.Set(_key1026, _val1027)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *CategoryTreeResult) ReadFieldChildren(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CategoryTreeResult) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err1043 := p.BaseResult.Read(iprot)
  if err1043 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err1043); }
  return err
}

func (p *CategoryTreeResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *CategoryTreeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CategoryTreeResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryTreeResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CurrentNode != nil {
    err = oprot.WriteFieldBegin("currentNode", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "currentNode", p.ThriftName(), err); }
    err = p.CurrentNode.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategoryNodeInfo", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "currentNode", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryTreeResult) WriteFieldCurrentNode(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CategoryTreeResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.NodePath != nil {
    err = oprot.WriteFieldBegin("nodePath", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "nodePath", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.NodePath.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1044 := range p.NodePath.Iter() {
      Iter1045 := Iter1044.(*CategoryNodeInfo)
      err = Iter1045.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategoryNodeInfo", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "nodePath", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryTreeResult) WriteFieldNodePath(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CategoryTreeResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Children != nil {
    err = oprot.WriteFieldBegin("children", thrift.MAP, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "children", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.I32, thrift.LIST, p.Children.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter1046 := range p.Children.Iter() {
      Kiter1047, Viter1048 := Miter1046.Key().(int32), Miter1046.Value().(thrift.TList)
      err = oprot.WriteI32(int32(Kiter1047))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter1047", "", err); }
      err = oprot.WriteListBegin(thrift.STRUCT, Viter1048.Len())
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
      for Iter1049 := range Viter1048.Iter() {
        Iter1050 := Iter1049.(*CategoryNodeInfo)
        err = Iter1050.Write(oprot)
        if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategoryNodeInfo", err); }
      }
      err = oprot.WriteListEnd()
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "children", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryTreeResult) WriteFieldChildren(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CategoryTreeResult) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryTreeResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *CategoryTreeResult) TStructName() string {
  return "CategoryTreeResult"
}

func (p *CategoryTreeResult) ThriftName() string {
  return "CategoryTreeResult"
}

func (p *CategoryTreeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryTreeResult(%+v)", *p)
}

func (p *CategoryTreeResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CategoryTreeResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.CurrentNode.CompareTo(data.CurrentNode); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.NodePath.CompareTo(data.NodePath); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.Children.CompareTo(data.Children); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CategoryTreeResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.CurrentNode
  case 2: return p.NodePath
  case 3: return p.Children
  case 4: return p.BaseResult
  }
  return nil
}

func (p *CategoryTreeResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("currentNode", thrift.STRUCT, 1),
    thrift.NewTField("nodePath", thrift.LIST, 2),
    thrift.NewTField("children", thrift.MAP, 3),
    thrift.NewTField("baseResult", thrift.STRUCT, 4),
    })
}

/**
 * Attributes:
 *  - ProductIDs
 *  - BaseRequest
 */
type CategoryPathRequest struct {
  thrift.TStruct
  ProductIDs thrift.TList "productIDs"; // 1
  BaseRequest *BaseRequest "baseRequest"; // 2
}

func NewCategoryPathRequest() *CategoryPathRequest {
  output := &CategoryPathRequest{
    TStruct:thrift.NewTStruct("CategoryPathRequest", []thrift.TField{
    thrift.NewTField("productIDs", thrift.LIST, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *CategoryPathRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productIDs" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryPathRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1056, _size1053, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductIDs", "", err)
  }
  p.ProductIDs = thrift.NewTList(_etype1056, _size1053)
  for _i1057:= 0; _i1057 < _size1053; _i1057++ {
    v1059, err1060 := iprot.ReadString()
    if err1060 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1058", "", err1060); }
    _elem1058 := ProductID(v1059)
    p.ProductIDs.Push(_elem1058)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *CategoryPathRequest) ReadFieldProductIDs(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CategoryPathRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err1063 := p.BaseRequest.Read(iprot)
  if err1063 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err1063); }
  return err
}

func (p *CategoryPathRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CategoryPathRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CategoryPathRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryPathRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductIDs != nil {
    err = oprot.WriteFieldBegin("productIDs", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIDs", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ProductIDs.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1064 := range p.ProductIDs.Iter() {
      Iter1065 := Iter1064.(ProductID)
      err = oprot.WriteString(string(Iter1065))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1065", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIDs", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryPathRequest) WriteFieldProductIDs(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CategoryPathRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryPathRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CategoryPathRequest) TStructName() string {
  return "CategoryPathRequest"
}

func (p *CategoryPathRequest) ThriftName() string {
  return "CategoryPathRequest"
}

func (p *CategoryPathRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryPathRequest(%+v)", *p)
}

func (p *CategoryPathRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CategoryPathRequest)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductIDs.CompareTo(data.ProductIDs); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CategoryPathRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductIDs
  case 2: return p.BaseRequest
  }
  return nil
}

func (p *CategoryPathRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productIDs", thrift.LIST, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - CategoryPath
 *  - BaseResult
 */
type CategoryPathResult struct {
  thrift.TStruct
  CategoryPath thrift.TMap "categoryPath"; // 1
  BaseResult *BaseResult "baseResult"; // 2
}

func NewCategoryPathResult() *CategoryPathResult {
  output := &CategoryPathResult{
    TStruct:thrift.NewTStruct("CategoryPathResult", []thrift.TField{
    thrift.NewTField("categoryPath", thrift.MAP, 1),
    thrift.NewTField("baseResult", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *CategoryPathResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "categoryPath" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryPathResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype1069, _vtype1070, _size1068, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.CategoryPath", "", err)
  }
  p.CategoryPath = thrift.NewTMap(_ktype1069, _vtype1070, _size1068)
  for _i1072:= 0; _i1072 < _size1068; _i1072++ {
    v1075, err1076 := iprot.ReadString()
    if err1076 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key1073", "", err1076); }
    _key1073 := v1075
    _etype1082, _size1079, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(-1, "_val1074", "", err)
    }
    _val1074 := thrift.NewTList(_etype1082, _size1079)
    for _i1083:= 0; _i1083 < _size1079; _i1083++ {
      v1085, err1086 := iprot.ReadString()
      if err1086 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1084", "", err1086); }
      _elem1084 := v1085
      _val1074.Push(_elem1084)
    }
    err = iprot.ReadListEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
    p.CategoryPath.Set(_key1073, _val1074)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *CategoryPathResult) ReadFieldCategoryPath(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CategoryPathResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err1089 := p.BaseResult.Read(iprot)
  if err1089 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err1089); }
  return err
}

func (p *CategoryPathResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CategoryPathResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CategoryPathResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryPathResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CategoryPath != nil {
    err = oprot.WriteFieldBegin("categoryPath", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "categoryPath", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.LIST, p.CategoryPath.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter1090 := range p.CategoryPath.Iter() {
      Kiter1091, Viter1092 := Miter1090.Key().(string), Miter1090.Value().(thrift.TList)
      err = oprot.WriteString(string(Kiter1091))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter1091", "", err); }
      err = oprot.WriteListBegin(thrift.STRING, Viter1092.Len())
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
      for Iter1093 := range Viter1092.Iter() {
        Iter1094 := Iter1093.(string)
        err = oprot.WriteString(string(Iter1094))
        if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1094", "", err); }
      }
      err = oprot.WriteListEnd()
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "categoryPath", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryPathResult) WriteFieldCategoryPath(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CategoryPathResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryPathResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CategoryPathResult) TStructName() string {
  return "CategoryPathResult"
}

func (p *CategoryPathResult) ThriftName() string {
  return "CategoryPathResult"
}

func (p *CategoryPathResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryPathResult(%+v)", *p)
}

func (p *CategoryPathResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CategoryPathResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.CategoryPath.CompareTo(data.CategoryPath); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CategoryPathResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.CategoryPath
  case 2: return p.BaseResult
  }
  return nil
}

func (p *CategoryPathResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("categoryPath", thrift.MAP, 1),
    thrift.NewTField("baseResult", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - VerticalName
 *  - CategoryNodeList
 *  - StartIndex
 *  - RecordSize
 *  - BaseRequest
 */
type CategoryNodeInfoRequest struct {
  thrift.TStruct
  VerticalName string "verticalName"; // 1
  CategoryNodeList thrift.TList "categoryNodeList"; // 2
  StartIndex int32 "startIndex"; // 3
  RecordSize int32 "recordSize"; // 4
  BaseRequest *BaseRequest "baseRequest"; // 5
}

func NewCategoryNodeInfoRequest() *CategoryNodeInfoRequest {
  output := &CategoryNodeInfoRequest{
    TStruct:thrift.NewTStruct("CategoryNodeInfoRequest", []thrift.TField{
    thrift.NewTField("verticalName", thrift.STRING, 1),
    thrift.NewTField("categoryNodeList", thrift.LIST, 2),
    thrift.NewTField("startIndex", thrift.I32, 3),
    thrift.NewTField("recordSize", thrift.I32, 4),
    thrift.NewTField("baseRequest", thrift.STRUCT, 5),
    }),
  }
  {
  }
  return output
}

func (p *CategoryNodeInfoRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "verticalName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "categoryNodeList" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "startIndex" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "recordSize" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfoRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1095, err1096 := iprot.ReadString()
  if err1096 != nil { return thrift.NewTProtocolExceptionReadField(1, "verticalName", p.ThriftName(), err1096); }
  p.VerticalName = v1095
  return err
}

func (p *CategoryNodeInfoRequest) ReadFieldVerticalName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CategoryNodeInfoRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1102, _size1099, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.CategoryNodeList", "", err)
  }
  p.CategoryNodeList = thrift.NewTList(_etype1102, _size1099)
  for _i1103:= 0; _i1103 < _size1099; _i1103++ {
    v1105, err1106 := iprot.ReadI32()
    if err1106 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1104", "", err1106); }
    _elem1104 := v1105
    p.CategoryNodeList.Push(_elem1104)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *CategoryNodeInfoRequest) ReadFieldCategoryNodeList(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CategoryNodeInfoRequest) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1107, err1108 := iprot.ReadI32()
  if err1108 != nil { return thrift.NewTProtocolExceptionReadField(3, "startIndex", p.ThriftName(), err1108); }
  p.StartIndex = v1107
  return err
}

func (p *CategoryNodeInfoRequest) ReadFieldStartIndex(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CategoryNodeInfoRequest) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1109, err1110 := iprot.ReadI32()
  if err1110 != nil { return thrift.NewTProtocolExceptionReadField(4, "recordSize", p.ThriftName(), err1110); }
  p.RecordSize = v1109
  return err
}

func (p *CategoryNodeInfoRequest) ReadFieldRecordSize(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *CategoryNodeInfoRequest) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err1113 := p.BaseRequest.Read(iprot)
  if err1113 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err1113); }
  return err
}

func (p *CategoryNodeInfoRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *CategoryNodeInfoRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CategoryNodeInfoRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfoRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("verticalName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.VerticalName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalName", p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfoRequest) WriteFieldVerticalName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CategoryNodeInfoRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CategoryNodeList != nil {
    err = oprot.WriteFieldBegin("categoryNodeList", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "categoryNodeList", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.I32, p.CategoryNodeList.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1114 := range p.CategoryNodeList.Iter() {
      Iter1115 := Iter1114.(int32)
      err = oprot.WriteI32(int32(Iter1115))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1115", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "categoryNodeList", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryNodeInfoRequest) WriteFieldCategoryNodeList(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CategoryNodeInfoRequest) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("startIndex", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "startIndex", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.StartIndex))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "startIndex", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "startIndex", p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfoRequest) WriteFieldStartIndex(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CategoryNodeInfoRequest) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("recordSize", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "recordSize", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.RecordSize))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "recordSize", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "recordSize", p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfoRequest) WriteFieldRecordSize(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *CategoryNodeInfoRequest) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryNodeInfoRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *CategoryNodeInfoRequest) TStructName() string {
  return "CategoryNodeInfoRequest"
}

func (p *CategoryNodeInfoRequest) ThriftName() string {
  return "CategoryNodeInfoRequest"
}

func (p *CategoryNodeInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryNodeInfoRequest(%+v)", *p)
}

func (p *CategoryNodeInfoRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CategoryNodeInfoRequest)
  if !ok {
    return 0, false
  }
  if p.VerticalName != data.VerticalName {
    if p.VerticalName < data.VerticalName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.CategoryNodeList.CompareTo(data.CategoryNodeList); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.StartIndex != data.StartIndex {
    if p.StartIndex < data.StartIndex {
      return -1, true
    }
    return 1, true
  }
  if p.RecordSize != data.RecordSize {
    if p.RecordSize < data.RecordSize {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CategoryNodeInfoRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.VerticalName
  case 2: return p.CategoryNodeList
  case 3: return p.StartIndex
  case 4: return p.RecordSize
  case 5: return p.BaseRequest
  }
  return nil
}

func (p *CategoryNodeInfoRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("verticalName", thrift.STRING, 1),
    thrift.NewTField("categoryNodeList", thrift.LIST, 2),
    thrift.NewTField("startIndex", thrift.I32, 3),
    thrift.NewTField("recordSize", thrift.I32, 4),
    thrift.NewTField("baseRequest", thrift.STRUCT, 5),
    })
}

/**
 * Attributes:
 *  - ProductIDs
 *  - BaseResult
 */
type CategoryNodeInfoResult struct {
  thrift.TStruct
  ProductIDs thrift.TMap "productIDs"; // 1
  BaseResult *BaseResult "baseResult"; // 2
}

func NewCategoryNodeInfoResult() *CategoryNodeInfoResult {
  output := &CategoryNodeInfoResult{
    TStruct:thrift.NewTStruct("CategoryNodeInfoResult", []thrift.TField{
    thrift.NewTField("productIDs", thrift.MAP, 1),
    thrift.NewTField("baseResult", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *CategoryNodeInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productIDs" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfoResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype1119, _vtype1120, _size1118, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductIDs", "", err)
  }
  p.ProductIDs = thrift.NewTMap(_ktype1119, _vtype1120, _size1118)
  for _i1122:= 0; _i1122 < _size1118; _i1122++ {
    v1125, err1126 := iprot.ReadI32()
    if err1126 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key1123", "", err1126); }
    _key1123 := v1125
    _etype1132, _size1129, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(-1, "_val1124", "", err)
    }
    _val1124 := thrift.NewTList(_etype1132, _size1129)
    for _i1133:= 0; _i1133 < _size1129; _i1133++ {
      v1135, err1136 := iprot.ReadString()
      if err1136 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1134", "", err1136); }
      _elem1134 := ProductID(v1135)
      _val1124.Push(_elem1134)
    }
    err = iprot.ReadListEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
    p.ProductIDs.Set(_key1123, _val1124)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *CategoryNodeInfoResult) ReadFieldProductIDs(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CategoryNodeInfoResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err1139 := p.BaseResult.Read(iprot)
  if err1139 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err1139); }
  return err
}

func (p *CategoryNodeInfoResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CategoryNodeInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CategoryNodeInfoResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfoResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductIDs != nil {
    err = oprot.WriteFieldBegin("productIDs", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIDs", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.I32, thrift.LIST, p.ProductIDs.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter1140 := range p.ProductIDs.Iter() {
      Kiter1141, Viter1142 := Miter1140.Key().(int32), Miter1140.Value().(thrift.TList)
      err = oprot.WriteI32(int32(Kiter1141))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter1141", "", err); }
      err = oprot.WriteListBegin(thrift.STRING, Viter1142.Len())
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
      for Iter1143 := range Viter1142.Iter() {
        Iter1144 := Iter1143.(ProductID)
        err = oprot.WriteString(string(Iter1144))
        if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1144", "", err); }
      }
      err = oprot.WriteListEnd()
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIDs", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryNodeInfoResult) WriteFieldProductIDs(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CategoryNodeInfoResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryNodeInfoResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CategoryNodeInfoResult) TStructName() string {
  return "CategoryNodeInfoResult"
}

func (p *CategoryNodeInfoResult) ThriftName() string {
  return "CategoryNodeInfoResult"
}

func (p *CategoryNodeInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryNodeInfoResult(%+v)", *p)
}

func (p *CategoryNodeInfoResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CategoryNodeInfoResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductIDs.CompareTo(data.ProductIDs); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CategoryNodeInfoResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductIDs
  case 2: return p.BaseResult
  }
  return nil
}

func (p *CategoryNodeInfoResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productIDs", thrift.MAP, 1),
    thrift.NewTField("baseResult", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - ProductIds
 *  - BaseRequest
 */
type ItemHistoryRequest struct {
  thrift.TStruct
  ProductIds thrift.TList "productIds"; // 1
  BaseRequest *BaseRequest "baseRequest"; // 2
}

func NewItemHistoryRequest() *ItemHistoryRequest {
  output := &ItemHistoryRequest{
    TStruct:thrift.NewTStruct("ItemHistoryRequest", []thrift.TField{
    thrift.NewTField("productIds", thrift.LIST, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *ItemHistoryRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemHistoryRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1150, _size1147, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductIds", "", err)
  }
  p.ProductIds = thrift.NewTList(_etype1150, _size1147)
  for _i1151:= 0; _i1151 < _size1147; _i1151++ {
    v1153, err1154 := iprot.ReadString()
    if err1154 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1152", "", err1154); }
    _elem1152 := ProductID(v1153)
    p.ProductIds.Push(_elem1152)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ItemHistoryRequest) ReadFieldProductIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ItemHistoryRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err1157 := p.BaseRequest.Read(iprot)
  if err1157 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err1157); }
  return err
}

func (p *ItemHistoryRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ItemHistoryRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ItemHistoryRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemHistoryRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductIds != nil {
    err = oprot.WriteFieldBegin("productIds", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ProductIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1158 := range p.ProductIds.Iter() {
      Iter1159 := Iter1158.(ProductID)
      err = oprot.WriteString(string(Iter1159))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1159", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIds", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemHistoryRequest) WriteFieldProductIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ItemHistoryRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemHistoryRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ItemHistoryRequest) TStructName() string {
  return "ItemHistoryRequest"
}

func (p *ItemHistoryRequest) ThriftName() string {
  return "ItemHistoryRequest"
}

func (p *ItemHistoryRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemHistoryRequest(%+v)", *p)
}

func (p *ItemHistoryRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ItemHistoryRequest)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductIds.CompareTo(data.ProductIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ItemHistoryRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductIds
  case 2: return p.BaseRequest
  }
  return nil
}

func (p *ItemHistoryRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productIds", thrift.LIST, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - CurrentItemID
 *  - PreviousIDs
 */
type ItemHistory struct {
  thrift.TStruct
  CurrentItemID string "currentItemID"; // 1
  PreviousIDs thrift.TList "previousIDs"; // 2
}

func NewItemHistory() *ItemHistory {
  output := &ItemHistory{
    TStruct:thrift.NewTStruct("ItemHistory", []thrift.TField{
    thrift.NewTField("currentItemID", thrift.STRING, 1),
    thrift.NewTField("previousIDs", thrift.LIST, 2),
    }),
  }
  {
  }
  return output
}

func (p *ItemHistory) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "currentItemID" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "previousIDs" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemHistory) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1160, err1161 := iprot.ReadString()
  if err1161 != nil { return thrift.NewTProtocolExceptionReadField(1, "currentItemID", p.ThriftName(), err1161); }
  p.CurrentItemID = v1160
  return err
}

func (p *ItemHistory) ReadFieldCurrentItemID(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ItemHistory) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1167, _size1164, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.PreviousIDs", "", err)
  }
  p.PreviousIDs = thrift.NewTList(_etype1167, _size1164)
  for _i1168:= 0; _i1168 < _size1164; _i1168++ {
    v1170, err1171 := iprot.ReadString()
    if err1171 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1169", "", err1171); }
    _elem1169 := v1170
    p.PreviousIDs.Push(_elem1169)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ItemHistory) ReadFieldPreviousIDs(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ItemHistory) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ItemHistory")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemHistory) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("currentItemID", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "currentItemID", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.CurrentItemID))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "currentItemID", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "currentItemID", p.ThriftName(), err); }
  return err
}

func (p *ItemHistory) WriteFieldCurrentItemID(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ItemHistory) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.PreviousIDs != nil {
    err = oprot.WriteFieldBegin("previousIDs", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "previousIDs", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.PreviousIDs.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1172 := range p.PreviousIDs.Iter() {
      Iter1173 := Iter1172.(string)
      err = oprot.WriteString(string(Iter1173))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1173", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "previousIDs", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemHistory) WriteFieldPreviousIDs(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ItemHistory) TStructName() string {
  return "ItemHistory"
}

func (p *ItemHistory) ThriftName() string {
  return "ItemHistory"
}

func (p *ItemHistory) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemHistory(%+v)", *p)
}

func (p *ItemHistory) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ItemHistory)
  if !ok {
    return 0, false
  }
  if p.CurrentItemID != data.CurrentItemID {
    if p.CurrentItemID < data.CurrentItemID {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.PreviousIDs.CompareTo(data.PreviousIDs); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ItemHistory) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.CurrentItemID
  case 2: return p.PreviousIDs
  }
  return nil
}

func (p *ItemHistory) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("currentItemID", thrift.STRING, 1),
    thrift.NewTField("previousIDs", thrift.LIST, 2),
    })
}

/**
 * Attributes:
 *  - HistoryMap
 *  - UnavailablePids
 *  - BaseResult
 */
type ItemHistoryResult struct {
  thrift.TStruct
  HistoryMap thrift.TMap "historyMap"; // 1
  UnavailablePids thrift.TList "unavailablePids"; // 2
  BaseResult *BaseResult "baseResult"; // 3
}

func NewItemHistoryResult() *ItemHistoryResult {
  output := &ItemHistoryResult{
    TStruct:thrift.NewTStruct("ItemHistoryResult", []thrift.TField{
    thrift.NewTField("historyMap", thrift.MAP, 1),
    thrift.NewTField("unavailablePids", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    }),
  }
  {
  }
  return output
}

func (p *ItemHistoryResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "historyMap" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "unavailablePids" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemHistoryResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype1177, _vtype1178, _size1176, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.HistoryMap", "", err)
  }
  p.HistoryMap = thrift.NewTMap(_ktype1177, _vtype1178, _size1176)
  for _i1180:= 0; _i1180 < _size1176; _i1180++ {
    v1183, err1184 := iprot.ReadString()
    if err1184 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key1181", "", err1184); }
    _key1181 := ProductID(v1183)
    _val1182 := NewItemHistory()
    err1187 := _val1182.Read(iprot)
    if err1187 != nil { return thrift.NewTProtocolExceptionReadStruct("_val1182ItemHistory", err1187); }
    p.HistoryMap.Set(_key1181, _val1182)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ItemHistoryResult) ReadFieldHistoryMap(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ItemHistoryResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1193, _size1190, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.UnavailablePids", "", err)
  }
  p.UnavailablePids = thrift.NewTList(_etype1193, _size1190)
  for _i1194:= 0; _i1194 < _size1190; _i1194++ {
    v1196, err1197 := iprot.ReadString()
    if err1197 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1195", "", err1197); }
    _elem1195 := ProductID(v1196)
    p.UnavailablePids.Push(_elem1195)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *ItemHistoryResult) ReadFieldUnavailablePids(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ItemHistoryResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err1200 := p.BaseResult.Read(iprot)
  if err1200 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err1200); }
  return err
}

func (p *ItemHistoryResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ItemHistoryResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ItemHistoryResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ItemHistoryResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.HistoryMap != nil {
    err = oprot.WriteFieldBegin("historyMap", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "historyMap", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.HistoryMap.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter1201 := range p.HistoryMap.Iter() {
      Kiter1202, Viter1203 := Miter1201.Key().(ProductID), Miter1201.Value().(*ItemHistory)
      err = oprot.WriteString(string(Kiter1202))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter1202", "", err); }
      err = Viter1203.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ItemHistory", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "historyMap", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemHistoryResult) WriteFieldHistoryMap(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ItemHistoryResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.UnavailablePids != nil {
    err = oprot.WriteFieldBegin("unavailablePids", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "unavailablePids", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.UnavailablePids.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1204 := range p.UnavailablePids.Iter() {
      Iter1205 := Iter1204.(ProductID)
      err = oprot.WriteString(string(Iter1205))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1205", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "unavailablePids", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemHistoryResult) WriteFieldUnavailablePids(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ItemHistoryResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *ItemHistoryResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ItemHistoryResult) TStructName() string {
  return "ItemHistoryResult"
}

func (p *ItemHistoryResult) ThriftName() string {
  return "ItemHistoryResult"
}

func (p *ItemHistoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemHistoryResult(%+v)", *p)
}

func (p *ItemHistoryResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ItemHistoryResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.HistoryMap.CompareTo(data.HistoryMap); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.UnavailablePids.CompareTo(data.UnavailablePids); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ItemHistoryResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.HistoryMap
  case 2: return p.UnavailablePids
  case 3: return p.BaseResult
  }
  return nil
}

func (p *ItemHistoryResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("historyMap", thrift.MAP, 1),
    thrift.NewTField("unavailablePids", thrift.LIST, 2),
    thrift.NewTField("baseResult", thrift.STRUCT, 3),
    })
}

/**
 * Attributes:
 *  - AttributeName
 *  - DataType
 *  - IsMultivalued
 *  - HasGroup
 *  - GroupName
 *  - Tags
 */
type AttributeDefinition struct {
  thrift.TStruct
  AttributeName string "attributeName"; // 1
  DataType DataType "dataType"; // 2
  IsMultivalued bool "isMultivalued"; // 3
  HasGroup bool "hasGroup"; // 4
  GroupName string "groupName"; // 5
  Tags thrift.TList "tags"; // 6
}

func NewAttributeDefinition() *AttributeDefinition {
  output := &AttributeDefinition{
    TStruct:thrift.NewTStruct("AttributeDefinition", []thrift.TField{
    thrift.NewTField("attributeName", thrift.STRING, 1),
    thrift.NewTField("dataType", thrift.I32, 2),
    thrift.NewTField("isMultivalued", thrift.BOOL, 3),
    thrift.NewTField("hasGroup", thrift.BOOL, 4),
    thrift.NewTField("groupName", thrift.STRING, 5),
    thrift.NewTField("tags", thrift.LIST, 6),
    }),
  }
  {
  }
  return output
}

func (p *AttributeDefinition) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "attributeName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "dataType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "isMultivalued" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "hasGroup" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "groupName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "tags" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AttributeDefinition) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1206, err1207 := iprot.ReadString()
  if err1207 != nil { return thrift.NewTProtocolExceptionReadField(1, "attributeName", p.ThriftName(), err1207); }
  p.AttributeName = v1206
  return err
}

func (p *AttributeDefinition) ReadFieldAttributeName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AttributeDefinition) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1208, err1209 := iprot.ReadI32()
  if err1209 != nil { return thrift.NewTProtocolExceptionReadField(2, "dataType", p.ThriftName(), err1209); }
  p.DataType = DataType(v1208)
  return err
}

func (p *AttributeDefinition) ReadFieldDataType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AttributeDefinition) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1210, err1211 := iprot.ReadBool()
  if err1211 != nil { return thrift.NewTProtocolExceptionReadField(3, "isMultivalued", p.ThriftName(), err1211); }
  p.IsMultivalued = v1210
  return err
}

func (p *AttributeDefinition) ReadFieldIsMultivalued(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *AttributeDefinition) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1212, err1213 := iprot.ReadBool()
  if err1213 != nil { return thrift.NewTProtocolExceptionReadField(4, "hasGroup", p.ThriftName(), err1213); }
  p.HasGroup = v1212
  return err
}

func (p *AttributeDefinition) ReadFieldHasGroup(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *AttributeDefinition) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1214, err1215 := iprot.ReadString()
  if err1215 != nil { return thrift.NewTProtocolExceptionReadField(5, "groupName", p.ThriftName(), err1215); }
  p.GroupName = v1214
  return err
}

func (p *AttributeDefinition) ReadFieldGroupName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *AttributeDefinition) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1221, _size1218, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Tags", "", err)
  }
  p.Tags = thrift.NewTList(_etype1221, _size1218)
  for _i1222:= 0; _i1222 < _size1218; _i1222++ {
    v1224, err1225 := iprot.ReadString()
    if err1225 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1223", "", err1225); }
    _elem1223 := v1224
    p.Tags.Push(_elem1223)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *AttributeDefinition) ReadFieldTags(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *AttributeDefinition) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AttributeDefinition")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AttributeDefinition) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("attributeName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "attributeName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.AttributeName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "attributeName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "attributeName", p.ThriftName(), err); }
  return err
}

func (p *AttributeDefinition) WriteFieldAttributeName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AttributeDefinition) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("dataType", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "dataType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.DataType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "dataType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "dataType", p.ThriftName(), err); }
  return err
}

func (p *AttributeDefinition) WriteFieldDataType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AttributeDefinition) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isMultivalued", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "isMultivalued", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsMultivalued))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "isMultivalued", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "isMultivalued", p.ThriftName(), err); }
  return err
}

func (p *AttributeDefinition) WriteFieldIsMultivalued(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *AttributeDefinition) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("hasGroup", thrift.BOOL, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "hasGroup", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.HasGroup))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "hasGroup", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "hasGroup", p.ThriftName(), err); }
  return err
}

func (p *AttributeDefinition) WriteFieldHasGroup(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *AttributeDefinition) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("groupName", thrift.STRING, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "groupName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.GroupName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "groupName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "groupName", p.ThriftName(), err); }
  return err
}

func (p *AttributeDefinition) WriteFieldGroupName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *AttributeDefinition) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Tags != nil {
    err = oprot.WriteFieldBegin("tags", thrift.LIST, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "tags", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Tags.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1226 := range p.Tags.Iter() {
      Iter1227 := Iter1226.(string)
      err = oprot.WriteString(string(Iter1227))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1227", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "tags", p.ThriftName(), err); }
  }
  return err
}

func (p *AttributeDefinition) WriteFieldTags(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *AttributeDefinition) TStructName() string {
  return "AttributeDefinition"
}

func (p *AttributeDefinition) ThriftName() string {
  return "AttributeDefinition"
}

func (p *AttributeDefinition) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AttributeDefinition(%+v)", *p)
}

func (p *AttributeDefinition) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AttributeDefinition)
  if !ok {
    return 0, false
  }
  if p.AttributeName != data.AttributeName {
    if p.AttributeName < data.AttributeName {
      return -1, true
    }
    return 1, true
  }
  if p.DataType != data.DataType {
    if p.DataType < data.DataType {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.IsMultivalued, data.IsMultivalued); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.HasGroup, data.HasGroup); cmp != 0 {
    return cmp, true
  }
  if p.GroupName != data.GroupName {
    if p.GroupName < data.GroupName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Tags.CompareTo(data.Tags); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *AttributeDefinition) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.AttributeName
  case 2: return p.DataType
  case 3: return p.IsMultivalued
  case 4: return p.HasGroup
  case 5: return p.GroupName
  case 6: return p.Tags
  }
  return nil
}

func (p *AttributeDefinition) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("attributeName", thrift.STRING, 1),
    thrift.NewTField("dataType", thrift.I32, 2),
    thrift.NewTField("isMultivalued", thrift.BOOL, 3),
    thrift.NewTField("hasGroup", thrift.BOOL, 4),
    thrift.NewTField("groupName", thrift.STRING, 5),
    thrift.NewTField("tags", thrift.LIST, 6),
    })
}

/**
 * Attributes:
 *  - VerticalName
 *  - BaseRequest
 */
type VerticalAttributeDefinitionRequest struct {
  thrift.TStruct
  VerticalName string "verticalName"; // 1
  BaseRequest *BaseRequest "baseRequest"; // 2
}

func NewVerticalAttributeDefinitionRequest() *VerticalAttributeDefinitionRequest {
  output := &VerticalAttributeDefinitionRequest{
    TStruct:thrift.NewTStruct("VerticalAttributeDefinitionRequest", []thrift.TField{
    thrift.NewTField("verticalName", thrift.STRING, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *VerticalAttributeDefinitionRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "verticalName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *VerticalAttributeDefinitionRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1228, err1229 := iprot.ReadString()
  if err1229 != nil { return thrift.NewTProtocolExceptionReadField(1, "verticalName", p.ThriftName(), err1229); }
  p.VerticalName = v1228
  return err
}

func (p *VerticalAttributeDefinitionRequest) ReadFieldVerticalName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *VerticalAttributeDefinitionRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err1232 := p.BaseRequest.Read(iprot)
  if err1232 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err1232); }
  return err
}

func (p *VerticalAttributeDefinitionRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *VerticalAttributeDefinitionRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("VerticalAttributeDefinitionRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *VerticalAttributeDefinitionRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("verticalName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.VerticalName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalName", p.ThriftName(), err); }
  return err
}

func (p *VerticalAttributeDefinitionRequest) WriteFieldVerticalName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *VerticalAttributeDefinitionRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *VerticalAttributeDefinitionRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *VerticalAttributeDefinitionRequest) TStructName() string {
  return "VerticalAttributeDefinitionRequest"
}

func (p *VerticalAttributeDefinitionRequest) ThriftName() string {
  return "VerticalAttributeDefinitionRequest"
}

func (p *VerticalAttributeDefinitionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerticalAttributeDefinitionRequest(%+v)", *p)
}

func (p *VerticalAttributeDefinitionRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*VerticalAttributeDefinitionRequest)
  if !ok {
    return 0, false
  }
  if p.VerticalName != data.VerticalName {
    if p.VerticalName < data.VerticalName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *VerticalAttributeDefinitionRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.VerticalName
  case 2: return p.BaseRequest
  }
  return nil
}

func (p *VerticalAttributeDefinitionRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("verticalName", thrift.STRING, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - AttributeDefinitions
 *  - BaseResult
 */
type VerticalAttributeDefinitionResult struct {
  thrift.TStruct
  AttributeDefinitions thrift.TList "attributeDefinitions"; // 1
  BaseResult *BaseResult "baseResult"; // 2
}

func NewVerticalAttributeDefinitionResult() *VerticalAttributeDefinitionResult {
  output := &VerticalAttributeDefinitionResult{
    TStruct:thrift.NewTStruct("VerticalAttributeDefinitionResult", []thrift.TField{
    thrift.NewTField("attributeDefinitions", thrift.LIST, 1),
    thrift.NewTField("baseResult", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *VerticalAttributeDefinitionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "attributeDefinitions" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *VerticalAttributeDefinitionResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1238, _size1235, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.AttributeDefinitions", "", err)
  }
  p.AttributeDefinitions = thrift.NewTList(_etype1238, _size1235)
  for _i1239:= 0; _i1239 < _size1235; _i1239++ {
    _elem1240 := NewAttributeDefinition()
    err1243 := _elem1240.Read(iprot)
    if err1243 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1240AttributeDefinition", err1243); }
    p.AttributeDefinitions.Push(_elem1240)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *VerticalAttributeDefinitionResult) ReadFieldAttributeDefinitions(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *VerticalAttributeDefinitionResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err1246 := p.BaseResult.Read(iprot)
  if err1246 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err1246); }
  return err
}

func (p *VerticalAttributeDefinitionResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *VerticalAttributeDefinitionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("VerticalAttributeDefinitionResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *VerticalAttributeDefinitionResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.AttributeDefinitions != nil {
    err = oprot.WriteFieldBegin("attributeDefinitions", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "attributeDefinitions", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.AttributeDefinitions.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1247 := range p.AttributeDefinitions.Iter() {
      Iter1248 := Iter1247.(*AttributeDefinition)
      err = Iter1248.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("AttributeDefinition", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "attributeDefinitions", p.ThriftName(), err); }
  }
  return err
}

func (p *VerticalAttributeDefinitionResult) WriteFieldAttributeDefinitions(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *VerticalAttributeDefinitionResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *VerticalAttributeDefinitionResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *VerticalAttributeDefinitionResult) TStructName() string {
  return "VerticalAttributeDefinitionResult"
}

func (p *VerticalAttributeDefinitionResult) ThriftName() string {
  return "VerticalAttributeDefinitionResult"
}

func (p *VerticalAttributeDefinitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerticalAttributeDefinitionResult(%+v)", *p)
}

func (p *VerticalAttributeDefinitionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*VerticalAttributeDefinitionResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.AttributeDefinitions.CompareTo(data.AttributeDefinitions); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *VerticalAttributeDefinitionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.AttributeDefinitions
  case 2: return p.BaseResult
  }
  return nil
}

func (p *VerticalAttributeDefinitionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("attributeDefinitions", thrift.LIST, 1),
    thrift.NewTField("baseResult", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Id
 *  - Vertical
 *  - ItemID
 *  - CategorizationInfo
 */
type ProductMetadata struct {
  thrift.TStruct
  Id string "id"; // 1
  Vertical string "vertical"; // 2
  ItemID string "itemID"; // 3
  CategorizationInfo *CategorizationInfo "categorizationInfo"; // 4
}

func NewProductMetadata() *ProductMetadata {
  output := &ProductMetadata{
    TStruct:thrift.NewTStruct("ProductMetadata", []thrift.TField{
    thrift.NewTField("id", thrift.STRING, 1),
    thrift.NewTField("vertical", thrift.STRING, 2),
    thrift.NewTField("itemID", thrift.STRING, 3),
    thrift.NewTField("categorizationInfo", thrift.STRUCT, 4),
    }),
  }
  {
  }
  return output
}

func (p *ProductMetadata) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "id" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "vertical" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "itemID" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "categorizationInfo" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductMetadata) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1249, err1250 := iprot.ReadString()
  if err1250 != nil { return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1250); }
  p.Id = v1249
  return err
}

func (p *ProductMetadata) ReadFieldId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ProductMetadata) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1251, err1252 := iprot.ReadString()
  if err1252 != nil { return thrift.NewTProtocolExceptionReadField(2, "vertical", p.ThriftName(), err1252); }
  p.Vertical = v1251
  return err
}

func (p *ProductMetadata) ReadFieldVertical(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ProductMetadata) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1253, err1254 := iprot.ReadString()
  if err1254 != nil { return thrift.NewTProtocolExceptionReadField(3, "itemID", p.ThriftName(), err1254); }
  p.ItemID = v1253
  return err
}

func (p *ProductMetadata) ReadFieldItemID(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *ProductMetadata) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CategorizationInfo = NewCms.ttypes.CategorizationInfo()
  err1257 := p.CategorizationInfo.Read(iprot)
  if err1257 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CategorizationInfoCategorizationInfo", err1257); }
  return err
}

func (p *ProductMetadata) ReadFieldCategorizationInfo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *ProductMetadata) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ProductMetadata")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductMetadata) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("id", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Id))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  return err
}

func (p *ProductMetadata) WriteFieldId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ProductMetadata) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("vertical", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "vertical", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Vertical))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "vertical", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "vertical", p.ThriftName(), err); }
  return err
}

func (p *ProductMetadata) WriteFieldVertical(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ProductMetadata) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("itemID", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "itemID", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ItemID))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "itemID", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "itemID", p.ThriftName(), err); }
  return err
}

func (p *ProductMetadata) WriteFieldItemID(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *ProductMetadata) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CategorizationInfo != nil {
    err = oprot.WriteFieldBegin("categorizationInfo", thrift.STRUCT, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "categorizationInfo", p.ThriftName(), err); }
    err = p.CategorizationInfo.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategorizationInfo", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "categorizationInfo", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductMetadata) WriteFieldCategorizationInfo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *ProductMetadata) TStructName() string {
  return "ProductMetadata"
}

func (p *ProductMetadata) ThriftName() string {
  return "ProductMetadata"
}

func (p *ProductMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductMetadata(%+v)", *p)
}

func (p *ProductMetadata) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ProductMetadata)
  if !ok {
    return 0, false
  }
  if p.Id != data.Id {
    if p.Id < data.Id {
      return -1, true
    }
    return 1, true
  }
  if p.Vertical != data.Vertical {
    if p.Vertical < data.Vertical {
      return -1, true
    }
    return 1, true
  }
  if p.ItemID != data.ItemID {
    if p.ItemID < data.ItemID {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.CategorizationInfo.CompareTo(data.CategorizationInfo); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ProductMetadata) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Id
  case 2: return p.Vertical
  case 3: return p.ItemID
  case 4: return p.CategorizationInfo
  }
  return nil
}

func (p *ProductMetadata) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("id", thrift.STRING, 1),
    thrift.NewTField("vertical", thrift.STRING, 2),
    thrift.NewTField("itemID", thrift.STRING, 3),
    thrift.NewTField("categorizationInfo", thrift.STRUCT, 4),
    })
}

/**
 * Attributes:
 *  - ProductIds
 *  - BaseRequest
 */
type MetaDataRequest struct {
  thrift.TStruct
  ProductIds thrift.TList "productIds"; // 1
  BaseRequest *BaseRequest "baseRequest"; // 2
}

func NewMetaDataRequest() *MetaDataRequest {
  output := &MetaDataRequest{
    TStruct:thrift.NewTStruct("MetaDataRequest", []thrift.TField{
    thrift.NewTField("productIds", thrift.LIST, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *MetaDataRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productIds" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MetaDataRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1263, _size1260, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductIds", "", err)
  }
  p.ProductIds = thrift.NewTList(_etype1263, _size1260)
  for _i1264:= 0; _i1264 < _size1260; _i1264++ {
    v1266, err1267 := iprot.ReadString()
    if err1267 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem1265", "", err1267); }
    _elem1265 := v1266
    p.ProductIds.Push(_elem1265)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *MetaDataRequest) ReadFieldProductIds(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MetaDataRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err1270 := p.BaseRequest.Read(iprot)
  if err1270 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err1270); }
  return err
}

func (p *MetaDataRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *MetaDataRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("MetaDataRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MetaDataRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductIds != nil {
    err = oprot.WriteFieldBegin("productIds", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIds", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ProductIds.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1271 := range p.ProductIds.Iter() {
      Iter1272 := Iter1271.(string)
      err = oprot.WriteString(string(Iter1272))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter1272", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIds", p.ThriftName(), err); }
  }
  return err
}

func (p *MetaDataRequest) WriteFieldProductIds(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MetaDataRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *MetaDataRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *MetaDataRequest) TStructName() string {
  return "MetaDataRequest"
}

func (p *MetaDataRequest) ThriftName() string {
  return "MetaDataRequest"
}

func (p *MetaDataRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaDataRequest(%+v)", *p)
}

func (p *MetaDataRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MetaDataRequest)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductIds.CompareTo(data.ProductIds); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *MetaDataRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductIds
  case 2: return p.BaseRequest
  }
  return nil
}

func (p *MetaDataRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productIds", thrift.LIST, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - ProductMetadataMap
 *  - BaseResult
 */
type MetaDataResponse struct {
  thrift.TStruct
  ProductMetadataMap thrift.TMap "productMetadataMap"; // 1
  BaseResult *BaseResult "baseResult"; // 2
}

func NewMetaDataResponse() *MetaDataResponse {
  output := &MetaDataResponse{
    TStruct:thrift.NewTStruct("MetaDataResponse", []thrift.TField{
    thrift.NewTField("productMetadataMap", thrift.MAP, 1),
    thrift.NewTField("baseResult", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *MetaDataResponse) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productMetadataMap" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *MetaDataResponse) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype1276, _vtype1277, _size1275, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductMetadataMap", "", err)
  }
  p.ProductMetadataMap = thrift.NewTMap(_ktype1276, _vtype1277, _size1275)
  for _i1279:= 0; _i1279 < _size1275; _i1279++ {
    v1282, err1283 := iprot.ReadString()
    if err1283 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key1280", "", err1283); }
    _key1280 := v1282
    _val1281 := NewProductMetadata()
    err1286 := _val1281.Read(iprot)
    if err1286 != nil { return thrift.NewTProtocolExceptionReadStruct("_val1281ProductMetadata", err1286); }
    p.ProductMetadataMap.Set(_key1280, _val1281)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *MetaDataResponse) ReadFieldProductMetadataMap(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *MetaDataResponse) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err1289 := p.BaseResult.Read(iprot)
  if err1289 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err1289); }
  return err
}

func (p *MetaDataResponse) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *MetaDataResponse) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("MetaDataResponse")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *MetaDataResponse) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductMetadataMap != nil {
    err = oprot.WriteFieldBegin("productMetadataMap", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productMetadataMap", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.ProductMetadataMap.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter1290 := range p.ProductMetadataMap.Iter() {
      Kiter1291, Viter1292 := Miter1290.Key().(string), Miter1290.Value().(*ProductMetadata)
      err = oprot.WriteString(string(Kiter1291))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter1291", "", err); }
      err = Viter1292.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductMetadata", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productMetadataMap", p.ThriftName(), err); }
  }
  return err
}

func (p *MetaDataResponse) WriteFieldProductMetadataMap(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *MetaDataResponse) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *MetaDataResponse) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *MetaDataResponse) TStructName() string {
  return "MetaDataResponse"
}

func (p *MetaDataResponse) ThriftName() string {
  return "MetaDataResponse"
}

func (p *MetaDataResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaDataResponse(%+v)", *p)
}

func (p *MetaDataResponse) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*MetaDataResponse)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductMetadataMap.CompareTo(data.ProductMetadataMap); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *MetaDataResponse) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductMetadataMap
  case 2: return p.BaseResult
  }
  return nil
}

func (p *MetaDataResponse) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productMetadataMap", thrift.MAP, 1),
    thrift.NewTField("baseResult", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Amount
 *  - BaseRequest
 */
type ProductIdForEGVRequest struct {
  thrift.TStruct
  Amount int32 "amount"; // 1
  BaseRequest *BaseRequest "baseRequest"; // 2
}

func NewProductIdForEGVRequest() *ProductIdForEGVRequest {
  output := &ProductIdForEGVRequest{
    TStruct:thrift.NewTStruct("ProductIdForEGVRequest", []thrift.TField{
    thrift.NewTField("amount", thrift.I32, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *ProductIdForEGVRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "amount" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductIdForEGVRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1293, err1294 := iprot.ReadI32()
  if err1294 != nil { return thrift.NewTProtocolExceptionReadField(1, "amount", p.ThriftName(), err1294); }
  p.Amount = v1293
  return err
}

func (p *ProductIdForEGVRequest) ReadFieldAmount(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ProductIdForEGVRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err1297 := p.BaseRequest.Read(iprot)
  if err1297 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err1297); }
  return err
}

func (p *ProductIdForEGVRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ProductIdForEGVRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ProductIdForEGVRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductIdForEGVRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("amount", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "amount", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Amount))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "amount", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "amount", p.ThriftName(), err); }
  return err
}

func (p *ProductIdForEGVRequest) WriteFieldAmount(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ProductIdForEGVRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductIdForEGVRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ProductIdForEGVRequest) TStructName() string {
  return "ProductIdForEGVRequest"
}

func (p *ProductIdForEGVRequest) ThriftName() string {
  return "ProductIdForEGVRequest"
}

func (p *ProductIdForEGVRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductIdForEGVRequest(%+v)", *p)
}

func (p *ProductIdForEGVRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ProductIdForEGVRequest)
  if !ok {
    return 0, false
  }
  if p.Amount != data.Amount {
    if p.Amount < data.Amount {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ProductIdForEGVRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Amount
  case 2: return p.BaseRequest
  }
  return nil
}

func (p *ProductIdForEGVRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("amount", thrift.I32, 1),
    thrift.NewTField("baseRequest", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Id
 *  - BaseResult
 */
type ProductIdForEGVResponse struct {
  thrift.TStruct
  Id string "id"; // 1
  BaseResult *BaseResult "baseResult"; // 2
}

func NewProductIdForEGVResponse() *ProductIdForEGVResponse {
  output := &ProductIdForEGVResponse{
    TStruct:thrift.NewTStruct("ProductIdForEGVResponse", []thrift.TField{
    thrift.NewTField("id", thrift.STRING, 1),
    thrift.NewTField("baseResult", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *ProductIdForEGVResponse) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "id" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductIdForEGVResponse) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1298, err1299 := iprot.ReadString()
  if err1299 != nil { return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1299); }
  p.Id = v1298
  return err
}

func (p *ProductIdForEGVResponse) ReadFieldId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ProductIdForEGVResponse) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err1302 := p.BaseResult.Read(iprot)
  if err1302 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err1302); }
  return err
}

func (p *ProductIdForEGVResponse) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ProductIdForEGVResponse) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ProductIdForEGVResponse")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ProductIdForEGVResponse) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("id", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Id))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  return err
}

func (p *ProductIdForEGVResponse) WriteFieldId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ProductIdForEGVResponse) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *ProductIdForEGVResponse) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ProductIdForEGVResponse) TStructName() string {
  return "ProductIdForEGVResponse"
}

func (p *ProductIdForEGVResponse) ThriftName() string {
  return "ProductIdForEGVResponse"
}

func (p *ProductIdForEGVResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductIdForEGVResponse(%+v)", *p)
}

func (p *ProductIdForEGVResponse) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ProductIdForEGVResponse)
  if !ok {
    return 0, false
  }
  if p.Id != data.Id {
    if p.Id < data.Id {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ProductIdForEGVResponse) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Id
  case 2: return p.BaseResult
  }
  return nil
}

func (p *ProductIdForEGVResponse) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("id", thrift.STRING, 1),
    thrift.NewTField("baseResult", thrift.STRUCT, 2),
    })
}

/**
 * Attributes:
 *  - Id
 *  - Namspace
 *  - EntityType
 */
type EntityID struct {
  thrift.TStruct
  Id string "id"; // 1
  Namspace string "namspace"; // 2
  EntityType EntityType "entityType"; // 3
}

func NewEntityID() *EntityID {
  output := &EntityID{
    TStruct:thrift.NewTStruct("EntityID", []thrift.TField{
    thrift.NewTField("id", thrift.STRING, 1),
    thrift.NewTField("namspace", thrift.STRING, 2),
    thrift.NewTField("entityType", thrift.I32, 3),
    }),
  }
  {
  }
  return output
}

func (p *EntityID) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "id" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "namspace" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "entityType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EntityID) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1303, err1304 := iprot.ReadString()
  if err1304 != nil { return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1304); }
  p.Id = v1303
  return err
}

func (p *EntityID) ReadFieldId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *EntityID) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1305, err1306 := iprot.ReadString()
  if err1306 != nil { return thrift.NewTProtocolExceptionReadField(2, "namspace", p.ThriftName(), err1306); }
  p.Namspace = v1305
  return err
}

func (p *EntityID) ReadFieldNamspace(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *EntityID) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1307, err1308 := iprot.ReadI32()
  if err1308 != nil { return thrift.NewTProtocolExceptionReadField(3, "entityType", p.ThriftName(), err1308); }
  p.EntityType = EntityType(v1307)
  return err
}

func (p *EntityID) ReadFieldEntityType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *EntityID) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("EntityID")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EntityID) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("id", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Id))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err); }
  return err
}

func (p *EntityID) WriteFieldId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *EntityID) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("namspace", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "namspace", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Namspace))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "namspace", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "namspace", p.ThriftName(), err); }
  return err
}

func (p *EntityID) WriteFieldNamspace(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *EntityID) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("entityType", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "entityType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.EntityType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "entityType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "entityType", p.ThriftName(), err); }
  return err
}

func (p *EntityID) WriteFieldEntityType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *EntityID) TStructName() string {
  return "EntityID"
}

func (p *EntityID) ThriftName() string {
  return "EntityID"
}

func (p *EntityID) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntityID(%+v)", *p)
}

func (p *EntityID) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EntityID)
  if !ok {
    return 0, false
  }
  if p.Id != data.Id {
    if p.Id < data.Id {
      return -1, true
    }
    return 1, true
  }
  if p.Namspace != data.Namspace {
    if p.Namspace < data.Namspace {
      return -1, true
    }
    return 1, true
  }
  if p.EntityType != data.EntityType {
    if p.EntityType < data.EntityType {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *EntityID) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Id
  case 2: return p.Namspace
  case 3: return p.EntityType
  }
  return nil
}

func (p *EntityID) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("id", thrift.STRING, 1),
    thrift.NewTField("namspace", thrift.STRING, 2),
    thrift.NewTField("entityType", thrift.I32, 3),
    })
}

/**
 * Attributes:
 *  - EntityType
 *  - SearchableAttributeData
 *  - Namspace
 *  - BaseRequest
 */
type EntitySearchRequest struct {
  thrift.TStruct
  EntityType EntityType "entityType"; // 1
  SearchableAttributeData thrift.TMap "searchableAttributeData"; // 2
  Namspace string "namspace"; // 3
  BaseRequest *BaseRequest "baseRequest"; // 4
}

func NewEntitySearchRequest() *EntitySearchRequest {
  output := &EntitySearchRequest{
    TStruct:thrift.NewTStruct("EntitySearchRequest", []thrift.TField{
    thrift.NewTField("entityType", thrift.I32, 1),
    thrift.NewTField("searchableAttributeData", thrift.MAP, 2),
    thrift.NewTField("namspace", thrift.STRING, 3),
    thrift.NewTField("baseRequest", thrift.STRUCT, 4),
    }),
  }
  {
  }
  return output
}

func (p *EntitySearchRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "entityType" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "searchableAttributeData" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "namspace" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "baseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EntitySearchRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1309, err1310 := iprot.ReadI32()
  if err1310 != nil { return thrift.NewTProtocolExceptionReadField(1, "entityType", p.ThriftName(), err1310); }
  p.EntityType = EntityType(v1309)
  return err
}

func (p *EntitySearchRequest) ReadFieldEntityType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *EntitySearchRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype1314, _vtype1315, _size1313, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.SearchableAttributeData", "", err)
  }
  p.SearchableAttributeData = thrift.NewTMap(_ktype1314, _vtype1315, _size1313)
  for _i1317:= 0; _i1317 < _size1313; _i1317++ {
    v1320, err1321 := iprot.ReadString()
    if err1321 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key1318", "", err1321); }
    _key1318 := v1320
    _val1319 := NewCms.ttypes.Attribute()
    err1324 := _val1319.Read(iprot)
    if err1324 != nil { return thrift.NewTProtocolExceptionReadStruct("_val1319Attribute", err1324); }
    p.SearchableAttributeData.Set(_key1318, _val1319)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *EntitySearchRequest) ReadFieldSearchableAttributeData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *EntitySearchRequest) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1325, err1326 := iprot.ReadString()
  if err1326 != nil { return thrift.NewTProtocolExceptionReadField(3, "namspace", p.ThriftName(), err1326); }
  p.Namspace = v1325
  return err
}

func (p *EntitySearchRequest) ReadFieldNamspace(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *EntitySearchRequest) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseRequest = NewBaseRequest()
  err1329 := p.BaseRequest.Read(iprot)
  if err1329 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseRequestBaseRequest", err1329); }
  return err
}

func (p *EntitySearchRequest) ReadFieldBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *EntitySearchRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("EntitySearchRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EntitySearchRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("entityType", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "entityType", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.EntityType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "entityType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "entityType", p.ThriftName(), err); }
  return err
}

func (p *EntitySearchRequest) WriteFieldEntityType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *EntitySearchRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SearchableAttributeData != nil {
    err = oprot.WriteFieldBegin("searchableAttributeData", thrift.MAP, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "searchableAttributeData", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.SearchableAttributeData.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter1330 := range p.SearchableAttributeData.Iter() {
      Kiter1331, Viter1332 := Miter1330.Key().(string), Miter1330.Value().(*Attribute)
      err = oprot.WriteString(string(Kiter1331))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter1331", "", err); }
      err = Viter1332.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Attribute", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "searchableAttributeData", p.ThriftName(), err); }
  }
  return err
}

func (p *EntitySearchRequest) WriteFieldSearchableAttributeData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *EntitySearchRequest) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("namspace", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "namspace", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Namspace))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "namspace", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "namspace", p.ThriftName(), err); }
  return err
}

func (p *EntitySearchRequest) WriteFieldNamspace(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *EntitySearchRequest) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseRequest != nil {
    err = oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "baseRequest", p.ThriftName(), err); }
    err = p.BaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "baseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *EntitySearchRequest) WriteFieldBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *EntitySearchRequest) TStructName() string {
  return "EntitySearchRequest"
}

func (p *EntitySearchRequest) ThriftName() string {
  return "EntitySearchRequest"
}

func (p *EntitySearchRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntitySearchRequest(%+v)", *p)
}

func (p *EntitySearchRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EntitySearchRequest)
  if !ok {
    return 0, false
  }
  if p.EntityType != data.EntityType {
    if p.EntityType < data.EntityType {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.SearchableAttributeData.CompareTo(data.SearchableAttributeData); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Namspace != data.Namspace {
    if p.Namspace < data.Namspace {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.BaseRequest.CompareTo(data.BaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *EntitySearchRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.EntityType
  case 2: return p.SearchableAttributeData
  case 3: return p.Namspace
  case 4: return p.BaseRequest
  }
  return nil
}

func (p *EntitySearchRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("entityType", thrift.I32, 1),
    thrift.NewTField("searchableAttributeData", thrift.MAP, 2),
    thrift.NewTField("namspace", thrift.STRING, 3),
    thrift.NewTField("baseRequest", thrift.STRUCT, 4),
    })
}

/**
 * Attributes:
 *  - MatchedEntities
 *  - BaseResult
 */
type EntitySearchResult struct {
  thrift.TStruct
  MatchedEntities thrift.TList "matchedEntities"; // 1
  BaseResult *BaseResult "baseResult"; // 2
}

func NewEntitySearchResult() *EntitySearchResult {
  output := &EntitySearchResult{
    TStruct:thrift.NewTStruct("EntitySearchResult", []thrift.TField{
    thrift.NewTField("matchedEntities", thrift.LIST, 1),
    thrift.NewTField("baseResult", thrift.STRUCT, 2),
    }),
  }
  {
  }
  return output
}

func (p *EntitySearchResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "matchedEntities" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "baseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *EntitySearchResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype1338, _size1335, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.MatchedEntities", "", err)
  }
  p.MatchedEntities = thrift.NewTList(_etype1338, _size1335)
  for _i1339:= 0; _i1339 < _size1335; _i1339++ {
    _elem1340 := NewEntityID()
    err1343 := _elem1340.Read(iprot)
    if err1343 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem1340EntityID", err1343); }
    p.MatchedEntities.Push(_elem1340)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *EntitySearchResult) ReadFieldMatchedEntities(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *EntitySearchResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.BaseResult = NewBaseResult()
  err1346 := p.BaseResult.Read(iprot)
  if err1346 != nil { return thrift.NewTProtocolExceptionReadStruct("p.BaseResultBaseResult", err1346); }
  return err
}

func (p *EntitySearchResult) ReadFieldBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *EntitySearchResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("EntitySearchResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *EntitySearchResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.MatchedEntities != nil {
    err = oprot.WriteFieldBegin("matchedEntities", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "matchedEntities", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.MatchedEntities.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter1347 := range p.MatchedEntities.Iter() {
      Iter1348 := Iter1347.(*EntityID)
      err = Iter1348.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("EntityID", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "matchedEntities", p.ThriftName(), err); }
  }
  return err
}

func (p *EntitySearchResult) WriteFieldMatchedEntities(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *EntitySearchResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.BaseResult != nil {
    err = oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseResult", p.ThriftName(), err); }
    err = p.BaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("BaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "baseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *EntitySearchResult) WriteFieldBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *EntitySearchResult) TStructName() string {
  return "EntitySearchResult"
}

func (p *EntitySearchResult) ThriftName() string {
  return "EntitySearchResult"
}

func (p *EntitySearchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntitySearchResult(%+v)", *p)
}

func (p *EntitySearchResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*EntitySearchResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.MatchedEntities.CompareTo(data.MatchedEntities); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.BaseResult.CompareTo(data.BaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *EntitySearchResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.MatchedEntities
  case 2: return p.BaseResult
  }
  return nil
}

func (p *EntitySearchResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("matchedEntities", thrift.LIST, 1),
    thrift.NewTField("baseResult", thrift.STRUCT, 2),
    })
}

func init() {
}

