/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

/*
	Rename the package to spcms from sp-cms. There should no special character in package name
	The spcms thrift files are configured to be sp-cms
*/
package spcms;

import (
        "thrift"
        "fmt"
)

import (
        "os"
)


type ICMSSPService interface {
  GetSPCmsVerticalVersions() (retval1349 *CmsVerticalVersionsResult, cmsException *CMSException, err os.Error)
  /**
   * Parameters:
   *  - DeltaRequest
   */
  GetSPVerticalDelta(deltaRequest *DeltaRequest) (retval1350 *DeltaResult, cmsException *CMSException, err os.Error)
  /**
   * Parameters:
   *  - VerticalName
   */
  GetSPVerticalVersion(verticalName string) (retval1351 *VerticalVersionResult, cmsException *CMSException, err os.Error)
  /**
   * Parameters:
   *  - Request
   */
  GetProductWithListings(request *ProductInfoRequest) (retval1352 *ProductListingsResult, cmsException *CMSException, err os.Error)
  /**
   * Parameters:
   *  - Request
   */
  GetProductInfo(request *ProductInfoRequest) (retval1353 *ProductInfoResult, cmsException *CMSException, err os.Error)
  /**
   * Parameters:
   *  - Request
   */
  GetListings(request *ListingRequest) (retval1354 *ListingResult, cmsException *CMSException, err os.Error)
  /**
   * Parameters:
   *  - Request
   */
  GetListingDetail(request *ListingIDRequest) (retval1355 *ListingProductResult, cmsException *CMSException, err os.Error)
  /**
   * Parameters:
   *  - Amount
   */
  GetListingIdfromEGV(amount int32) (retval1356 ListingID, cmsException *CMSException, err os.Error)
  /**
   * Parameters:
   *  - Request
   */
  GetProductViews(request *ViewRequest) (retval1357 *ViewResult, cmsException *CMSException, err os.Error)
  /**
   * Parameters:
   *  - Request
   */
  GetViewDefinition(request *ViewDefinitionRequest) (retval1358 *ViewDefinitionResult, cmsException *CMSException, err os.Error)
  /**
   * Parameters:
   *  - ContributorInfoRequest
   */
  GetContributorInfo(contributorInfoRequest *ContributorInfoRequest) (retval1359 *ContributorInfoResult, spcmsException *SPCMSException, err os.Error)
  /**
   * Parameters:
   *  - ItemsRequest
   */
  GetItems(itemsRequest *ItemsRequest) (retval1360 *ItemsResult, spcmsException *SPCMSException, err os.Error)
  /**
   * Parameters:
   *  - ItemDetailsRequest
   */
  GetItemDetails(itemDetailsRequest *ItemDetailsRequest) (retval1361 *ItemDetailsResult, spcmsException *SPCMSException, err os.Error)
  /**
   * Parameters:
   *  - CategoryTreeRequest
   */
  GetCategorizationTree(categoryTreeRequest *CategoryTreeRequest) (retval1362 *CategoryTreeResult, spcmsException *SPCMSException, err os.Error)
  /**
   * Parameters:
   *  - CategoryNodeInfoRequest
   */
  GetCategoryNodeInfo(categoryNodeInfoRequest *CategoryNodeInfoRequest) (retval1363 *CategoryNodeInfoResult, spcmsException *SPCMSException, err os.Error)
  /**
   * Parameters:
   *  - CategoryPathRequest
   */
  GetCategoryPath(categoryPathRequest *CategoryPathRequest) (retval1364 *CategoryPathResult, spcmsException *SPCMSException, err os.Error)
  /**
   * Parameters:
   *  - ItemHistoryRequest
   */
  GetProductItemHistory(itemHistoryRequest *ItemHistoryRequest) (retval1365 *ItemHistoryResult, spcmsException *SPCMSException, err os.Error)
  /**
   * Parameters:
   *  - VerticalAttributeDefinitionRequest
   */
  GetVerticalAttributeDefinition(verticalAttributeDefinitionRequest *VerticalAttributeDefinitionRequest) (retval1366 *VerticalAttributeDefinitionResult, spcmsException *SPCMSException, err os.Error)
  /**
   * Parameters:
   *  - MetaDataRequest
   */
  GetMetaData(metaDataRequest *MetaDataRequest) (retval1367 *MetaDataResponse, spcmsException *SPCMSException, err os.Error)
  /**
   * Parameters:
   *  - EntitySearchRequest
   */
  SearchEntity(entitySearchRequest *EntitySearchRequest) (retval1368 *EntitySearchResult, spcmsException *SPCMSException, err os.Error)
  /**
   * Parameters:
   *  - ProductIdForEGVRequest
   */
  GetProductIDForEGV(productIdForEGVRequest *ProductIdForEGVRequest) (retval1369 *ProductIdForEGVResponse, spcmsException *SPCMSException, err os.Error)
}

type CMSSPServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewCMSSPServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CMSSPServiceClient {
  return &CMSSPServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewCMSSPServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CMSSPServiceClient {
  return &CMSSPServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *CMSSPServiceClient) GetSPCmsVerticalVersions() (retval1370 *CmsVerticalVersionsResult, cmsException *CMSException, err os.Error) {
  err = p.SendGetSPCmsVerticalVersions()
  if err != nil { return }
  return p.RecvGetSPCmsVerticalVersions()
}

func (p *CMSSPServiceClient) SendGetSPCmsVerticalVersions()(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getSPCmsVerticalVersions", thrift.CALL, p.SeqId)
  args1371 := NewGetSPCmsVerticalVersionsArgs()
  err = args1371.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetSPCmsVerticalVersions() (value *CmsVerticalVersionsResult, cmsException *CMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1373 := thrift.NewTApplicationExceptionDefault()
    error1374, err := error1373.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1374
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1372 := NewGetSPCmsVerticalVersionsResult()
  err = result1372.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1372.Success
  if result1372.CmsException != nil {
    cmsException = result1372.CmsException
  }
  return
}

/**
 * Parameters:
 *  - DeltaRequest
 */
func (p *CMSSPServiceClient) GetSPVerticalDelta(deltaRequest *DeltaRequest) (retval1375 *DeltaResult, cmsException *CMSException, err os.Error) {
  err = p.SendGetSPVerticalDelta(deltaRequest)
  if err != nil { return }
  return p.RecvGetSPVerticalDelta()
}

func (p *CMSSPServiceClient) SendGetSPVerticalDelta(deltaRequest *DeltaRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getSPVerticalDelta", thrift.CALL, p.SeqId)
  args1376 := NewGetSPVerticalDeltaArgs()
  args1376.DeltaRequest = deltaRequest
  err = args1376.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetSPVerticalDelta() (value *DeltaResult, cmsException *CMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1378 := thrift.NewTApplicationExceptionDefault()
    error1379, err := error1378.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1379
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1377 := NewGetSPVerticalDeltaResult()
  err = result1377.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1377.Success
  if result1377.CmsException != nil {
    cmsException = result1377.CmsException
  }
  return
}

/**
 * Parameters:
 *  - VerticalName
 */
func (p *CMSSPServiceClient) GetSPVerticalVersion(verticalName string) (retval1380 *VerticalVersionResult, cmsException *CMSException, err os.Error) {
  err = p.SendGetSPVerticalVersion(verticalName)
  if err != nil { return }
  return p.RecvGetSPVerticalVersion()
}

func (p *CMSSPServiceClient) SendGetSPVerticalVersion(verticalName string)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getSPVerticalVersion", thrift.CALL, p.SeqId)
  args1381 := NewGetSPVerticalVersionArgs()
  args1381.VerticalName = verticalName
  err = args1381.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetSPVerticalVersion() (value *VerticalVersionResult, cmsException *CMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1383 := thrift.NewTApplicationExceptionDefault()
    error1384, err := error1383.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1384
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1382 := NewGetSPVerticalVersionResult()
  err = result1382.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1382.Success
  if result1382.CmsException != nil {
    cmsException = result1382.CmsException
  }
  return
}

/**
 * Parameters:
 *  - Request
 */
func (p *CMSSPServiceClient) GetProductWithListings(request *ProductInfoRequest) (retval1385 *ProductListingsResult, cmsException *CMSException, err os.Error) {
  err = p.SendGetProductWithListings(request)
  if err != nil { return }
  return p.RecvGetProductWithListings()
}

func (p *CMSSPServiceClient) SendGetProductWithListings(request *ProductInfoRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getProductWithListings", thrift.CALL, p.SeqId)
  args1386 := NewGetProductWithListingsArgs()
  args1386.Request = request
  err = args1386.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetProductWithListings() (value *ProductListingsResult, cmsException *CMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1388 := thrift.NewTApplicationExceptionDefault()
    error1389, err := error1388.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1389
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1387 := NewGetProductWithListingsResult()
  err = result1387.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1387.Success
  if result1387.CmsException != nil {
    cmsException = result1387.CmsException
  }
  return
}

/**
 * Parameters:
 *  - Request
 */
func (p *CMSSPServiceClient) GetProductInfo(request *ProductInfoRequest) (retval1390 *ProductInfoResult, cmsException *CMSException, err os.Error) {
  err = p.SendGetProductInfo(request)
  if err != nil { return }
  return p.RecvGetProductInfo()
}

func (p *CMSSPServiceClient) SendGetProductInfo(request *ProductInfoRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getProductInfo", thrift.CALL, p.SeqId)
  args1391 := NewGetProductInfoArgs()
  args1391.Request = request
  err = args1391.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetProductInfo() (value *ProductInfoResult, cmsException *CMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1393 := thrift.NewTApplicationExceptionDefault()
    error1394, err := error1393.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1394
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1392 := NewGetProductInfoResult()
  err = result1392.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1392.Success
  if result1392.CmsException != nil {
    cmsException = result1392.CmsException
  }
  return
}

/**
 * Parameters:
 *  - Request
 */
func (p *CMSSPServiceClient) GetListings(request *ListingRequest) (retval1395 *ListingResult, cmsException *CMSException, err os.Error) {
  err = p.SendGetListings(request)
  if err != nil { return }
  return p.RecvGetListings()
}

func (p *CMSSPServiceClient) SendGetListings(request *ListingRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getListings", thrift.CALL, p.SeqId)
  args1396 := NewGetListingsArgs()
  args1396.Request = request
  err = args1396.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetListings() (value *ListingResult, cmsException *CMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1398 := thrift.NewTApplicationExceptionDefault()
    error1399, err := error1398.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1399
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1397 := NewGetListingsResult()
  err = result1397.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1397.Success
  if result1397.CmsException != nil {
    cmsException = result1397.CmsException
  }
  return
}

/**
 * Parameters:
 *  - Request
 */
func (p *CMSSPServiceClient) GetListingDetail(request *ListingIDRequest) (retval1400 *ListingProductResult, cmsException *CMSException, err os.Error) {
  err = p.SendGetListingDetail(request)
  if err != nil { return }
  return p.RecvGetListingDetail()
}

func (p *CMSSPServiceClient) SendGetListingDetail(request *ListingIDRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getListingDetail", thrift.CALL, p.SeqId)
  args1401 := NewGetListingDetailArgs()
  args1401.Request = request
  err = args1401.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetListingDetail() (value *ListingProductResult, cmsException *CMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1403 := thrift.NewTApplicationExceptionDefault()
    error1404, err := error1403.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1404
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1402 := NewGetListingDetailResult()
  err = result1402.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1402.Success
  if result1402.CmsException != nil {
    cmsException = result1402.CmsException
  }
  return
}

/**
 * Parameters:
 *  - Amount
 */
func (p *CMSSPServiceClient) GetListingIdfromEGV(amount int32) (retval1405 ListingID, cmsException *CMSException, err os.Error) {
  err = p.SendGetListingIdfromEGV(amount)
  if err != nil { return }
  return p.RecvGetListingIdfromEGV()
}

func (p *CMSSPServiceClient) SendGetListingIdfromEGV(amount int32)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getListingIdfromEGV", thrift.CALL, p.SeqId)
  args1406 := NewGetListingIdfromEGVArgs()
  args1406.Amount = amount
  err = args1406.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetListingIdfromEGV() (value ListingID, cmsException *CMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1408 := thrift.NewTApplicationExceptionDefault()
    error1409, err := error1408.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1409
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1407 := NewGetListingIdfromEGVResult()
  err = result1407.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1407.Success
  if result1407.CmsException != nil {
    cmsException = result1407.CmsException
  }
  return
}

/**
 * Parameters:
 *  - Request
 */
func (p *CMSSPServiceClient) GetProductViews(request *ViewRequest) (retval1410 *ViewResult, cmsException *CMSException, err os.Error) {
  err = p.SendGetProductViews(request)
  if err != nil { return }
  return p.RecvGetProductViews()
}

func (p *CMSSPServiceClient) SendGetProductViews(request *ViewRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getProductViews", thrift.CALL, p.SeqId)
  args1411 := NewGetProductViewsArgs()
  args1411.Request = request
  err = args1411.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetProductViews() (value *ViewResult, cmsException *CMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1413 := thrift.NewTApplicationExceptionDefault()
    error1414, err := error1413.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1414
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1412 := NewGetProductViewsResult()
  err = result1412.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1412.Success
  if result1412.CmsException != nil {
    cmsException = result1412.CmsException
  }
  return
}

/**
 * Parameters:
 *  - Request
 */
func (p *CMSSPServiceClient) GetViewDefinition(request *ViewDefinitionRequest) (retval1415 *ViewDefinitionResult, cmsException *CMSException, err os.Error) {
  err = p.SendGetViewDefinition(request)
  if err != nil { return }
  return p.RecvGetViewDefinition()
}

func (p *CMSSPServiceClient) SendGetViewDefinition(request *ViewDefinitionRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getViewDefinition", thrift.CALL, p.SeqId)
  args1416 := NewGetViewDefinitionArgs()
  args1416.Request = request
  err = args1416.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetViewDefinition() (value *ViewDefinitionResult, cmsException *CMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1418 := thrift.NewTApplicationExceptionDefault()
    error1419, err := error1418.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1419
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1417 := NewGetViewDefinitionResult()
  err = result1417.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1417.Success
  if result1417.CmsException != nil {
    cmsException = result1417.CmsException
  }
  return
}

/**
 * Parameters:
 *  - ContributorInfoRequest
 */
func (p *CMSSPServiceClient) GetContributorInfo(contributorInfoRequest *ContributorInfoRequest) (retval1420 *ContributorInfoResult, spcmsException *SPCMSException, err os.Error) {
  err = p.SendGetContributorInfo(contributorInfoRequest)
  if err != nil { return }
  return p.RecvGetContributorInfo()
}

func (p *CMSSPServiceClient) SendGetContributorInfo(contributorInfoRequest *ContributorInfoRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getContributorInfo", thrift.CALL, p.SeqId)
  args1421 := NewGetContributorInfoArgs()
  args1421.ContributorInfoRequest = contributorInfoRequest
  err = args1421.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetContributorInfo() (value *ContributorInfoResult, spcmsException *SPCMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1423 := thrift.NewTApplicationExceptionDefault()
    error1424, err := error1423.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1424
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1422 := NewGetContributorInfoResult()
  err = result1422.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1422.Success
  if result1422.SpcmsException != nil {
    spcmsException = result1422.SpcmsException
  }
  return
}

/**
 * Parameters:
 *  - ItemsRequest
 */
func (p *CMSSPServiceClient) GetItems(itemsRequest *ItemsRequest) (retval1425 *ItemsResult, spcmsException *SPCMSException, err os.Error) {
  err = p.SendGetItems(itemsRequest)
  if err != nil { return }
  return p.RecvGetItems()
}

func (p *CMSSPServiceClient) SendGetItems(itemsRequest *ItemsRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getItems", thrift.CALL, p.SeqId)
  args1426 := NewGetItemsArgs()
  args1426.ItemsRequest = itemsRequest
  err = args1426.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetItems() (value *ItemsResult, spcmsException *SPCMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1428 := thrift.NewTApplicationExceptionDefault()
    error1429, err := error1428.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1429
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1427 := NewGetItemsResult()
  err = result1427.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1427.Success
  if result1427.SpcmsException != nil {
    spcmsException = result1427.SpcmsException
  }
  return
}

/**
 * Parameters:
 *  - ItemDetailsRequest
 */
func (p *CMSSPServiceClient) GetItemDetails(itemDetailsRequest *ItemDetailsRequest) (retval1430 *ItemDetailsResult, spcmsException *SPCMSException, err os.Error) {
  err = p.SendGetItemDetails(itemDetailsRequest)
  if err != nil { return }
  return p.RecvGetItemDetails()
}

func (p *CMSSPServiceClient) SendGetItemDetails(itemDetailsRequest *ItemDetailsRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getItemDetails", thrift.CALL, p.SeqId)
  args1431 := NewGetItemDetailsArgs()
  args1431.ItemDetailsRequest = itemDetailsRequest
  err = args1431.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetItemDetails() (value *ItemDetailsResult, spcmsException *SPCMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1433 := thrift.NewTApplicationExceptionDefault()
    error1434, err := error1433.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1434
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1432 := NewGetItemDetailsResult()
  err = result1432.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1432.Success
  if result1432.SpcmsException != nil {
    spcmsException = result1432.SpcmsException
  }
  return
}

/**
 * Parameters:
 *  - CategoryTreeRequest
 */
func (p *CMSSPServiceClient) GetCategorizationTree(categoryTreeRequest *CategoryTreeRequest) (retval1435 *CategoryTreeResult, spcmsException *SPCMSException, err os.Error) {
  err = p.SendGetCategorizationTree(categoryTreeRequest)
  if err != nil { return }
  return p.RecvGetCategorizationTree()
}

func (p *CMSSPServiceClient) SendGetCategorizationTree(categoryTreeRequest *CategoryTreeRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getCategorizationTree", thrift.CALL, p.SeqId)
  args1436 := NewGetCategorizationTreeArgs()
  args1436.CategoryTreeRequest = categoryTreeRequest
  err = args1436.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetCategorizationTree() (value *CategoryTreeResult, spcmsException *SPCMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1438 := thrift.NewTApplicationExceptionDefault()
    error1439, err := error1438.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1439
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1437 := NewGetCategorizationTreeResult()
  err = result1437.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1437.Success
  if result1437.SpcmsException != nil {
    spcmsException = result1437.SpcmsException
  }
  return
}

/**
 * Parameters:
 *  - CategoryNodeInfoRequest
 */
func (p *CMSSPServiceClient) GetCategoryNodeInfo(categoryNodeInfoRequest *CategoryNodeInfoRequest) (retval1440 *CategoryNodeInfoResult, spcmsException *SPCMSException, err os.Error) {
  err = p.SendGetCategoryNodeInfo(categoryNodeInfoRequest)
  if err != nil { return }
  return p.RecvGetCategoryNodeInfo()
}

func (p *CMSSPServiceClient) SendGetCategoryNodeInfo(categoryNodeInfoRequest *CategoryNodeInfoRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getCategoryNodeInfo", thrift.CALL, p.SeqId)
  args1441 := NewGetCategoryNodeInfoArgs()
  args1441.CategoryNodeInfoRequest = categoryNodeInfoRequest
  err = args1441.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetCategoryNodeInfo() (value *CategoryNodeInfoResult, spcmsException *SPCMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1443 := thrift.NewTApplicationExceptionDefault()
    error1444, err := error1443.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1444
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1442 := NewGetCategoryNodeInfoResult()
  err = result1442.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1442.Success
  if result1442.SpcmsException != nil {
    spcmsException = result1442.SpcmsException
  }
  return
}

/**
 * Parameters:
 *  - CategoryPathRequest
 */
func (p *CMSSPServiceClient) GetCategoryPath(categoryPathRequest *CategoryPathRequest) (retval1445 *CategoryPathResult, spcmsException *SPCMSException, err os.Error) {
  err = p.SendGetCategoryPath(categoryPathRequest)
  if err != nil { return }
  return p.RecvGetCategoryPath()
}

func (p *CMSSPServiceClient) SendGetCategoryPath(categoryPathRequest *CategoryPathRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getCategoryPath", thrift.CALL, p.SeqId)
  args1446 := NewGetCategoryPathArgs()
  args1446.CategoryPathRequest = categoryPathRequest
  err = args1446.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetCategoryPath() (value *CategoryPathResult, spcmsException *SPCMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1448 := thrift.NewTApplicationExceptionDefault()
    error1449, err := error1448.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1449
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1447 := NewGetCategoryPathResult()
  err = result1447.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1447.Success
  if result1447.SpcmsException != nil {
    spcmsException = result1447.SpcmsException
  }
  return
}

/**
 * Parameters:
 *  - ItemHistoryRequest
 */
func (p *CMSSPServiceClient) GetProductItemHistory(itemHistoryRequest *ItemHistoryRequest) (retval1450 *ItemHistoryResult, spcmsException *SPCMSException, err os.Error) {
  err = p.SendGetProductItemHistory(itemHistoryRequest)
  if err != nil { return }
  return p.RecvGetProductItemHistory()
}

func (p *CMSSPServiceClient) SendGetProductItemHistory(itemHistoryRequest *ItemHistoryRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getProductItemHistory", thrift.CALL, p.SeqId)
  args1451 := NewGetProductItemHistoryArgs()
  args1451.ItemHistoryRequest = itemHistoryRequest
  err = args1451.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetProductItemHistory() (value *ItemHistoryResult, spcmsException *SPCMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1453 := thrift.NewTApplicationExceptionDefault()
    error1454, err := error1453.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1454
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1452 := NewGetProductItemHistoryResult()
  err = result1452.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1452.Success
  if result1452.SpcmsException != nil {
    spcmsException = result1452.SpcmsException
  }
  return
}

/**
 * Parameters:
 *  - VerticalAttributeDefinitionRequest
 */
func (p *CMSSPServiceClient) GetVerticalAttributeDefinition(verticalAttributeDefinitionRequest *VerticalAttributeDefinitionRequest) (retval1455 *VerticalAttributeDefinitionResult, spcmsException *SPCMSException, err os.Error) {
  err = p.SendGetVerticalAttributeDefinition(verticalAttributeDefinitionRequest)
  if err != nil { return }
  return p.RecvGetVerticalAttributeDefinition()
}

func (p *CMSSPServiceClient) SendGetVerticalAttributeDefinition(verticalAttributeDefinitionRequest *VerticalAttributeDefinitionRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getVerticalAttributeDefinition", thrift.CALL, p.SeqId)
  args1456 := NewGetVerticalAttributeDefinitionArgs()
  args1456.VerticalAttributeDefinitionRequest = verticalAttributeDefinitionRequest
  err = args1456.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetVerticalAttributeDefinition() (value *VerticalAttributeDefinitionResult, spcmsException *SPCMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1458 := thrift.NewTApplicationExceptionDefault()
    error1459, err := error1458.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1459
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1457 := NewGetVerticalAttributeDefinitionResult()
  err = result1457.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1457.Success
  if result1457.SpcmsException != nil {
    spcmsException = result1457.SpcmsException
  }
  return
}

/**
 * Parameters:
 *  - MetaDataRequest
 */
func (p *CMSSPServiceClient) GetMetaData(metaDataRequest *MetaDataRequest) (retval1460 *MetaDataResponse, spcmsException *SPCMSException, err os.Error) {
  err = p.SendGetMetaData(metaDataRequest)
  if err != nil { return }
  return p.RecvGetMetaData()
}

func (p *CMSSPServiceClient) SendGetMetaData(metaDataRequest *MetaDataRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getMetaData", thrift.CALL, p.SeqId)
  args1461 := NewGetMetaDataArgs()
  args1461.MetaDataRequest = metaDataRequest
  err = args1461.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetMetaData() (value *MetaDataResponse, spcmsException *SPCMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1463 := thrift.NewTApplicationExceptionDefault()
    error1464, err := error1463.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1464
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1462 := NewGetMetaDataResult()
  err = result1462.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1462.Success
  if result1462.SpcmsException != nil {
    spcmsException = result1462.SpcmsException
  }
  return
}

/**
 * Parameters:
 *  - EntitySearchRequest
 */
func (p *CMSSPServiceClient) SearchEntity(entitySearchRequest *EntitySearchRequest) (retval1465 *EntitySearchResult, spcmsException *SPCMSException, err os.Error) {
  err = p.SendSearchEntity(entitySearchRequest)
  if err != nil { return }
  return p.RecvSearchEntity()
}

func (p *CMSSPServiceClient) SendSearchEntity(entitySearchRequest *EntitySearchRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("searchEntity", thrift.CALL, p.SeqId)
  args1466 := NewSearchEntityArgs()
  args1466.EntitySearchRequest = entitySearchRequest
  err = args1466.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvSearchEntity() (value *EntitySearchResult, spcmsException *SPCMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1468 := thrift.NewTApplicationExceptionDefault()
    error1469, err := error1468.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1469
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1467 := NewSearchEntityResult()
  err = result1467.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1467.Success
  if result1467.SpcmsException != nil {
    spcmsException = result1467.SpcmsException
  }
  return
}

/**
 * Parameters:
 *  - ProductIdForEGVRequest
 */
func (p *CMSSPServiceClient) GetProductIDForEGV(productIdForEGVRequest *ProductIdForEGVRequest) (retval1470 *ProductIdForEGVResponse, spcmsException *SPCMSException, err os.Error) {
  err = p.SendGetProductIDForEGV(productIdForEGVRequest)
  if err != nil { return }
  return p.RecvGetProductIDForEGV()
}

func (p *CMSSPServiceClient) SendGetProductIDForEGV(productIdForEGVRequest *ProductIdForEGVRequest)(err os.Error) {
  oprot := p.OutputProtocol
  if oprot != nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getProductIDForEGV", thrift.CALL, p.SeqId)
  args1471 := NewGetProductIDForEGVArgs()
  args1471.ProductIdForEGVRequest = productIdForEGVRequest
  err = args1471.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Transport().Flush()
  return
}


func (p *CMSSPServiceClient) RecvGetProductIDForEGV() (value *ProductIdForEGVResponse, spcmsException *SPCMSException, err os.Error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1473 := thrift.NewTApplicationExceptionDefault()
    error1474, err := error1473.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1474
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result1472 := NewGetProductIDForEGVResult()
  err = result1472.Read(iprot)
  iprot.ReadMessageEnd()
  value = result1472.Success
  if result1472.SpcmsException != nil {
    spcmsException = result1472.SpcmsException
  }
  return
}


type CMSSPServiceProcessor struct {
  handler ICMSSPService
  processorMap map[string]thrift.TProcessorFunction
}

func (p *CMSSPServiceProcessor) Handler() ICMSSPService {
  return p.handler
}

func (p *CMSSPServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CMSSPServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
  processor, exists = p.processorMap[key]
  return processor, exists
}

func (p *CMSSPServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCMSSPServiceProcessor(handler ICMSSPService) *CMSSPServiceProcessor {

  self1475 := &CMSSPServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self1475.processorMap["getSPCmsVerticalVersions"] = &cMSSPServiceProcessorGetSPCmsVerticalVersions{handler:handler}
  self1475.processorMap["getSPVerticalDelta"] = &cMSSPServiceProcessorGetSPVerticalDelta{handler:handler}
  self1475.processorMap["getSPVerticalVersion"] = &cMSSPServiceProcessorGetSPVerticalVersion{handler:handler}
  self1475.processorMap["getProductWithListings"] = &cMSSPServiceProcessorGetProductWithListings{handler:handler}
  self1475.processorMap["getProductInfo"] = &cMSSPServiceProcessorGetProductInfo{handler:handler}
  self1475.processorMap["getListings"] = &cMSSPServiceProcessorGetListings{handler:handler}
  self1475.processorMap["getListingDetail"] = &cMSSPServiceProcessorGetListingDetail{handler:handler}
  self1475.processorMap["getListingIdfromEGV"] = &cMSSPServiceProcessorGetListingIdfromEGV{handler:handler}
  self1475.processorMap["getProductViews"] = &cMSSPServiceProcessorGetProductViews{handler:handler}
  self1475.processorMap["getViewDefinition"] = &cMSSPServiceProcessorGetViewDefinition{handler:handler}
  self1475.processorMap["getContributorInfo"] = &cMSSPServiceProcessorGetContributorInfo{handler:handler}
  self1475.processorMap["getItems"] = &cMSSPServiceProcessorGetItems{handler:handler}
  self1475.processorMap["getItemDetails"] = &cMSSPServiceProcessorGetItemDetails{handler:handler}
  self1475.processorMap["getCategorizationTree"] = &cMSSPServiceProcessorGetCategorizationTree{handler:handler}
  self1475.processorMap["getCategoryNodeInfo"] = &cMSSPServiceProcessorGetCategoryNodeInfo{handler:handler}
  self1475.processorMap["getCategoryPath"] = &cMSSPServiceProcessorGetCategoryPath{handler:handler}
  self1475.processorMap["getProductItemHistory"] = &cMSSPServiceProcessorGetProductItemHistory{handler:handler}
  self1475.processorMap["getVerticalAttributeDefinition"] = &cMSSPServiceProcessorGetVerticalAttributeDefinition{handler:handler}
  self1475.processorMap["getMetaData"] = &cMSSPServiceProcessorGetMetaData{handler:handler}
  self1475.processorMap["searchEntity"] = &cMSSPServiceProcessorSearchEntity{handler:handler}
  self1475.processorMap["getProductIDForEGV"] = &cMSSPServiceProcessorGetProductIDForEGV{handler:handler}
return self1475
}

func (p *CMSSPServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return }
  process, nameFound := p.GetProcessorFunction(name)
  if !nameFound || process == nil {
    iprot.Skip(thrift.STRUCT)
    iprot.ReadMessageEnd()
    x1476 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
    oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
    x1476.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return false, x1476
  }
  return process.Process(seqId, iprot, oprot)
}

type cMSSPServiceProcessorGetSPCmsVerticalVersions struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetSPCmsVerticalVersions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSPCmsVerticalVersionsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getSPCmsVerticalVersions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSPCmsVerticalVersionsResult()
  if result.Success, result.CmsException, err = p.handler.GetSPCmsVerticalVersions(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSPCmsVerticalVersions: " + err.String())
    oprot.WriteMessageBegin("getSPCmsVerticalVersions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getSPCmsVerticalVersions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetSPVerticalDelta struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetSPVerticalDelta) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSPVerticalDeltaArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getSPVerticalDelta", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSPVerticalDeltaResult()
  if result.Success, result.CmsException, err = p.handler.GetSPVerticalDelta(args.DeltaRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSPVerticalDelta: " + err.String())
    oprot.WriteMessageBegin("getSPVerticalDelta", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getSPVerticalDelta", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetSPVerticalVersion struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetSPVerticalVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSPVerticalVersionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getSPVerticalVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSPVerticalVersionResult()
  if result.Success, result.CmsException, err = p.handler.GetSPVerticalVersion(args.VerticalName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSPVerticalVersion: " + err.String())
    oprot.WriteMessageBegin("getSPVerticalVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getSPVerticalVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetProductWithListings struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetProductWithListings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetProductWithListingsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getProductWithListings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetProductWithListingsResult()
  if result.Success, result.CmsException, err = p.handler.GetProductWithListings(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductWithListings: " + err.String())
    oprot.WriteMessageBegin("getProductWithListings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getProductWithListings", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetProductInfo struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetProductInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetProductInfoArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getProductInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetProductInfoResult()
  if result.Success, result.CmsException, err = p.handler.GetProductInfo(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductInfo: " + err.String())
    oprot.WriteMessageBegin("getProductInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getProductInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetListings struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetListings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetListingsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getListings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetListingsResult()
  if result.Success, result.CmsException, err = p.handler.GetListings(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListings: " + err.String())
    oprot.WriteMessageBegin("getListings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getListings", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetListingDetail struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetListingDetail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetListingDetailArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getListingDetail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetListingDetailResult()
  if result.Success, result.CmsException, err = p.handler.GetListingDetail(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListingDetail: " + err.String())
    oprot.WriteMessageBegin("getListingDetail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getListingDetail", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetListingIdfromEGV struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetListingIdfromEGV) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetListingIdfromEGVArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getListingIdfromEGV", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetListingIdfromEGVResult()
  if result.Success, result.CmsException, err = p.handler.GetListingIdfromEGV(args.Amount); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListingIdfromEGV: " + err.String())
    oprot.WriteMessageBegin("getListingIdfromEGV", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getListingIdfromEGV", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetProductViews struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetProductViews) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetProductViewsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getProductViews", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetProductViewsResult()
  if result.Success, result.CmsException, err = p.handler.GetProductViews(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductViews: " + err.String())
    oprot.WriteMessageBegin("getProductViews", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getProductViews", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetViewDefinition struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetViewDefinition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetViewDefinitionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getViewDefinition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetViewDefinitionResult()
  if result.Success, result.CmsException, err = p.handler.GetViewDefinition(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getViewDefinition: " + err.String())
    oprot.WriteMessageBegin("getViewDefinition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getViewDefinition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetContributorInfo struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetContributorInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetContributorInfoArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getContributorInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetContributorInfoResult()
  if result.Success, result.SpcmsException, err = p.handler.GetContributorInfo(args.ContributorInfoRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContributorInfo: " + err.String())
    oprot.WriteMessageBegin("getContributorInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getContributorInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetItems struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetItems) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetItemsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetItemsResult()
  if result.Success, result.SpcmsException, err = p.handler.GetItems(args.ItemsRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItems: " + err.String())
    oprot.WriteMessageBegin("getItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getItems", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetItemDetails struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetItemDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetItemDetailsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getItemDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetItemDetailsResult()
  if result.Success, result.SpcmsException, err = p.handler.GetItemDetails(args.ItemDetailsRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemDetails: " + err.String())
    oprot.WriteMessageBegin("getItemDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getItemDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetCategorizationTree struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetCategorizationTree) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetCategorizationTreeArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getCategorizationTree", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetCategorizationTreeResult()
  if result.Success, result.SpcmsException, err = p.handler.GetCategorizationTree(args.CategoryTreeRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCategorizationTree: " + err.String())
    oprot.WriteMessageBegin("getCategorizationTree", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getCategorizationTree", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetCategoryNodeInfo struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetCategoryNodeInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetCategoryNodeInfoArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getCategoryNodeInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetCategoryNodeInfoResult()
  if result.Success, result.SpcmsException, err = p.handler.GetCategoryNodeInfo(args.CategoryNodeInfoRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCategoryNodeInfo: " + err.String())
    oprot.WriteMessageBegin("getCategoryNodeInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getCategoryNodeInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetCategoryPath struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetCategoryPath) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetCategoryPathArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getCategoryPath", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetCategoryPathResult()
  if result.Success, result.SpcmsException, err = p.handler.GetCategoryPath(args.CategoryPathRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCategoryPath: " + err.String())
    oprot.WriteMessageBegin("getCategoryPath", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getCategoryPath", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetProductItemHistory struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetProductItemHistory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetProductItemHistoryArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getProductItemHistory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetProductItemHistoryResult()
  if result.Success, result.SpcmsException, err = p.handler.GetProductItemHistory(args.ItemHistoryRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductItemHistory: " + err.String())
    oprot.WriteMessageBegin("getProductItemHistory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getProductItemHistory", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetVerticalAttributeDefinition struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetVerticalAttributeDefinition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetVerticalAttributeDefinitionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getVerticalAttributeDefinition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetVerticalAttributeDefinitionResult()
  if result.Success, result.SpcmsException, err = p.handler.GetVerticalAttributeDefinition(args.VerticalAttributeDefinitionRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVerticalAttributeDefinition: " + err.String())
    oprot.WriteMessageBegin("getVerticalAttributeDefinition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getVerticalAttributeDefinition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetMetaData struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetMetaData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetMetaDataArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getMetaData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetMetaDataResult()
  if result.Success, result.SpcmsException, err = p.handler.GetMetaData(args.MetaDataRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMetaData: " + err.String())
    oprot.WriteMessageBegin("getMetaData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getMetaData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorSearchEntity struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorSearchEntity) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSearchEntityArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("searchEntity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSearchEntityResult()
  if result.Success, result.SpcmsException, err = p.handler.SearchEntity(args.EntitySearchRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing searchEntity: " + err.String())
    oprot.WriteMessageBegin("searchEntity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("searchEntity", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetProductIDForEGV struct {
  handler ICMSSPService
}

func (p *cMSSPServiceProcessorGetProductIDForEGV) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetProductIDForEGVArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.String())
    oprot.WriteMessageBegin("getProductIDForEGV", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetProductIDForEGVResult()
  if result.Success, result.SpcmsException, err = p.handler.GetProductIDForEGV(args.ProductIdForEGVRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductIDForEGV: " + err.String())
    oprot.WriteMessageBegin("getProductIDForEGV", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Transport().Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getProductIDForEGV", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type GetSPCmsVerticalVersionsArgs struct {
  thrift.TStruct
}

func NewGetSPCmsVerticalVersionsArgs() *GetSPCmsVerticalVersionsArgs {
  output := &GetSPCmsVerticalVersionsArgs{
    TStruct:thrift.NewTStruct("getSPCmsVerticalVersions_args", []thrift.TField{
    }),
  }
  {
  }
  return output
}

func (p *GetSPCmsVerticalVersionsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    err = iprot.Skip(fieldTypeId)
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSPCmsVerticalVersionsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getSPCmsVerticalVersions_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSPCmsVerticalVersionsArgs) TStructName() string {
  return "GetSPCmsVerticalVersionsArgs"
}

func (p *GetSPCmsVerticalVersionsArgs) ThriftName() string {
  return "getSPCmsVerticalVersions_args"
}

func (p *GetSPCmsVerticalVersionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSPCmsVerticalVersionsArgs(%+v)", *p)
}

func (p *GetSPCmsVerticalVersionsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  _, ok := other.(*GetSPCmsVerticalVersionsArgs)
  if !ok {
    return 0, false
  }
  return 0, true
}

func (p *GetSPCmsVerticalVersionsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  }
  return nil
}

func (p *GetSPCmsVerticalVersionsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    })
}

/**
 * Attributes:
 *  - Success
 *  - CmsException
 */
type GetSPCmsVerticalVersionsResult struct {
  thrift.TStruct
  Success *CmsVerticalVersionsResult "success"; // 0
  CmsException *CMSException "cmsException"; // 1
}

func NewGetSPCmsVerticalVersionsResult() *GetSPCmsVerticalVersionsResult {
  output := &GetSPCmsVerticalVersionsResult{
    TStruct:thrift.NewTStruct("getSPCmsVerticalVersions_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetSPCmsVerticalVersionsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "cmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSPCmsVerticalVersionsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewCms.ttypes.CmsVerticalVersionsResult()
  err1479 := p.Success.Read(iprot)
  if err1479 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessCmsVerticalVersionsResult", err1479); }
  return err
}

func (p *GetSPCmsVerticalVersionsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetSPCmsVerticalVersionsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsException = NewCms.ttypes.CMSException()
  err1482 := p.CmsException.Read(iprot)
  if err1482 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsExceptionCMSException", err1482); }
  return err
}

func (p *GetSPCmsVerticalVersionsResult) ReadFieldCmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSPCmsVerticalVersionsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getSPCmsVerticalVersions_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.CmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSPCmsVerticalVersionsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CmsVerticalVersionsResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSPCmsVerticalVersionsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetSPCmsVerticalVersionsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsException != nil {
    err = oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
    err = p.CmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSPCmsVerticalVersionsResult) WriteFieldCmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSPCmsVerticalVersionsResult) TStructName() string {
  return "GetSPCmsVerticalVersionsResult"
}

func (p *GetSPCmsVerticalVersionsResult) ThriftName() string {
  return "getSPCmsVerticalVersions_result"
}

func (p *GetSPCmsVerticalVersionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSPCmsVerticalVersionsResult(%+v)", *p)
}

func (p *GetSPCmsVerticalVersionsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSPCmsVerticalVersionsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.CmsException.CompareTo(data.CmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetSPCmsVerticalVersionsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.CmsException
  }
  return nil
}

func (p *GetSPCmsVerticalVersionsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - DeltaRequest
 */
type GetSPVerticalDeltaArgs struct {
  thrift.TStruct
  DeltaRequest *DeltaRequest "deltaRequest"; // 1
}

func NewGetSPVerticalDeltaArgs() *GetSPVerticalDeltaArgs {
  output := &GetSPVerticalDeltaArgs{
    TStruct:thrift.NewTStruct("getSPVerticalDelta_args", []thrift.TField{
    thrift.NewTField("deltaRequest", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetSPVerticalDeltaArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "deltaRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSPVerticalDeltaArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.DeltaRequest = NewCms.ttypes.DeltaRequest()
  err1485 := p.DeltaRequest.Read(iprot)
  if err1485 != nil { return thrift.NewTProtocolExceptionReadStruct("p.DeltaRequestDeltaRequest", err1485); }
  return err
}

func (p *GetSPVerticalDeltaArgs) ReadFieldDeltaRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSPVerticalDeltaArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getSPVerticalDelta_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSPVerticalDeltaArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.DeltaRequest != nil {
    err = oprot.WriteFieldBegin("deltaRequest", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "deltaRequest", p.ThriftName(), err); }
    err = p.DeltaRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("DeltaRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "deltaRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSPVerticalDeltaArgs) WriteFieldDeltaRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSPVerticalDeltaArgs) TStructName() string {
  return "GetSPVerticalDeltaArgs"
}

func (p *GetSPVerticalDeltaArgs) ThriftName() string {
  return "getSPVerticalDelta_args"
}

func (p *GetSPVerticalDeltaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSPVerticalDeltaArgs(%+v)", *p)
}

func (p *GetSPVerticalDeltaArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSPVerticalDeltaArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.DeltaRequest.CompareTo(data.DeltaRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetSPVerticalDeltaArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.DeltaRequest
  }
  return nil
}

func (p *GetSPVerticalDeltaArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("deltaRequest", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - CmsException
 */
type GetSPVerticalDeltaResult struct {
  thrift.TStruct
  Success *DeltaResult "success"; // 0
  CmsException *CMSException "cmsException"; // 1
}

func NewGetSPVerticalDeltaResult() *GetSPVerticalDeltaResult {
  output := &GetSPVerticalDeltaResult{
    TStruct:thrift.NewTStruct("getSPVerticalDelta_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetSPVerticalDeltaResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "cmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSPVerticalDeltaResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewCms.ttypes.DeltaResult()
  err1488 := p.Success.Read(iprot)
  if err1488 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessDeltaResult", err1488); }
  return err
}

func (p *GetSPVerticalDeltaResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetSPVerticalDeltaResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsException = NewCms.ttypes.CMSException()
  err1491 := p.CmsException.Read(iprot)
  if err1491 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsExceptionCMSException", err1491); }
  return err
}

func (p *GetSPVerticalDeltaResult) ReadFieldCmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSPVerticalDeltaResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getSPVerticalDelta_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.CmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSPVerticalDeltaResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("DeltaResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSPVerticalDeltaResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetSPVerticalDeltaResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsException != nil {
    err = oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
    err = p.CmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSPVerticalDeltaResult) WriteFieldCmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSPVerticalDeltaResult) TStructName() string {
  return "GetSPVerticalDeltaResult"
}

func (p *GetSPVerticalDeltaResult) ThriftName() string {
  return "getSPVerticalDelta_result"
}

func (p *GetSPVerticalDeltaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSPVerticalDeltaResult(%+v)", *p)
}

func (p *GetSPVerticalDeltaResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSPVerticalDeltaResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.CmsException.CompareTo(data.CmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetSPVerticalDeltaResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.CmsException
  }
  return nil
}

func (p *GetSPVerticalDeltaResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - VerticalName
 */
type GetSPVerticalVersionArgs struct {
  thrift.TStruct
  VerticalName string "verticalName"; // 1
}

func NewGetSPVerticalVersionArgs() *GetSPVerticalVersionArgs {
  output := &GetSPVerticalVersionArgs{
    TStruct:thrift.NewTStruct("getSPVerticalVersion_args", []thrift.TField{
    thrift.NewTField("verticalName", thrift.STRING, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetSPVerticalVersionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "verticalName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSPVerticalVersionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1492, err1493 := iprot.ReadString()
  if err1493 != nil { return thrift.NewTProtocolExceptionReadField(1, "verticalName", p.ThriftName(), err1493); }
  p.VerticalName = v1492
  return err
}

func (p *GetSPVerticalVersionArgs) ReadFieldVerticalName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSPVerticalVersionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getSPVerticalVersion_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSPVerticalVersionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("verticalName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.VerticalName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalName", p.ThriftName(), err); }
  return err
}

func (p *GetSPVerticalVersionArgs) WriteFieldVerticalName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSPVerticalVersionArgs) TStructName() string {
  return "GetSPVerticalVersionArgs"
}

func (p *GetSPVerticalVersionArgs) ThriftName() string {
  return "getSPVerticalVersion_args"
}

func (p *GetSPVerticalVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSPVerticalVersionArgs(%+v)", *p)
}

func (p *GetSPVerticalVersionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSPVerticalVersionArgs)
  if !ok {
    return 0, false
  }
  if p.VerticalName != data.VerticalName {
    if p.VerticalName < data.VerticalName {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetSPVerticalVersionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.VerticalName
  }
  return nil
}

func (p *GetSPVerticalVersionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("verticalName", thrift.STRING, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - CmsException
 */
type GetSPVerticalVersionResult struct {
  thrift.TStruct
  Success *VerticalVersionResult "success"; // 0
  CmsException *CMSException "cmsException"; // 1
}

func NewGetSPVerticalVersionResult() *GetSPVerticalVersionResult {
  output := &GetSPVerticalVersionResult{
    TStruct:thrift.NewTStruct("getSPVerticalVersion_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetSPVerticalVersionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "cmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSPVerticalVersionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewCms.ttypes.VerticalVersionResult()
  err1496 := p.Success.Read(iprot)
  if err1496 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessVerticalVersionResult", err1496); }
  return err
}

func (p *GetSPVerticalVersionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetSPVerticalVersionResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsException = NewCms.ttypes.CMSException()
  err1499 := p.CmsException.Read(iprot)
  if err1499 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsExceptionCMSException", err1499); }
  return err
}

func (p *GetSPVerticalVersionResult) ReadFieldCmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetSPVerticalVersionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getSPVerticalVersion_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.CmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetSPVerticalVersionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("VerticalVersionResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSPVerticalVersionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetSPVerticalVersionResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsException != nil {
    err = oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
    err = p.CmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetSPVerticalVersionResult) WriteFieldCmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetSPVerticalVersionResult) TStructName() string {
  return "GetSPVerticalVersionResult"
}

func (p *GetSPVerticalVersionResult) ThriftName() string {
  return "getSPVerticalVersion_result"
}

func (p *GetSPVerticalVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSPVerticalVersionResult(%+v)", *p)
}

func (p *GetSPVerticalVersionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetSPVerticalVersionResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.CmsException.CompareTo(data.CmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetSPVerticalVersionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.CmsException
  }
  return nil
}

func (p *GetSPVerticalVersionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Request
 */
type GetProductWithListingsArgs struct {
  thrift.TStruct
  Request *ProductInfoRequest "request"; // 1
}

func NewGetProductWithListingsArgs() *GetProductWithListingsArgs {
  output := &GetProductWithListingsArgs{
    TStruct:thrift.NewTStruct("getProductWithListings_args", []thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetProductWithListingsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "request" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductWithListingsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Request = NewProductInfoRequest()
  err1502 := p.Request.Read(iprot)
  if err1502 != nil { return thrift.NewTProtocolExceptionReadStruct("p.RequestProductInfoRequest", err1502); }
  return err
}

func (p *GetProductWithListingsArgs) ReadFieldRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetProductWithListingsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getProductWithListings_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductWithListingsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Request != nil {
    err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
    err = p.Request.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductInfoRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductWithListingsArgs) WriteFieldRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetProductWithListingsArgs) TStructName() string {
  return "GetProductWithListingsArgs"
}

func (p *GetProductWithListingsArgs) ThriftName() string {
  return "getProductWithListings_args"
}

func (p *GetProductWithListingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductWithListingsArgs(%+v)", *p)
}

func (p *GetProductWithListingsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetProductWithListingsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Request.CompareTo(data.Request); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetProductWithListingsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Request
  }
  return nil
}

func (p *GetProductWithListingsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - CmsException
 */
type GetProductWithListingsResult struct {
  thrift.TStruct
  Success *ProductListingsResult "success"; // 0
  CmsException *CMSException "cmsException"; // 1
}

func NewGetProductWithListingsResult() *GetProductWithListingsResult {
  output := &GetProductWithListingsResult{
    TStruct:thrift.NewTStruct("getProductWithListings_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetProductWithListingsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "cmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductWithListingsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewProductListingsResult()
  err1505 := p.Success.Read(iprot)
  if err1505 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessProductListingsResult", err1505); }
  return err
}

func (p *GetProductWithListingsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetProductWithListingsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsException = NewCms.ttypes.CMSException()
  err1508 := p.CmsException.Read(iprot)
  if err1508 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsExceptionCMSException", err1508); }
  return err
}

func (p *GetProductWithListingsResult) ReadFieldCmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetProductWithListingsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getProductWithListings_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.CmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductWithListingsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductListingsResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductWithListingsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetProductWithListingsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsException != nil {
    err = oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
    err = p.CmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductWithListingsResult) WriteFieldCmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetProductWithListingsResult) TStructName() string {
  return "GetProductWithListingsResult"
}

func (p *GetProductWithListingsResult) ThriftName() string {
  return "getProductWithListings_result"
}

func (p *GetProductWithListingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductWithListingsResult(%+v)", *p)
}

func (p *GetProductWithListingsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetProductWithListingsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.CmsException.CompareTo(data.CmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetProductWithListingsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.CmsException
  }
  return nil
}

func (p *GetProductWithListingsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Request
 */
type GetProductInfoArgs struct {
  thrift.TStruct
  Request *ProductInfoRequest "request"; // 1
}

func NewGetProductInfoArgs() *GetProductInfoArgs {
  output := &GetProductInfoArgs{
    TStruct:thrift.NewTStruct("getProductInfo_args", []thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetProductInfoArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "request" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductInfoArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Request = NewProductInfoRequest()
  err1511 := p.Request.Read(iprot)
  if err1511 != nil { return thrift.NewTProtocolExceptionReadStruct("p.RequestProductInfoRequest", err1511); }
  return err
}

func (p *GetProductInfoArgs) ReadFieldRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetProductInfoArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getProductInfo_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductInfoArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Request != nil {
    err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
    err = p.Request.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductInfoRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductInfoArgs) WriteFieldRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetProductInfoArgs) TStructName() string {
  return "GetProductInfoArgs"
}

func (p *GetProductInfoArgs) ThriftName() string {
  return "getProductInfo_args"
}

func (p *GetProductInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductInfoArgs(%+v)", *p)
}

func (p *GetProductInfoArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetProductInfoArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Request.CompareTo(data.Request); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetProductInfoArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Request
  }
  return nil
}

func (p *GetProductInfoArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - CmsException
 */
type GetProductInfoResult struct {
  thrift.TStruct
  Success *ProductInfoResult "success"; // 0
  CmsException *CMSException "cmsException"; // 1
}

func NewGetProductInfoResult() *GetProductInfoResult {
  output := &GetProductInfoResult{
    TStruct:thrift.NewTStruct("getProductInfo_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetProductInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "cmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductInfoResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewProductInfoResult()
  err1514 := p.Success.Read(iprot)
  if err1514 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessProductInfoResult", err1514); }
  return err
}

func (p *GetProductInfoResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetProductInfoResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsException = NewCms.ttypes.CMSException()
  err1517 := p.CmsException.Read(iprot)
  if err1517 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsExceptionCMSException", err1517); }
  return err
}

func (p *GetProductInfoResult) ReadFieldCmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetProductInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getProductInfo_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.CmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductInfoResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductInfoResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductInfoResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetProductInfoResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsException != nil {
    err = oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
    err = p.CmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductInfoResult) WriteFieldCmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetProductInfoResult) TStructName() string {
  return "GetProductInfoResult"
}

func (p *GetProductInfoResult) ThriftName() string {
  return "getProductInfo_result"
}

func (p *GetProductInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductInfoResult(%+v)", *p)
}

func (p *GetProductInfoResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetProductInfoResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.CmsException.CompareTo(data.CmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetProductInfoResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.CmsException
  }
  return nil
}

func (p *GetProductInfoResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Request
 */
type GetListingsArgs struct {
  thrift.TStruct
  Request *ListingRequest "request"; // 1
}

func NewGetListingsArgs() *GetListingsArgs {
  output := &GetListingsArgs{
    TStruct:thrift.NewTStruct("getListings_args", []thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetListingsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "request" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetListingsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Request = NewListingRequest()
  err1520 := p.Request.Read(iprot)
  if err1520 != nil { return thrift.NewTProtocolExceptionReadStruct("p.RequestListingRequest", err1520); }
  return err
}

func (p *GetListingsArgs) ReadFieldRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetListingsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getListings_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetListingsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Request != nil {
    err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
    err = p.Request.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ListingRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
  }
  return err
}

func (p *GetListingsArgs) WriteFieldRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetListingsArgs) TStructName() string {
  return "GetListingsArgs"
}

func (p *GetListingsArgs) ThriftName() string {
  return "getListings_args"
}

func (p *GetListingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetListingsArgs(%+v)", *p)
}

func (p *GetListingsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetListingsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Request.CompareTo(data.Request); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetListingsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Request
  }
  return nil
}

func (p *GetListingsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - CmsException
 */
type GetListingsResult struct {
  thrift.TStruct
  Success *ListingResult "success"; // 0
  CmsException *CMSException "cmsException"; // 1
}

func NewGetListingsResult() *GetListingsResult {
  output := &GetListingsResult{
    TStruct:thrift.NewTStruct("getListings_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetListingsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "cmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetListingsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewListingResult()
  err1523 := p.Success.Read(iprot)
  if err1523 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessListingResult", err1523); }
  return err
}

func (p *GetListingsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetListingsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsException = NewCms.ttypes.CMSException()
  err1526 := p.CmsException.Read(iprot)
  if err1526 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsExceptionCMSException", err1526); }
  return err
}

func (p *GetListingsResult) ReadFieldCmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetListingsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getListings_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.CmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetListingsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ListingResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetListingsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetListingsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsException != nil {
    err = oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
    err = p.CmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetListingsResult) WriteFieldCmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetListingsResult) TStructName() string {
  return "GetListingsResult"
}

func (p *GetListingsResult) ThriftName() string {
  return "getListings_result"
}

func (p *GetListingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetListingsResult(%+v)", *p)
}

func (p *GetListingsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetListingsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.CmsException.CompareTo(data.CmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetListingsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.CmsException
  }
  return nil
}

func (p *GetListingsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Request
 */
type GetListingDetailArgs struct {
  thrift.TStruct
  Request *ListingIDRequest "request"; // 1
}

func NewGetListingDetailArgs() *GetListingDetailArgs {
  output := &GetListingDetailArgs{
    TStruct:thrift.NewTStruct("getListingDetail_args", []thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetListingDetailArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "request" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetListingDetailArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Request = NewListingIDRequest()
  err1529 := p.Request.Read(iprot)
  if err1529 != nil { return thrift.NewTProtocolExceptionReadStruct("p.RequestListingIDRequest", err1529); }
  return err
}

func (p *GetListingDetailArgs) ReadFieldRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetListingDetailArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getListingDetail_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetListingDetailArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Request != nil {
    err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
    err = p.Request.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ListingIDRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
  }
  return err
}

func (p *GetListingDetailArgs) WriteFieldRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetListingDetailArgs) TStructName() string {
  return "GetListingDetailArgs"
}

func (p *GetListingDetailArgs) ThriftName() string {
  return "getListingDetail_args"
}

func (p *GetListingDetailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetListingDetailArgs(%+v)", *p)
}

func (p *GetListingDetailArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetListingDetailArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Request.CompareTo(data.Request); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetListingDetailArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Request
  }
  return nil
}

func (p *GetListingDetailArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - CmsException
 */
type GetListingDetailResult struct {
  thrift.TStruct
  Success *ListingProductResult "success"; // 0
  CmsException *CMSException "cmsException"; // 1
}

func NewGetListingDetailResult() *GetListingDetailResult {
  output := &GetListingDetailResult{
    TStruct:thrift.NewTStruct("getListingDetail_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetListingDetailResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "cmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetListingDetailResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewListingProductResult()
  err1532 := p.Success.Read(iprot)
  if err1532 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessListingProductResult", err1532); }
  return err
}

func (p *GetListingDetailResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetListingDetailResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsException = NewCms.ttypes.CMSException()
  err1535 := p.CmsException.Read(iprot)
  if err1535 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsExceptionCMSException", err1535); }
  return err
}

func (p *GetListingDetailResult) ReadFieldCmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetListingDetailResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getListingDetail_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.CmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetListingDetailResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ListingProductResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetListingDetailResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetListingDetailResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsException != nil {
    err = oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
    err = p.CmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetListingDetailResult) WriteFieldCmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetListingDetailResult) TStructName() string {
  return "GetListingDetailResult"
}

func (p *GetListingDetailResult) ThriftName() string {
  return "getListingDetail_result"
}

func (p *GetListingDetailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetListingDetailResult(%+v)", *p)
}

func (p *GetListingDetailResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetListingDetailResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.CmsException.CompareTo(data.CmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetListingDetailResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.CmsException
  }
  return nil
}

func (p *GetListingDetailResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Amount
 */
type GetListingIdfromEGVArgs struct {
  thrift.TStruct
  Amount int32 "amount"; // 1
}

func NewGetListingIdfromEGVArgs() *GetListingIdfromEGVArgs {
  output := &GetListingIdfromEGVArgs{
    TStruct:thrift.NewTStruct("getListingIdfromEGV_args", []thrift.TField{
    thrift.NewTField("amount", thrift.I32, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetListingIdfromEGVArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "amount" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetListingIdfromEGVArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1536, err1537 := iprot.ReadI32()
  if err1537 != nil { return thrift.NewTProtocolExceptionReadField(1, "amount", p.ThriftName(), err1537); }
  p.Amount = v1536
  return err
}

func (p *GetListingIdfromEGVArgs) ReadFieldAmount(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetListingIdfromEGVArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getListingIdfromEGV_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetListingIdfromEGVArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("amount", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "amount", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.Amount))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "amount", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "amount", p.ThriftName(), err); }
  return err
}

func (p *GetListingIdfromEGVArgs) WriteFieldAmount(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetListingIdfromEGVArgs) TStructName() string {
  return "GetListingIdfromEGVArgs"
}

func (p *GetListingIdfromEGVArgs) ThriftName() string {
  return "getListingIdfromEGV_args"
}

func (p *GetListingIdfromEGVArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetListingIdfromEGVArgs(%+v)", *p)
}

func (p *GetListingIdfromEGVArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetListingIdfromEGVArgs)
  if !ok {
    return 0, false
  }
  if p.Amount != data.Amount {
    if p.Amount < data.Amount {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *GetListingIdfromEGVArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Amount
  }
  return nil
}

func (p *GetListingIdfromEGVArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("amount", thrift.I32, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - CmsException
 */
type GetListingIdfromEGVResult struct {
  thrift.TStruct
  Success ListingID "success"; // 0
  CmsException *CMSException "cmsException"; // 1
}

func NewGetListingIdfromEGVResult() *GetListingIdfromEGVResult {
  output := &GetListingIdfromEGVResult{
    TStruct:thrift.NewTStruct("getListingIdfromEGV_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetListingIdfromEGVResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "cmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetListingIdfromEGVResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v1538, err1539 := iprot.ReadString()
  if err1539 != nil { return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1539); }
  p.Success = ListingID(v1538)
  return err
}

func (p *GetListingIdfromEGVResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetListingIdfromEGVResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsException = NewCms.ttypes.CMSException()
  err1542 := p.CmsException.Read(iprot)
  if err1542 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsExceptionCMSException", err1542); }
  return err
}

func (p *GetListingIdfromEGVResult) ReadFieldCmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetListingIdfromEGVResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getListingIdfromEGV_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.CmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetListingIdfromEGVResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("success", thrift.STRING, 0)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Success))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  return err
}

func (p *GetListingIdfromEGVResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetListingIdfromEGVResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsException != nil {
    err = oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
    err = p.CmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetListingIdfromEGVResult) WriteFieldCmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetListingIdfromEGVResult) TStructName() string {
  return "GetListingIdfromEGVResult"
}

func (p *GetListingIdfromEGVResult) ThriftName() string {
  return "getListingIdfromEGV_result"
}

func (p *GetListingIdfromEGVResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetListingIdfromEGVResult(%+v)", *p)
}

func (p *GetListingIdfromEGVResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetListingIdfromEGVResult)
  if !ok {
    return 0, false
  }
  if p.Success != data.Success {
    if p.Success < data.Success {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.CmsException.CompareTo(data.CmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetListingIdfromEGVResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.CmsException
  }
  return nil
}

func (p *GetListingIdfromEGVResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRING, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Request
 */
type GetProductViewsArgs struct {
  thrift.TStruct
  Request *ViewRequest "request"; // 1
}

func NewGetProductViewsArgs() *GetProductViewsArgs {
  output := &GetProductViewsArgs{
    TStruct:thrift.NewTStruct("getProductViews_args", []thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetProductViewsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "request" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductViewsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Request = NewViewRequest()
  err1545 := p.Request.Read(iprot)
  if err1545 != nil { return thrift.NewTProtocolExceptionReadStruct("p.RequestViewRequest", err1545); }
  return err
}

func (p *GetProductViewsArgs) ReadFieldRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetProductViewsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getProductViews_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductViewsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Request != nil {
    err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
    err = p.Request.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ViewRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductViewsArgs) WriteFieldRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetProductViewsArgs) TStructName() string {
  return "GetProductViewsArgs"
}

func (p *GetProductViewsArgs) ThriftName() string {
  return "getProductViews_args"
}

func (p *GetProductViewsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductViewsArgs(%+v)", *p)
}

func (p *GetProductViewsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetProductViewsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Request.CompareTo(data.Request); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetProductViewsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Request
  }
  return nil
}

func (p *GetProductViewsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - CmsException
 */
type GetProductViewsResult struct {
  thrift.TStruct
  Success *ViewResult "success"; // 0
  CmsException *CMSException "cmsException"; // 1
}

func NewGetProductViewsResult() *GetProductViewsResult {
  output := &GetProductViewsResult{
    TStruct:thrift.NewTStruct("getProductViews_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetProductViewsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "cmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductViewsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewViewResult()
  err1548 := p.Success.Read(iprot)
  if err1548 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessViewResult", err1548); }
  return err
}

func (p *GetProductViewsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetProductViewsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsException = NewCms.ttypes.CMSException()
  err1551 := p.CmsException.Read(iprot)
  if err1551 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsExceptionCMSException", err1551); }
  return err
}

func (p *GetProductViewsResult) ReadFieldCmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetProductViewsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getProductViews_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.CmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductViewsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ViewResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductViewsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetProductViewsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsException != nil {
    err = oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
    err = p.CmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductViewsResult) WriteFieldCmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetProductViewsResult) TStructName() string {
  return "GetProductViewsResult"
}

func (p *GetProductViewsResult) ThriftName() string {
  return "getProductViews_result"
}

func (p *GetProductViewsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductViewsResult(%+v)", *p)
}

func (p *GetProductViewsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetProductViewsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.CmsException.CompareTo(data.CmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetProductViewsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.CmsException
  }
  return nil
}

func (p *GetProductViewsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Request
 */
type GetViewDefinitionArgs struct {
  thrift.TStruct
  Request *ViewDefinitionRequest "request"; // 1
}

func NewGetViewDefinitionArgs() *GetViewDefinitionArgs {
  output := &GetViewDefinitionArgs{
    TStruct:thrift.NewTStruct("getViewDefinition_args", []thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetViewDefinitionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "request" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetViewDefinitionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Request = NewViewDefinitionRequest()
  err1554 := p.Request.Read(iprot)
  if err1554 != nil { return thrift.NewTProtocolExceptionReadStruct("p.RequestViewDefinitionRequest", err1554); }
  return err
}

func (p *GetViewDefinitionArgs) ReadFieldRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetViewDefinitionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getViewDefinition_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetViewDefinitionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Request != nil {
    err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
    err = p.Request.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ViewDefinitionRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "request", p.ThriftName(), err); }
  }
  return err
}

func (p *GetViewDefinitionArgs) WriteFieldRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetViewDefinitionArgs) TStructName() string {
  return "GetViewDefinitionArgs"
}

func (p *GetViewDefinitionArgs) ThriftName() string {
  return "getViewDefinition_args"
}

func (p *GetViewDefinitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetViewDefinitionArgs(%+v)", *p)
}

func (p *GetViewDefinitionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetViewDefinitionArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Request.CompareTo(data.Request); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetViewDefinitionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Request
  }
  return nil
}

func (p *GetViewDefinitionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("request", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - CmsException
 */
type GetViewDefinitionResult struct {
  thrift.TStruct
  Success *ViewDefinitionResult "success"; // 0
  CmsException *CMSException "cmsException"; // 1
}

func NewGetViewDefinitionResult() *GetViewDefinitionResult {
  output := &GetViewDefinitionResult{
    TStruct:thrift.NewTStruct("getViewDefinition_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetViewDefinitionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "cmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetViewDefinitionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewViewDefinitionResult()
  err1557 := p.Success.Read(iprot)
  if err1557 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessViewDefinitionResult", err1557); }
  return err
}

func (p *GetViewDefinitionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetViewDefinitionResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsException = NewCms.ttypes.CMSException()
  err1560 := p.CmsException.Read(iprot)
  if err1560 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsExceptionCMSException", err1560); }
  return err
}

func (p *GetViewDefinitionResult) ReadFieldCmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetViewDefinitionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getViewDefinition_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.CmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetViewDefinitionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ViewDefinitionResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetViewDefinitionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetViewDefinitionResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsException != nil {
    err = oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
    err = p.CmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "cmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetViewDefinitionResult) WriteFieldCmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetViewDefinitionResult) TStructName() string {
  return "GetViewDefinitionResult"
}

func (p *GetViewDefinitionResult) ThriftName() string {
  return "getViewDefinition_result"
}

func (p *GetViewDefinitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetViewDefinitionResult(%+v)", *p)
}

func (p *GetViewDefinitionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetViewDefinitionResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.CmsException.CompareTo(data.CmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetViewDefinitionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.CmsException
  }
  return nil
}

func (p *GetViewDefinitionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("cmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - ContributorInfoRequest
 */
type GetContributorInfoArgs struct {
  thrift.TStruct
  ContributorInfoRequest *ContributorInfoRequest "contributorInfoRequest"; // 1
}

func NewGetContributorInfoArgs() *GetContributorInfoArgs {
  output := &GetContributorInfoArgs{
    TStruct:thrift.NewTStruct("getContributorInfo_args", []thrift.TField{
    thrift.NewTField("contributorInfoRequest", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetContributorInfoArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "contributorInfoRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetContributorInfoArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.ContributorInfoRequest = NewContributorInfoRequest()
  err1563 := p.ContributorInfoRequest.Read(iprot)
  if err1563 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ContributorInfoRequestContributorInfoRequest", err1563); }
  return err
}

func (p *GetContributorInfoArgs) ReadFieldContributorInfoRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetContributorInfoArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getContributorInfo_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetContributorInfoArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ContributorInfoRequest != nil {
    err = oprot.WriteFieldBegin("contributorInfoRequest", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "contributorInfoRequest", p.ThriftName(), err); }
    err = p.ContributorInfoRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ContributorInfoRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "contributorInfoRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *GetContributorInfoArgs) WriteFieldContributorInfoRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetContributorInfoArgs) TStructName() string {
  return "GetContributorInfoArgs"
}

func (p *GetContributorInfoArgs) ThriftName() string {
  return "getContributorInfo_args"
}

func (p *GetContributorInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetContributorInfoArgs(%+v)", *p)
}

func (p *GetContributorInfoArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetContributorInfoArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ContributorInfoRequest.CompareTo(data.ContributorInfoRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetContributorInfoArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ContributorInfoRequest
  }
  return nil
}

func (p *GetContributorInfoArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("contributorInfoRequest", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - SpcmsException
 */
type GetContributorInfoResult struct {
  thrift.TStruct
  Success *ContributorInfoResult "success"; // 0
  SpcmsException *SPCMSException "spcmsException"; // 1
}

func NewGetContributorInfoResult() *GetContributorInfoResult {
  output := &GetContributorInfoResult{
    TStruct:thrift.NewTStruct("getContributorInfo_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetContributorInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "spcmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetContributorInfoResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewContributorInfoResult()
  err1566 := p.Success.Read(iprot)
  if err1566 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessContributorInfoResult", err1566); }
  return err
}

func (p *GetContributorInfoResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetContributorInfoResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SpcmsException = NewSPCMSException()
  err1569 := p.SpcmsException.Read(iprot)
  if err1569 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SpcmsExceptionSPCMSException", err1569); }
  return err
}

func (p *GetContributorInfoResult) ReadFieldSpcmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetContributorInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getContributorInfo_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.SpcmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetContributorInfoResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ContributorInfoResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetContributorInfoResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetContributorInfoResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SpcmsException != nil {
    err = oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
    err = p.SpcmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SPCMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetContributorInfoResult) WriteFieldSpcmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetContributorInfoResult) TStructName() string {
  return "GetContributorInfoResult"
}

func (p *GetContributorInfoResult) ThriftName() string {
  return "getContributorInfo_result"
}

func (p *GetContributorInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetContributorInfoResult(%+v)", *p)
}

func (p *GetContributorInfoResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetContributorInfoResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SpcmsException.CompareTo(data.SpcmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetContributorInfoResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.SpcmsException
  }
  return nil
}

func (p *GetContributorInfoResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - ItemsRequest
 */
type GetItemsArgs struct {
  thrift.TStruct
  ItemsRequest *ItemsRequest "itemsRequest"; // 1
}

func NewGetItemsArgs() *GetItemsArgs {
  output := &GetItemsArgs{
    TStruct:thrift.NewTStruct("getItems_args", []thrift.TField{
    thrift.NewTField("itemsRequest", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetItemsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "itemsRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetItemsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.ItemsRequest = NewItemsRequest()
  err1572 := p.ItemsRequest.Read(iprot)
  if err1572 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ItemsRequestItemsRequest", err1572); }
  return err
}

func (p *GetItemsArgs) ReadFieldItemsRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetItemsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getItems_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetItemsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ItemsRequest != nil {
    err = oprot.WriteFieldBegin("itemsRequest", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemsRequest", p.ThriftName(), err); }
    err = p.ItemsRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ItemsRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemsRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *GetItemsArgs) WriteFieldItemsRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetItemsArgs) TStructName() string {
  return "GetItemsArgs"
}

func (p *GetItemsArgs) ThriftName() string {
  return "getItems_args"
}

func (p *GetItemsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetItemsArgs(%+v)", *p)
}

func (p *GetItemsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetItemsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ItemsRequest.CompareTo(data.ItemsRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetItemsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ItemsRequest
  }
  return nil
}

func (p *GetItemsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("itemsRequest", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - SpcmsException
 */
type GetItemsResult struct {
  thrift.TStruct
  Success *ItemsResult "success"; // 0
  SpcmsException *SPCMSException "spcmsException"; // 1
}

func NewGetItemsResult() *GetItemsResult {
  output := &GetItemsResult{
    TStruct:thrift.NewTStruct("getItems_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetItemsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "spcmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetItemsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewItemsResult()
  err1575 := p.Success.Read(iprot)
  if err1575 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessItemsResult", err1575); }
  return err
}

func (p *GetItemsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetItemsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SpcmsException = NewSPCMSException()
  err1578 := p.SpcmsException.Read(iprot)
  if err1578 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SpcmsExceptionSPCMSException", err1578); }
  return err
}

func (p *GetItemsResult) ReadFieldSpcmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetItemsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getItems_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.SpcmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetItemsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ItemsResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetItemsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetItemsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SpcmsException != nil {
    err = oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
    err = p.SpcmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SPCMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetItemsResult) WriteFieldSpcmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetItemsResult) TStructName() string {
  return "GetItemsResult"
}

func (p *GetItemsResult) ThriftName() string {
  return "getItems_result"
}

func (p *GetItemsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetItemsResult(%+v)", *p)
}

func (p *GetItemsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetItemsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SpcmsException.CompareTo(data.SpcmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetItemsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.SpcmsException
  }
  return nil
}

func (p *GetItemsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - ItemDetailsRequest
 */
type GetItemDetailsArgs struct {
  thrift.TStruct
  ItemDetailsRequest *ItemDetailsRequest "itemDetailsRequest"; // 1
}

func NewGetItemDetailsArgs() *GetItemDetailsArgs {
  output := &GetItemDetailsArgs{
    TStruct:thrift.NewTStruct("getItemDetails_args", []thrift.TField{
    thrift.NewTField("itemDetailsRequest", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetItemDetailsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "itemDetailsRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetItemDetailsArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.ItemDetailsRequest = NewItemDetailsRequest()
  err1581 := p.ItemDetailsRequest.Read(iprot)
  if err1581 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ItemDetailsRequestItemDetailsRequest", err1581); }
  return err
}

func (p *GetItemDetailsArgs) ReadFieldItemDetailsRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetItemDetailsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getItemDetails_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetItemDetailsArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ItemDetailsRequest != nil {
    err = oprot.WriteFieldBegin("itemDetailsRequest", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemDetailsRequest", p.ThriftName(), err); }
    err = p.ItemDetailsRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ItemDetailsRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemDetailsRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *GetItemDetailsArgs) WriteFieldItemDetailsRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetItemDetailsArgs) TStructName() string {
  return "GetItemDetailsArgs"
}

func (p *GetItemDetailsArgs) ThriftName() string {
  return "getItemDetails_args"
}

func (p *GetItemDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetItemDetailsArgs(%+v)", *p)
}

func (p *GetItemDetailsArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetItemDetailsArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ItemDetailsRequest.CompareTo(data.ItemDetailsRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetItemDetailsArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ItemDetailsRequest
  }
  return nil
}

func (p *GetItemDetailsArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("itemDetailsRequest", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - SpcmsException
 */
type GetItemDetailsResult struct {
  thrift.TStruct
  Success *ItemDetailsResult "success"; // 0
  SpcmsException *SPCMSException "spcmsException"; // 1
}

func NewGetItemDetailsResult() *GetItemDetailsResult {
  output := &GetItemDetailsResult{
    TStruct:thrift.NewTStruct("getItemDetails_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetItemDetailsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "spcmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetItemDetailsResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewItemDetailsResult()
  err1584 := p.Success.Read(iprot)
  if err1584 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessItemDetailsResult", err1584); }
  return err
}

func (p *GetItemDetailsResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetItemDetailsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SpcmsException = NewSPCMSException()
  err1587 := p.SpcmsException.Read(iprot)
  if err1587 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SpcmsExceptionSPCMSException", err1587); }
  return err
}

func (p *GetItemDetailsResult) ReadFieldSpcmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetItemDetailsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getItemDetails_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.SpcmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetItemDetailsResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ItemDetailsResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetItemDetailsResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetItemDetailsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SpcmsException != nil {
    err = oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
    err = p.SpcmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SPCMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetItemDetailsResult) WriteFieldSpcmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetItemDetailsResult) TStructName() string {
  return "GetItemDetailsResult"
}

func (p *GetItemDetailsResult) ThriftName() string {
  return "getItemDetails_result"
}

func (p *GetItemDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetItemDetailsResult(%+v)", *p)
}

func (p *GetItemDetailsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetItemDetailsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SpcmsException.CompareTo(data.SpcmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetItemDetailsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.SpcmsException
  }
  return nil
}

func (p *GetItemDetailsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - CategoryTreeRequest
 */
type GetCategorizationTreeArgs struct {
  thrift.TStruct
  CategoryTreeRequest *CategoryTreeRequest "categoryTreeRequest"; // 1
}

func NewGetCategorizationTreeArgs() *GetCategorizationTreeArgs {
  output := &GetCategorizationTreeArgs{
    TStruct:thrift.NewTStruct("getCategorizationTree_args", []thrift.TField{
    thrift.NewTField("categoryTreeRequest", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetCategorizationTreeArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "categoryTreeRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCategorizationTreeArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CategoryTreeRequest = NewCategoryTreeRequest()
  err1590 := p.CategoryTreeRequest.Read(iprot)
  if err1590 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CategoryTreeRequestCategoryTreeRequest", err1590); }
  return err
}

func (p *GetCategorizationTreeArgs) ReadFieldCategoryTreeRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetCategorizationTreeArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getCategorizationTree_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCategorizationTreeArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CategoryTreeRequest != nil {
    err = oprot.WriteFieldBegin("categoryTreeRequest", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "categoryTreeRequest", p.ThriftName(), err); }
    err = p.CategoryTreeRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategoryTreeRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "categoryTreeRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *GetCategorizationTreeArgs) WriteFieldCategoryTreeRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetCategorizationTreeArgs) TStructName() string {
  return "GetCategorizationTreeArgs"
}

func (p *GetCategorizationTreeArgs) ThriftName() string {
  return "getCategorizationTree_args"
}

func (p *GetCategorizationTreeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCategorizationTreeArgs(%+v)", *p)
}

func (p *GetCategorizationTreeArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetCategorizationTreeArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.CategoryTreeRequest.CompareTo(data.CategoryTreeRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetCategorizationTreeArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.CategoryTreeRequest
  }
  return nil
}

func (p *GetCategorizationTreeArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("categoryTreeRequest", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - SpcmsException
 */
type GetCategorizationTreeResult struct {
  thrift.TStruct
  Success *CategoryTreeResult "success"; // 0
  SpcmsException *SPCMSException "spcmsException"; // 1
}

func NewGetCategorizationTreeResult() *GetCategorizationTreeResult {
  output := &GetCategorizationTreeResult{
    TStruct:thrift.NewTStruct("getCategorizationTree_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetCategorizationTreeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "spcmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCategorizationTreeResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewCategoryTreeResult()
  err1593 := p.Success.Read(iprot)
  if err1593 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessCategoryTreeResult", err1593); }
  return err
}

func (p *GetCategorizationTreeResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetCategorizationTreeResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SpcmsException = NewSPCMSException()
  err1596 := p.SpcmsException.Read(iprot)
  if err1596 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SpcmsExceptionSPCMSException", err1596); }
  return err
}

func (p *GetCategorizationTreeResult) ReadFieldSpcmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetCategorizationTreeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getCategorizationTree_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.SpcmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCategorizationTreeResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategoryTreeResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetCategorizationTreeResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetCategorizationTreeResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SpcmsException != nil {
    err = oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
    err = p.SpcmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SPCMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetCategorizationTreeResult) WriteFieldSpcmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetCategorizationTreeResult) TStructName() string {
  return "GetCategorizationTreeResult"
}

func (p *GetCategorizationTreeResult) ThriftName() string {
  return "getCategorizationTree_result"
}

func (p *GetCategorizationTreeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCategorizationTreeResult(%+v)", *p)
}

func (p *GetCategorizationTreeResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetCategorizationTreeResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SpcmsException.CompareTo(data.SpcmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetCategorizationTreeResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.SpcmsException
  }
  return nil
}

func (p *GetCategorizationTreeResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - CategoryNodeInfoRequest
 */
type GetCategoryNodeInfoArgs struct {
  thrift.TStruct
  CategoryNodeInfoRequest *CategoryNodeInfoRequest "categoryNodeInfoRequest"; // 1
}

func NewGetCategoryNodeInfoArgs() *GetCategoryNodeInfoArgs {
  output := &GetCategoryNodeInfoArgs{
    TStruct:thrift.NewTStruct("getCategoryNodeInfo_args", []thrift.TField{
    thrift.NewTField("categoryNodeInfoRequest", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetCategoryNodeInfoArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "categoryNodeInfoRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCategoryNodeInfoArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CategoryNodeInfoRequest = NewCategoryNodeInfoRequest()
  err1599 := p.CategoryNodeInfoRequest.Read(iprot)
  if err1599 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CategoryNodeInfoRequestCategoryNodeInfoRequest", err1599); }
  return err
}

func (p *GetCategoryNodeInfoArgs) ReadFieldCategoryNodeInfoRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetCategoryNodeInfoArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getCategoryNodeInfo_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCategoryNodeInfoArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CategoryNodeInfoRequest != nil {
    err = oprot.WriteFieldBegin("categoryNodeInfoRequest", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "categoryNodeInfoRequest", p.ThriftName(), err); }
    err = p.CategoryNodeInfoRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategoryNodeInfoRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "categoryNodeInfoRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *GetCategoryNodeInfoArgs) WriteFieldCategoryNodeInfoRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetCategoryNodeInfoArgs) TStructName() string {
  return "GetCategoryNodeInfoArgs"
}

func (p *GetCategoryNodeInfoArgs) ThriftName() string {
  return "getCategoryNodeInfo_args"
}

func (p *GetCategoryNodeInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCategoryNodeInfoArgs(%+v)", *p)
}

func (p *GetCategoryNodeInfoArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetCategoryNodeInfoArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.CategoryNodeInfoRequest.CompareTo(data.CategoryNodeInfoRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetCategoryNodeInfoArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.CategoryNodeInfoRequest
  }
  return nil
}

func (p *GetCategoryNodeInfoArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("categoryNodeInfoRequest", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - SpcmsException
 */
type GetCategoryNodeInfoResult struct {
  thrift.TStruct
  Success *CategoryNodeInfoResult "success"; // 0
  SpcmsException *SPCMSException "spcmsException"; // 1
}

func NewGetCategoryNodeInfoResult() *GetCategoryNodeInfoResult {
  output := &GetCategoryNodeInfoResult{
    TStruct:thrift.NewTStruct("getCategoryNodeInfo_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetCategoryNodeInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "spcmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCategoryNodeInfoResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewCategoryNodeInfoResult()
  err1602 := p.Success.Read(iprot)
  if err1602 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessCategoryNodeInfoResult", err1602); }
  return err
}

func (p *GetCategoryNodeInfoResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetCategoryNodeInfoResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SpcmsException = NewSPCMSException()
  err1605 := p.SpcmsException.Read(iprot)
  if err1605 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SpcmsExceptionSPCMSException", err1605); }
  return err
}

func (p *GetCategoryNodeInfoResult) ReadFieldSpcmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetCategoryNodeInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getCategoryNodeInfo_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.SpcmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCategoryNodeInfoResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategoryNodeInfoResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetCategoryNodeInfoResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetCategoryNodeInfoResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SpcmsException != nil {
    err = oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
    err = p.SpcmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SPCMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetCategoryNodeInfoResult) WriteFieldSpcmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetCategoryNodeInfoResult) TStructName() string {
  return "GetCategoryNodeInfoResult"
}

func (p *GetCategoryNodeInfoResult) ThriftName() string {
  return "getCategoryNodeInfo_result"
}

func (p *GetCategoryNodeInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCategoryNodeInfoResult(%+v)", *p)
}

func (p *GetCategoryNodeInfoResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetCategoryNodeInfoResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SpcmsException.CompareTo(data.SpcmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetCategoryNodeInfoResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.SpcmsException
  }
  return nil
}

func (p *GetCategoryNodeInfoResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - CategoryPathRequest
 */
type GetCategoryPathArgs struct {
  thrift.TStruct
  CategoryPathRequest *CategoryPathRequest "categoryPathRequest"; // 1
}

func NewGetCategoryPathArgs() *GetCategoryPathArgs {
  output := &GetCategoryPathArgs{
    TStruct:thrift.NewTStruct("getCategoryPath_args", []thrift.TField{
    thrift.NewTField("categoryPathRequest", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetCategoryPathArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "categoryPathRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCategoryPathArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CategoryPathRequest = NewCategoryPathRequest()
  err1608 := p.CategoryPathRequest.Read(iprot)
  if err1608 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CategoryPathRequestCategoryPathRequest", err1608); }
  return err
}

func (p *GetCategoryPathArgs) ReadFieldCategoryPathRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetCategoryPathArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getCategoryPath_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCategoryPathArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CategoryPathRequest != nil {
    err = oprot.WriteFieldBegin("categoryPathRequest", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "categoryPathRequest", p.ThriftName(), err); }
    err = p.CategoryPathRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategoryPathRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "categoryPathRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *GetCategoryPathArgs) WriteFieldCategoryPathRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetCategoryPathArgs) TStructName() string {
  return "GetCategoryPathArgs"
}

func (p *GetCategoryPathArgs) ThriftName() string {
  return "getCategoryPath_args"
}

func (p *GetCategoryPathArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCategoryPathArgs(%+v)", *p)
}

func (p *GetCategoryPathArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetCategoryPathArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.CategoryPathRequest.CompareTo(data.CategoryPathRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetCategoryPathArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.CategoryPathRequest
  }
  return nil
}

func (p *GetCategoryPathArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("categoryPathRequest", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - SpcmsException
 */
type GetCategoryPathResult struct {
  thrift.TStruct
  Success *CategoryPathResult "success"; // 0
  SpcmsException *SPCMSException "spcmsException"; // 1
}

func NewGetCategoryPathResult() *GetCategoryPathResult {
  output := &GetCategoryPathResult{
    TStruct:thrift.NewTStruct("getCategoryPath_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetCategoryPathResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "spcmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCategoryPathResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewCategoryPathResult()
  err1611 := p.Success.Read(iprot)
  if err1611 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessCategoryPathResult", err1611); }
  return err
}

func (p *GetCategoryPathResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetCategoryPathResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SpcmsException = NewSPCMSException()
  err1614 := p.SpcmsException.Read(iprot)
  if err1614 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SpcmsExceptionSPCMSException", err1614); }
  return err
}

func (p *GetCategoryPathResult) ReadFieldSpcmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetCategoryPathResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getCategoryPath_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.SpcmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetCategoryPathResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategoryPathResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetCategoryPathResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetCategoryPathResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SpcmsException != nil {
    err = oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
    err = p.SpcmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SPCMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetCategoryPathResult) WriteFieldSpcmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetCategoryPathResult) TStructName() string {
  return "GetCategoryPathResult"
}

func (p *GetCategoryPathResult) ThriftName() string {
  return "getCategoryPath_result"
}

func (p *GetCategoryPathResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCategoryPathResult(%+v)", *p)
}

func (p *GetCategoryPathResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetCategoryPathResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SpcmsException.CompareTo(data.SpcmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetCategoryPathResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.SpcmsException
  }
  return nil
}

func (p *GetCategoryPathResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - ItemHistoryRequest
 */
type GetProductItemHistoryArgs struct {
  thrift.TStruct
  ItemHistoryRequest *ItemHistoryRequest "itemHistoryRequest"; // 1
}

func NewGetProductItemHistoryArgs() *GetProductItemHistoryArgs {
  output := &GetProductItemHistoryArgs{
    TStruct:thrift.NewTStruct("getProductItemHistory_args", []thrift.TField{
    thrift.NewTField("itemHistoryRequest", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetProductItemHistoryArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "itemHistoryRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductItemHistoryArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.ItemHistoryRequest = NewItemHistoryRequest()
  err1617 := p.ItemHistoryRequest.Read(iprot)
  if err1617 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ItemHistoryRequestItemHistoryRequest", err1617); }
  return err
}

func (p *GetProductItemHistoryArgs) ReadFieldItemHistoryRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetProductItemHistoryArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getProductItemHistory_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductItemHistoryArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ItemHistoryRequest != nil {
    err = oprot.WriteFieldBegin("itemHistoryRequest", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemHistoryRequest", p.ThriftName(), err); }
    err = p.ItemHistoryRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ItemHistoryRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "itemHistoryRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductItemHistoryArgs) WriteFieldItemHistoryRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetProductItemHistoryArgs) TStructName() string {
  return "GetProductItemHistoryArgs"
}

func (p *GetProductItemHistoryArgs) ThriftName() string {
  return "getProductItemHistory_args"
}

func (p *GetProductItemHistoryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductItemHistoryArgs(%+v)", *p)
}

func (p *GetProductItemHistoryArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetProductItemHistoryArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ItemHistoryRequest.CompareTo(data.ItemHistoryRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetProductItemHistoryArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ItemHistoryRequest
  }
  return nil
}

func (p *GetProductItemHistoryArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("itemHistoryRequest", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - SpcmsException
 */
type GetProductItemHistoryResult struct {
  thrift.TStruct
  Success *ItemHistoryResult "success"; // 0
  SpcmsException *SPCMSException "spcmsException"; // 1
}

func NewGetProductItemHistoryResult() *GetProductItemHistoryResult {
  output := &GetProductItemHistoryResult{
    TStruct:thrift.NewTStruct("getProductItemHistory_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetProductItemHistoryResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "spcmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductItemHistoryResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewItemHistoryResult()
  err1620 := p.Success.Read(iprot)
  if err1620 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessItemHistoryResult", err1620); }
  return err
}

func (p *GetProductItemHistoryResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetProductItemHistoryResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SpcmsException = NewSPCMSException()
  err1623 := p.SpcmsException.Read(iprot)
  if err1623 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SpcmsExceptionSPCMSException", err1623); }
  return err
}

func (p *GetProductItemHistoryResult) ReadFieldSpcmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetProductItemHistoryResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getProductItemHistory_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.SpcmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductItemHistoryResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ItemHistoryResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductItemHistoryResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetProductItemHistoryResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SpcmsException != nil {
    err = oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
    err = p.SpcmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SPCMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductItemHistoryResult) WriteFieldSpcmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetProductItemHistoryResult) TStructName() string {
  return "GetProductItemHistoryResult"
}

func (p *GetProductItemHistoryResult) ThriftName() string {
  return "getProductItemHistory_result"
}

func (p *GetProductItemHistoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductItemHistoryResult(%+v)", *p)
}

func (p *GetProductItemHistoryResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetProductItemHistoryResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SpcmsException.CompareTo(data.SpcmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetProductItemHistoryResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.SpcmsException
  }
  return nil
}

func (p *GetProductItemHistoryResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - VerticalAttributeDefinitionRequest
 */
type GetVerticalAttributeDefinitionArgs struct {
  thrift.TStruct
  VerticalAttributeDefinitionRequest *VerticalAttributeDefinitionRequest "verticalAttributeDefinitionRequest"; // 1
}

func NewGetVerticalAttributeDefinitionArgs() *GetVerticalAttributeDefinitionArgs {
  output := &GetVerticalAttributeDefinitionArgs{
    TStruct:thrift.NewTStruct("getVerticalAttributeDefinition_args", []thrift.TField{
    thrift.NewTField("verticalAttributeDefinitionRequest", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetVerticalAttributeDefinitionArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "verticalAttributeDefinitionRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVerticalAttributeDefinitionArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.VerticalAttributeDefinitionRequest = NewVerticalAttributeDefinitionRequest()
  err1626 := p.VerticalAttributeDefinitionRequest.Read(iprot)
  if err1626 != nil { return thrift.NewTProtocolExceptionReadStruct("p.VerticalAttributeDefinitionRequestVerticalAttributeDefinitionRequest", err1626); }
  return err
}

func (p *GetVerticalAttributeDefinitionArgs) ReadFieldVerticalAttributeDefinitionRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetVerticalAttributeDefinitionArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getVerticalAttributeDefinition_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVerticalAttributeDefinitionArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.VerticalAttributeDefinitionRequest != nil {
    err = oprot.WriteFieldBegin("verticalAttributeDefinitionRequest", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalAttributeDefinitionRequest", p.ThriftName(), err); }
    err = p.VerticalAttributeDefinitionRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("VerticalAttributeDefinitionRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalAttributeDefinitionRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *GetVerticalAttributeDefinitionArgs) WriteFieldVerticalAttributeDefinitionRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetVerticalAttributeDefinitionArgs) TStructName() string {
  return "GetVerticalAttributeDefinitionArgs"
}

func (p *GetVerticalAttributeDefinitionArgs) ThriftName() string {
  return "getVerticalAttributeDefinition_args"
}

func (p *GetVerticalAttributeDefinitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetVerticalAttributeDefinitionArgs(%+v)", *p)
}

func (p *GetVerticalAttributeDefinitionArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetVerticalAttributeDefinitionArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.VerticalAttributeDefinitionRequest.CompareTo(data.VerticalAttributeDefinitionRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetVerticalAttributeDefinitionArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.VerticalAttributeDefinitionRequest
  }
  return nil
}

func (p *GetVerticalAttributeDefinitionArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("verticalAttributeDefinitionRequest", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - SpcmsException
 */
type GetVerticalAttributeDefinitionResult struct {
  thrift.TStruct
  Success *VerticalAttributeDefinitionResult "success"; // 0
  SpcmsException *SPCMSException "spcmsException"; // 1
}

func NewGetVerticalAttributeDefinitionResult() *GetVerticalAttributeDefinitionResult {
  output := &GetVerticalAttributeDefinitionResult{
    TStruct:thrift.NewTStruct("getVerticalAttributeDefinition_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetVerticalAttributeDefinitionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "spcmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVerticalAttributeDefinitionResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewVerticalAttributeDefinitionResult()
  err1629 := p.Success.Read(iprot)
  if err1629 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessVerticalAttributeDefinitionResult", err1629); }
  return err
}

func (p *GetVerticalAttributeDefinitionResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetVerticalAttributeDefinitionResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SpcmsException = NewSPCMSException()
  err1632 := p.SpcmsException.Read(iprot)
  if err1632 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SpcmsExceptionSPCMSException", err1632); }
  return err
}

func (p *GetVerticalAttributeDefinitionResult) ReadFieldSpcmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetVerticalAttributeDefinitionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getVerticalAttributeDefinition_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.SpcmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetVerticalAttributeDefinitionResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("VerticalAttributeDefinitionResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetVerticalAttributeDefinitionResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetVerticalAttributeDefinitionResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SpcmsException != nil {
    err = oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
    err = p.SpcmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SPCMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetVerticalAttributeDefinitionResult) WriteFieldSpcmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetVerticalAttributeDefinitionResult) TStructName() string {
  return "GetVerticalAttributeDefinitionResult"
}

func (p *GetVerticalAttributeDefinitionResult) ThriftName() string {
  return "getVerticalAttributeDefinition_result"
}

func (p *GetVerticalAttributeDefinitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetVerticalAttributeDefinitionResult(%+v)", *p)
}

func (p *GetVerticalAttributeDefinitionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetVerticalAttributeDefinitionResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SpcmsException.CompareTo(data.SpcmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetVerticalAttributeDefinitionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.SpcmsException
  }
  return nil
}

func (p *GetVerticalAttributeDefinitionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - MetaDataRequest
 */
type GetMetaDataArgs struct {
  thrift.TStruct
  MetaDataRequest *MetaDataRequest "metaDataRequest"; // 1
}

func NewGetMetaDataArgs() *GetMetaDataArgs {
  output := &GetMetaDataArgs{
    TStruct:thrift.NewTStruct("getMetaData_args", []thrift.TField{
    thrift.NewTField("metaDataRequest", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetMetaDataArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "metaDataRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMetaDataArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.MetaDataRequest = NewMetaDataRequest()
  err1635 := p.MetaDataRequest.Read(iprot)
  if err1635 != nil { return thrift.NewTProtocolExceptionReadStruct("p.MetaDataRequestMetaDataRequest", err1635); }
  return err
}

func (p *GetMetaDataArgs) ReadFieldMetaDataRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetMetaDataArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getMetaData_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMetaDataArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.MetaDataRequest != nil {
    err = oprot.WriteFieldBegin("metaDataRequest", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "metaDataRequest", p.ThriftName(), err); }
    err = p.MetaDataRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaDataRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "metaDataRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *GetMetaDataArgs) WriteFieldMetaDataRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetMetaDataArgs) TStructName() string {
  return "GetMetaDataArgs"
}

func (p *GetMetaDataArgs) ThriftName() string {
  return "getMetaData_args"
}

func (p *GetMetaDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMetaDataArgs(%+v)", *p)
}

func (p *GetMetaDataArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetMetaDataArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.MetaDataRequest.CompareTo(data.MetaDataRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetMetaDataArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.MetaDataRequest
  }
  return nil
}

func (p *GetMetaDataArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("metaDataRequest", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - SpcmsException
 */
type GetMetaDataResult struct {
  thrift.TStruct
  Success *MetaDataResponse "success"; // 0
  SpcmsException *SPCMSException "spcmsException"; // 1
}

func NewGetMetaDataResult() *GetMetaDataResult {
  output := &GetMetaDataResult{
    TStruct:thrift.NewTStruct("getMetaData_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetMetaDataResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "spcmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMetaDataResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewMetaDataResponse()
  err1638 := p.Success.Read(iprot)
  if err1638 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessMetaDataResponse", err1638); }
  return err
}

func (p *GetMetaDataResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetMetaDataResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SpcmsException = NewSPCMSException()
  err1641 := p.SpcmsException.Read(iprot)
  if err1641 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SpcmsExceptionSPCMSException", err1641); }
  return err
}

func (p *GetMetaDataResult) ReadFieldSpcmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetMetaDataResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getMetaData_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.SpcmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetMetaDataResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("MetaDataResponse", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetMetaDataResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetMetaDataResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SpcmsException != nil {
    err = oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
    err = p.SpcmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SPCMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetMetaDataResult) WriteFieldSpcmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetMetaDataResult) TStructName() string {
  return "GetMetaDataResult"
}

func (p *GetMetaDataResult) ThriftName() string {
  return "getMetaData_result"
}

func (p *GetMetaDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMetaDataResult(%+v)", *p)
}

func (p *GetMetaDataResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetMetaDataResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SpcmsException.CompareTo(data.SpcmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetMetaDataResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.SpcmsException
  }
  return nil
}

func (p *GetMetaDataResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - EntitySearchRequest
 */
type SearchEntityArgs struct {
  thrift.TStruct
  EntitySearchRequest *EntitySearchRequest "entitySearchRequest"; // 1
}

func NewSearchEntityArgs() *SearchEntityArgs {
  output := &SearchEntityArgs{
    TStruct:thrift.NewTStruct("searchEntity_args", []thrift.TField{
    thrift.NewTField("entitySearchRequest", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *SearchEntityArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "entitySearchRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SearchEntityArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.EntitySearchRequest = NewEntitySearchRequest()
  err1644 := p.EntitySearchRequest.Read(iprot)
  if err1644 != nil { return thrift.NewTProtocolExceptionReadStruct("p.EntitySearchRequestEntitySearchRequest", err1644); }
  return err
}

func (p *SearchEntityArgs) ReadFieldEntitySearchRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SearchEntityArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("searchEntity_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SearchEntityArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.EntitySearchRequest != nil {
    err = oprot.WriteFieldBegin("entitySearchRequest", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "entitySearchRequest", p.ThriftName(), err); }
    err = p.EntitySearchRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("EntitySearchRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "entitySearchRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *SearchEntityArgs) WriteFieldEntitySearchRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SearchEntityArgs) TStructName() string {
  return "SearchEntityArgs"
}

func (p *SearchEntityArgs) ThriftName() string {
  return "searchEntity_args"
}

func (p *SearchEntityArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchEntityArgs(%+v)", *p)
}

func (p *SearchEntityArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SearchEntityArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.EntitySearchRequest.CompareTo(data.EntitySearchRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SearchEntityArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.EntitySearchRequest
  }
  return nil
}

func (p *SearchEntityArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("entitySearchRequest", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - SpcmsException
 */
type SearchEntityResult struct {
  thrift.TStruct
  Success *EntitySearchResult "success"; // 0
  SpcmsException *SPCMSException "spcmsException"; // 1
}

func NewSearchEntityResult() *SearchEntityResult {
  output := &SearchEntityResult{
    TStruct:thrift.NewTStruct("searchEntity_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *SearchEntityResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "spcmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *SearchEntityResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewEntitySearchResult()
  err1647 := p.Success.Read(iprot)
  if err1647 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessEntitySearchResult", err1647); }
  return err
}

func (p *SearchEntityResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *SearchEntityResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SpcmsException = NewSPCMSException()
  err1650 := p.SpcmsException.Read(iprot)
  if err1650 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SpcmsExceptionSPCMSException", err1650); }
  return err
}

func (p *SearchEntityResult) ReadFieldSpcmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *SearchEntityResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("searchEntity_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.SpcmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *SearchEntityResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("EntitySearchResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *SearchEntityResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *SearchEntityResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SpcmsException != nil {
    err = oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
    err = p.SpcmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SPCMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *SearchEntityResult) WriteFieldSpcmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *SearchEntityResult) TStructName() string {
  return "SearchEntityResult"
}

func (p *SearchEntityResult) ThriftName() string {
  return "searchEntity_result"
}

func (p *SearchEntityResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchEntityResult(%+v)", *p)
}

func (p *SearchEntityResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*SearchEntityResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SpcmsException.CompareTo(data.SpcmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *SearchEntityResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.SpcmsException
  }
  return nil
}

func (p *SearchEntityResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - ProductIdForEGVRequest
 */
type GetProductIDForEGVArgs struct {
  thrift.TStruct
  ProductIdForEGVRequest *ProductIdForEGVRequest "productIdForEGVRequest"; // 1
}

func NewGetProductIDForEGVArgs() *GetProductIDForEGVArgs {
  output := &GetProductIDForEGVArgs{
    TStruct:thrift.NewTStruct("getProductIDForEGV_args", []thrift.TField{
    thrift.NewTField("productIdForEGVRequest", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetProductIDForEGVArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "productIdForEGVRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductIDForEGVArgs) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.ProductIdForEGVRequest = NewProductIdForEGVRequest()
  err1653 := p.ProductIdForEGVRequest.Read(iprot)
  if err1653 != nil { return thrift.NewTProtocolExceptionReadStruct("p.ProductIdForEGVRequestProductIdForEGVRequest", err1653); }
  return err
}

func (p *GetProductIDForEGVArgs) ReadFieldProductIdForEGVRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetProductIDForEGVArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getProductIDForEGV_args")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductIDForEGVArgs) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductIdForEGVRequest != nil {
    err = oprot.WriteFieldBegin("productIdForEGVRequest", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIdForEGVRequest", p.ThriftName(), err); }
    err = p.ProductIdForEGVRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductIdForEGVRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "productIdForEGVRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductIDForEGVArgs) WriteFieldProductIdForEGVRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetProductIDForEGVArgs) TStructName() string {
  return "GetProductIDForEGVArgs"
}

func (p *GetProductIDForEGVArgs) ThriftName() string {
  return "getProductIDForEGV_args"
}

func (p *GetProductIDForEGVArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductIDForEGVArgs(%+v)", *p)
}

func (p *GetProductIDForEGVArgs) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetProductIDForEGVArgs)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ProductIdForEGVRequest.CompareTo(data.ProductIdForEGVRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetProductIDForEGVArgs) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ProductIdForEGVRequest
  }
  return nil
}

func (p *GetProductIDForEGVArgs) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("productIdForEGVRequest", thrift.STRUCT, 1),
    })
}

/**
 * Attributes:
 *  - Success
 *  - SpcmsException
 */
type GetProductIDForEGVResult struct {
  thrift.TStruct
  Success *ProductIdForEGVResponse "success"; // 0
  SpcmsException *SPCMSException "spcmsException"; // 1
}

func NewGetProductIDForEGVResult() *GetProductIDForEGVResult {
  output := &GetProductIDForEGVResult{
    TStruct:thrift.NewTStruct("getProductIDForEGV_result", []thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    }),
  }
  {
  }
  return output
}

func (p *GetProductIDForEGVResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 0 || fieldName == "success" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField0(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 1 || fieldName == "spcmsException" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductIDForEGVResult) ReadField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.Success = NewProductIdForEGVResponse()
  err1656 := p.Success.Read(iprot)
  if err1656 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SuccessProductIdForEGVResponse", err1656); }
  return err
}

func (p *GetProductIDForEGVResult) ReadFieldSuccess(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField0(iprot)
}

func (p *GetProductIDForEGVResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.SpcmsException = NewSPCMSException()
  err1659 := p.SpcmsException.Read(iprot)
  if err1659 != nil { return thrift.NewTProtocolExceptionReadStruct("p.SpcmsExceptionSPCMSException", err1659); }
  return err
}

func (p *GetProductIDForEGVResult) ReadFieldSpcmsException(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *GetProductIDForEGVResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("getProductIDForEGV_result")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  switch {
  case p.SpcmsException != nil:
    if err = p.WriteField1(oprot); err != nil {
      return err
    }
  default:
    if err = p.WriteField0(oprot); err != nil {
      return err
    }
  }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *GetProductIDForEGVResult) WriteField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Success != nil {
    err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
    err = p.Success.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ProductIdForEGVResponse", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductIDForEGVResult) WriteFieldSuccess(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField0(oprot)
}

func (p *GetProductIDForEGVResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.SpcmsException != nil {
    err = oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
    err = p.SpcmsException.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("SPCMSException", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "spcmsException", p.ThriftName(), err); }
  }
  return err
}

func (p *GetProductIDForEGVResult) WriteFieldSpcmsException(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *GetProductIDForEGVResult) TStructName() string {
  return "GetProductIDForEGVResult"
}

func (p *GetProductIDForEGVResult) ThriftName() string {
  return "getProductIDForEGV_result"
}

func (p *GetProductIDForEGVResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductIDForEGVResult(%+v)", *p)
}

func (p *GetProductIDForEGVResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*GetProductIDForEGVResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.Success.CompareTo(data.Success); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.SpcmsException.CompareTo(data.SpcmsException); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *GetProductIDForEGVResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 0: return p.Success
  case 1: return p.SpcmsException
  }
  return nil
}

func (p *GetProductIDForEGVResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("success", thrift.STRUCT, 0),
    thrift.NewTField("spcmsException", thrift.STRUCT, 1),
    })
}


