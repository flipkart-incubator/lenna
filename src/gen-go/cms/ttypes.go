/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package cms;

import (
        "thrift"
        "fmt"
)



type ProductID string

/**
 * Attributes:
 *  - ClientId
 *  - RequestId
 *  - RequestTimestamp
 *  - RequestParams
 */
type CMSBaseRequest struct {
  thrift.TStruct
  ClientId string "clientId"; // 1
  RequestId string "requestId"; // 2
  RequestTimestamp int64 "requestTimestamp"; // 3
  RequestParams thrift.TMap "requestParams"; // 4
}

func NewCMSBaseRequest() *CMSBaseRequest {
  output := &CMSBaseRequest{
    TStruct:thrift.NewTStruct("CMSBaseRequest", []thrift.TField{
    thrift.NewTField("clientId", thrift.STRING, 1),
    thrift.NewTField("requestId", thrift.STRING, 2),
    thrift.NewTField("requestTimestamp", thrift.I64, 3),
    thrift.NewTField("requestParams", thrift.MAP, 4),
    }),
  }
  {
  }
  return output
}

func (p *CMSBaseRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "clientId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "requestId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "requestTimestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "requestParams" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CMSBaseRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v0, err1 := iprot.ReadString()
  if err1 != nil { return thrift.NewTProtocolExceptionReadField(1, "clientId", p.ThriftName(), err1); }
  p.ClientId = v0
  return err
}

func (p *CMSBaseRequest) ReadFieldClientId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CMSBaseRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v2, err3 := iprot.ReadString()
  if err3 != nil { return thrift.NewTProtocolExceptionReadField(2, "requestId", p.ThriftName(), err3); }
  p.RequestId = v2
  return err
}

func (p *CMSBaseRequest) ReadFieldRequestId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CMSBaseRequest) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v4, err5 := iprot.ReadI64()
  if err5 != nil { return thrift.NewTProtocolExceptionReadField(3, "requestTimestamp", p.ThriftName(), err5); }
  p.RequestTimestamp = v4
  return err
}

func (p *CMSBaseRequest) ReadFieldRequestTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CMSBaseRequest) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype9, _vtype10, _size8, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.RequestParams", "", err)
  }
  p.RequestParams = thrift.NewTMap(_ktype9, _vtype10, _size8)
  for _i12:= 0; _i12 < _size8; _i12++ {
    v15, err16 := iprot.ReadString()
    if err16 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key13", "", err16); }
    _key13 := v15
    v17, err18 := iprot.ReadString()
    if err18 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val14", "", err18); }
    _val14 := v17
    p.RequestParams.Set(_key13, _val14)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *CMSBaseRequest) ReadFieldRequestParams(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *CMSBaseRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CMSBaseRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CMSBaseRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("clientId", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "clientId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ClientId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "clientId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "clientId", p.ThriftName(), err); }
  return err
}

func (p *CMSBaseRequest) WriteFieldClientId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CMSBaseRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("requestId", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "requestId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.RequestId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "requestId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "requestId", p.ThriftName(), err); }
  return err
}

func (p *CMSBaseRequest) WriteFieldRequestId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CMSBaseRequest) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("requestTimestamp", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "requestTimestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.RequestTimestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "requestTimestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "requestTimestamp", p.ThriftName(), err); }
  return err
}

func (p *CMSBaseRequest) WriteFieldRequestTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CMSBaseRequest) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.RequestParams != nil {
    err = oprot.WriteFieldBegin("requestParams", thrift.MAP, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "requestParams", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.RequestParams.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter19 := range p.RequestParams.Iter() {
      Kiter20, Viter21 := Miter19.Key().(string), Miter19.Value().(string)
      err = oprot.WriteString(string(Kiter20))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter20", "", err); }
      err = oprot.WriteString(string(Viter21))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter21", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "requestParams", p.ThriftName(), err); }
  }
  return err
}

func (p *CMSBaseRequest) WriteFieldRequestParams(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *CMSBaseRequest) TStructName() string {
  return "CMSBaseRequest"
}

func (p *CMSBaseRequest) ThriftName() string {
  return "CMSBaseRequest"
}

func (p *CMSBaseRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CMSBaseRequest(%+v)", *p)
}

func (p *CMSBaseRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CMSBaseRequest)
  if !ok {
    return 0, false
  }
  if p.ClientId != data.ClientId {
    if p.ClientId < data.ClientId {
      return -1, true
    }
    return 1, true
  }
  if p.RequestId != data.RequestId {
    if p.RequestId < data.RequestId {
      return -1, true
    }
    return 1, true
  }
  if p.RequestTimestamp != data.RequestTimestamp {
    if p.RequestTimestamp < data.RequestTimestamp {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.RequestParams.CompareTo(data.RequestParams); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CMSBaseRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ClientId
  case 2: return p.RequestId
  case 3: return p.RequestTimestamp
  case 4: return p.RequestParams
  }
  return nil
}

func (p *CMSBaseRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("clientId", thrift.STRING, 1),
    thrift.NewTField("requestId", thrift.STRING, 2),
    thrift.NewTField("requestTimestamp", thrift.I64, 3),
    thrift.NewTField("requestParams", thrift.MAP, 4),
    })
}

/**
 * Attributes:
 *  - ServerId
 *  - ResponseTimestamp
 *  - CmsRequestTimestamp
 *  - CmsBaseRequest
 *  - ResultParams
 */
type CMSBaseResult struct {
  thrift.TStruct
  ServerId string "serverId"; // 1
  ResponseTimestamp int64 "responseTimestamp"; // 2
  CmsRequestTimestamp int64 "cmsRequestTimestamp"; // 3
  CmsBaseRequest *CMSBaseRequest "cmsBaseRequest"; // 4
  ResultParams thrift.TMap "resultParams"; // 5
}

func NewCMSBaseResult() *CMSBaseResult {
  output := &CMSBaseResult{
    TStruct:thrift.NewTStruct("CMSBaseResult", []thrift.TField{
    thrift.NewTField("serverId", thrift.STRING, 1),
    thrift.NewTField("responseTimestamp", thrift.I64, 2),
    thrift.NewTField("cmsRequestTimestamp", thrift.I64, 3),
    thrift.NewTField("cmsBaseRequest", thrift.STRUCT, 4),
    thrift.NewTField("resultParams", thrift.MAP, 5),
    }),
  }
  {
  }
  return output
}

func (p *CMSBaseResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "serverId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "responseTimestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "cmsRequestTimestamp" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "cmsBaseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "resultParams" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CMSBaseResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v22, err23 := iprot.ReadString()
  if err23 != nil { return thrift.NewTProtocolExceptionReadField(1, "serverId", p.ThriftName(), err23); }
  p.ServerId = v22
  return err
}

func (p *CMSBaseResult) ReadFieldServerId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CMSBaseResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v24, err25 := iprot.ReadI64()
  if err25 != nil { return thrift.NewTProtocolExceptionReadField(2, "responseTimestamp", p.ThriftName(), err25); }
  p.ResponseTimestamp = v24
  return err
}

func (p *CMSBaseResult) ReadFieldResponseTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CMSBaseResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v26, err27 := iprot.ReadI64()
  if err27 != nil { return thrift.NewTProtocolExceptionReadField(3, "cmsRequestTimestamp", p.ThriftName(), err27); }
  p.CmsRequestTimestamp = v26
  return err
}

func (p *CMSBaseResult) ReadFieldCmsRequestTimestamp(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CMSBaseResult) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsBaseRequest = NewCMSBaseRequest()
  err30 := p.CmsBaseRequest.Read(iprot)
  if err30 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsBaseRequestCMSBaseRequest", err30); }
  return err
}

func (p *CMSBaseResult) ReadFieldCmsBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *CMSBaseResult) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype34, _vtype35, _size33, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ResultParams", "", err)
  }
  p.ResultParams = thrift.NewTMap(_ktype34, _vtype35, _size33)
  for _i37:= 0; _i37 < _size33; _i37++ {
    v40, err41 := iprot.ReadString()
    if err41 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key38", "", err41); }
    _key38 := v40
    v42, err43 := iprot.ReadString()
    if err43 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val39", "", err43); }
    _val39 := v42
    p.ResultParams.Set(_key38, _val39)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *CMSBaseResult) ReadFieldResultParams(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *CMSBaseResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CMSBaseResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CMSBaseResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("serverId", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "serverId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ServerId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "serverId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "serverId", p.ThriftName(), err); }
  return err
}

func (p *CMSBaseResult) WriteFieldServerId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CMSBaseResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("responseTimestamp", thrift.I64, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "responseTimestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.ResponseTimestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "responseTimestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "responseTimestamp", p.ThriftName(), err); }
  return err
}

func (p *CMSBaseResult) WriteFieldResponseTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CMSBaseResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("cmsRequestTimestamp", thrift.I64, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "cmsRequestTimestamp", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.CmsRequestTimestamp))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "cmsRequestTimestamp", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "cmsRequestTimestamp", p.ThriftName(), err); }
  return err
}

func (p *CMSBaseResult) WriteFieldCmsRequestTimestamp(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CMSBaseResult) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsBaseRequest != nil {
    err = oprot.WriteFieldBegin("cmsBaseRequest", thrift.STRUCT, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "cmsBaseRequest", p.ThriftName(), err); }
    err = p.CmsBaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSBaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "cmsBaseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *CMSBaseResult) WriteFieldCmsBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *CMSBaseResult) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ResultParams != nil {
    err = oprot.WriteFieldBegin("resultParams", thrift.MAP, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "resultParams", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.ResultParams.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter44 := range p.ResultParams.Iter() {
      Kiter45, Viter46 := Miter44.Key().(string), Miter44.Value().(string)
      err = oprot.WriteString(string(Kiter45))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter45", "", err); }
      err = oprot.WriteString(string(Viter46))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter46", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "resultParams", p.ThriftName(), err); }
  }
  return err
}

func (p *CMSBaseResult) WriteFieldResultParams(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *CMSBaseResult) TStructName() string {
  return "CMSBaseResult"
}

func (p *CMSBaseResult) ThriftName() string {
  return "CMSBaseResult"
}

func (p *CMSBaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CMSBaseResult(%+v)", *p)
}

func (p *CMSBaseResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CMSBaseResult)
  if !ok {
    return 0, false
  }
  if p.ServerId != data.ServerId {
    if p.ServerId < data.ServerId {
      return -1, true
    }
    return 1, true
  }
  if p.ResponseTimestamp != data.ResponseTimestamp {
    if p.ResponseTimestamp < data.ResponseTimestamp {
      return -1, true
    }
    return 1, true
  }
  if p.CmsRequestTimestamp != data.CmsRequestTimestamp {
    if p.CmsRequestTimestamp < data.CmsRequestTimestamp {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.CmsBaseRequest.CompareTo(data.CmsBaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.ResultParams.CompareTo(data.ResultParams); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CMSBaseResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ServerId
  case 2: return p.ResponseTimestamp
  case 3: return p.CmsRequestTimestamp
  case 4: return p.CmsBaseRequest
  case 5: return p.ResultParams
  }
  return nil
}

func (p *CMSBaseResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("serverId", thrift.STRING, 1),
    thrift.NewTField("responseTimestamp", thrift.I64, 2),
    thrift.NewTField("cmsRequestTimestamp", thrift.I64, 3),
    thrift.NewTField("cmsBaseRequest", thrift.STRUCT, 4),
    thrift.NewTField("resultParams", thrift.MAP, 5),
    })
}

/**
 * Attributes:
 *  - ErrorCode
 *  - ErrorMessage
 *  - Trace
 */
type CMSException struct {
  thrift.TStruct
  ErrorCode int32 "errorCode"; // 1
  ErrorMessage string "errorMessage"; // 2
  Trace string "trace"; // 3
}

func NewCMSException() *CMSException {
  output := &CMSException{
    TStruct:thrift.NewTStruct("CMSException", []thrift.TField{
    thrift.NewTField("errorCode", thrift.I32, 1),
    thrift.NewTField("errorMessage", thrift.STRING, 2),
    thrift.NewTField("trace", thrift.STRING, 3),
    }),
  }
  {
  }
  return output
}

func (p *CMSException) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "errorCode" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "errorMessage" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "trace" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CMSException) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v47, err48 := iprot.ReadI32()
  if err48 != nil { return thrift.NewTProtocolExceptionReadField(1, "errorCode", p.ThriftName(), err48); }
  p.ErrorCode = v47
  return err
}

func (p *CMSException) ReadFieldErrorCode(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CMSException) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v49, err50 := iprot.ReadString()
  if err50 != nil { return thrift.NewTProtocolExceptionReadField(2, "errorMessage", p.ThriftName(), err50); }
  p.ErrorMessage = v49
  return err
}

func (p *CMSException) ReadFieldErrorMessage(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CMSException) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v51, err52 := iprot.ReadString()
  if err52 != nil { return thrift.NewTProtocolExceptionReadField(3, "trace", p.ThriftName(), err52); }
  p.Trace = v51
  return err
}

func (p *CMSException) ReadFieldTrace(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CMSException) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CMSException")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CMSException) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("errorCode", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "errorCode", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.ErrorCode))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "errorCode", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "errorCode", p.ThriftName(), err); }
  return err
}

func (p *CMSException) WriteFieldErrorCode(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CMSException) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("errorMessage", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "errorMessage", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ErrorMessage))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "errorMessage", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "errorMessage", p.ThriftName(), err); }
  return err
}

func (p *CMSException) WriteFieldErrorMessage(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CMSException) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("trace", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "trace", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Trace))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "trace", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "trace", p.ThriftName(), err); }
  return err
}

func (p *CMSException) WriteFieldTrace(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CMSException) TStructName() string {
  return "CMSException"
}

func (p *CMSException) ThriftName() string {
  return "CMSException"
}

func (p *CMSException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CMSException(%+v)", *p)
}

func (p *CMSException) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CMSException)
  if !ok {
    return 0, false
  }
  if p.ErrorCode != data.ErrorCode {
    if p.ErrorCode < data.ErrorCode {
      return -1, true
    }
    return 1, true
  }
  if p.ErrorMessage != data.ErrorMessage {
    if p.ErrorMessage < data.ErrorMessage {
      return -1, true
    }
    return 1, true
  }
  if p.Trace != data.Trace {
    if p.Trace < data.Trace {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *CMSException) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ErrorCode
  case 2: return p.ErrorMessage
  case 3: return p.Trace
  }
  return nil
}

func (p *CMSException) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("errorCode", thrift.I32, 1),
    thrift.NewTField("errorMessage", thrift.STRING, 2),
    thrift.NewTField("trace", thrift.STRING, 3),
    })
}

/**
 * Attributes:
 *  - Value
 *  - Qualifier
 */
type AttributeValue struct {
  thrift.TStruct
  Value string "value"; // 1
  Qualifier string "qualifier"; // 2
}

func NewAttributeValue() *AttributeValue {
  output := &AttributeValue{
    TStruct:thrift.NewTStruct("AttributeValue", []thrift.TField{
    thrift.NewTField("value", thrift.STRING, 1),
    thrift.NewTField("qualifier", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *AttributeValue) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "value" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "qualifier" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *AttributeValue) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v53, err54 := iprot.ReadString()
  if err54 != nil { return thrift.NewTProtocolExceptionReadField(1, "value", p.ThriftName(), err54); }
  p.Value = v53
  return err
}

func (p *AttributeValue) ReadFieldValue(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *AttributeValue) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v55, err56 := iprot.ReadString()
  if err56 != nil { return thrift.NewTProtocolExceptionReadField(2, "qualifier", p.ThriftName(), err56); }
  p.Qualifier = v55
  return err
}

func (p *AttributeValue) ReadFieldQualifier(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *AttributeValue) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("AttributeValue")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *AttributeValue) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("value", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "value", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Value))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "value", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "value", p.ThriftName(), err); }
  return err
}

func (p *AttributeValue) WriteFieldValue(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *AttributeValue) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("qualifier", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "qualifier", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Qualifier))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "qualifier", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "qualifier", p.ThriftName(), err); }
  return err
}

func (p *AttributeValue) WriteFieldQualifier(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *AttributeValue) TStructName() string {
  return "AttributeValue"
}

func (p *AttributeValue) ThriftName() string {
  return "AttributeValue"
}

func (p *AttributeValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AttributeValue(%+v)", *p)
}

func (p *AttributeValue) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*AttributeValue)
  if !ok {
    return 0, false
  }
  if p.Value != data.Value {
    if p.Value < data.Value {
      return -1, true
    }
    return 1, true
  }
  if p.Qualifier != data.Qualifier {
    if p.Qualifier < data.Qualifier {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *AttributeValue) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Value
  case 2: return p.Qualifier
  }
  return nil
}

func (p *AttributeValue) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("value", thrift.STRING, 1),
    thrift.NewTField("qualifier", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - ValuesList
 *  - HasQualifier
 *  - IsMultivalued
 *  - HasType
 *  - TypeA1
 */
type Attribute struct {
  thrift.TStruct
  ValuesList thrift.TList "valuesList"; // 1
  HasQualifier bool "hasQualifier"; // 2
  IsMultivalued bool "isMultivalued"; // 3
  HasType bool "hasType"; // 4
  TypeA1 string "type"; // 5
}

func NewAttribute() *Attribute {
  output := &Attribute{
    TStruct:thrift.NewTStruct("Attribute", []thrift.TField{
    thrift.NewTField("valuesList", thrift.LIST, 1),
    thrift.NewTField("hasQualifier", thrift.BOOL, 2),
    thrift.NewTField("isMultivalued", thrift.BOOL, 3),
    thrift.NewTField("hasType", thrift.BOOL, 4),
    thrift.NewTField("type", thrift.STRING, 5),
    }),
  }
  {
  }
  return output
}

func (p *Attribute) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "valuesList" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "hasQualifier" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "isMultivalued" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "hasType" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "type" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Attribute) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype62, _size59, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ValuesList", "", err)
  }
  p.ValuesList = thrift.NewTList(_etype62, _size59)
  for _i63:= 0; _i63 < _size59; _i63++ {
    _elem64 := NewAttributeValue()
    err67 := _elem64.Read(iprot)
    if err67 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem64AttributeValue", err67); }
    p.ValuesList.Push(_elem64)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Attribute) ReadFieldValuesList(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Attribute) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v68, err69 := iprot.ReadBool()
  if err69 != nil { return thrift.NewTProtocolExceptionReadField(2, "hasQualifier", p.ThriftName(), err69); }
  p.HasQualifier = v68
  return err
}

func (p *Attribute) ReadFieldHasQualifier(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Attribute) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v70, err71 := iprot.ReadBool()
  if err71 != nil { return thrift.NewTProtocolExceptionReadField(3, "isMultivalued", p.ThriftName(), err71); }
  p.IsMultivalued = v70
  return err
}

func (p *Attribute) ReadFieldIsMultivalued(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Attribute) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v72, err73 := iprot.ReadBool()
  if err73 != nil { return thrift.NewTProtocolExceptionReadField(4, "hasType", p.ThriftName(), err73); }
  p.HasType = v72
  return err
}

func (p *Attribute) ReadFieldHasType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *Attribute) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v74, err75 := iprot.ReadString()
  if err75 != nil { return thrift.NewTProtocolExceptionReadField(5, "type", p.ThriftName(), err75); }
  p.TypeA1 = v74
  return err
}

func (p *Attribute) ReadFieldType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *Attribute) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Attribute")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Attribute) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ValuesList != nil {
    err = oprot.WriteFieldBegin("valuesList", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "valuesList", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.ValuesList.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter76 := range p.ValuesList.Iter() {
      Iter77 := Iter76.(*AttributeValue)
      err = Iter77.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("AttributeValue", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "valuesList", p.ThriftName(), err); }
  }
  return err
}

func (p *Attribute) WriteFieldValuesList(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Attribute) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("hasQualifier", thrift.BOOL, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "hasQualifier", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.HasQualifier))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "hasQualifier", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "hasQualifier", p.ThriftName(), err); }
  return err
}

func (p *Attribute) WriteFieldHasQualifier(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Attribute) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isMultivalued", thrift.BOOL, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "isMultivalued", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsMultivalued))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "isMultivalued", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "isMultivalued", p.ThriftName(), err); }
  return err
}

func (p *Attribute) WriteFieldIsMultivalued(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Attribute) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("hasType", thrift.BOOL, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "hasType", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.HasType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "hasType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "hasType", p.ThriftName(), err); }
  return err
}

func (p *Attribute) WriteFieldHasType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *Attribute) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("type", thrift.STRING, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "type", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TypeA1))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "type", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "type", p.ThriftName(), err); }
  return err
}

func (p *Attribute) WriteFieldType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *Attribute) TStructName() string {
  return "Attribute"
}

func (p *Attribute) ThriftName() string {
  return "Attribute"
}

func (p *Attribute) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Attribute(%+v)", *p)
}

func (p *Attribute) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Attribute)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.ValuesList.CompareTo(data.ValuesList); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.HasQualifier, data.HasQualifier); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.IsMultivalued, data.IsMultivalued); cmp != 0 {
    return cmp, true
  }
  if cmp := thrift.CompareBool(p.HasType, data.HasType); cmp != 0 {
    return cmp, true
  }
  if p.TypeA1 != data.TypeA1 {
    if p.TypeA1 < data.TypeA1 {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *Attribute) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ValuesList
  case 2: return p.HasQualifier
  case 3: return p.IsMultivalued
  case 4: return p.HasType
  case 5: return p.TypeA1
  }
  return nil
}

func (p *Attribute) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("valuesList", thrift.LIST, 1),
    thrift.NewTField("hasQualifier", thrift.BOOL, 2),
    thrift.NewTField("isMultivalued", thrift.BOOL, 3),
    thrift.NewTField("hasType", thrift.BOOL, 4),
    thrift.NewTField("type", thrift.STRING, 5),
    })
}

/**
 * Attributes:
 *  - Amount
 *  - Currency
 */
type Price struct {
  thrift.TStruct
  Amount float64 "amount"; // 1
  Currency string "currency"; // 2
}

func NewPrice() *Price {
  output := &Price{
    TStruct:thrift.NewTStruct("Price", []thrift.TField{
    thrift.NewTField("amount", thrift.DOUBLE, 1),
    thrift.NewTField("currency", thrift.STRING, 2),
    }),
  }
  {
  }
  return output
}

func (p *Price) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "amount" {
      if fieldTypeId == thrift.DOUBLE {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "currency" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Price) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v78, err79 := iprot.ReadDouble()
  if err79 != nil { return thrift.NewTProtocolExceptionReadField(1, "amount", p.ThriftName(), err79); }
  p.Amount = v78
  return err
}

func (p *Price) ReadFieldAmount(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Price) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v80, err81 := iprot.ReadString()
  if err81 != nil { return thrift.NewTProtocolExceptionReadField(2, "currency", p.ThriftName(), err81); }
  p.Currency = v80
  return err
}

func (p *Price) ReadFieldCurrency(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Price) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Price")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Price) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("amount", thrift.DOUBLE, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "amount", p.ThriftName(), err); }
  err = oprot.WriteDouble(float64(p.Amount))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "amount", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "amount", p.ThriftName(), err); }
  return err
}

func (p *Price) WriteFieldAmount(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Price) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("currency", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "currency", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Currency))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "currency", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "currency", p.ThriftName(), err); }
  return err
}

func (p *Price) WriteFieldCurrency(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Price) TStructName() string {
  return "Price"
}

func (p *Price) ThriftName() string {
  return "Price"
}

func (p *Price) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Price(%+v)", *p)
}

func (p *Price) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Price)
  if !ok {
    return 0, false
  }
  if p.Amount != data.Amount {
    if p.Amount < data.Amount {
      return -1, true
    }
    return 1, true
  }
  if p.Currency != data.Currency {
    if p.Currency < data.Currency {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *Price) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Amount
  case 2: return p.Currency
  }
  return nil
}

func (p *Price) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("amount", thrift.DOUBLE, 1),
    thrift.NewTField("currency", thrift.STRING, 2),
    })
}

/**
 * Attributes:
 *  - Name
 *  - Id
 *  - Groupid
 *  - Similarnames
 *  - AttributeValues
 *  - Source
 */
type Contributor struct {
  thrift.TStruct
  Name string "name"; // 1
  Id string "id"; // 2
  Groupid string "groupid"; // 3
  Similarnames thrift.TList "similarnames"; // 4
  AttributeValues thrift.TMap "attributeValues"; // 5
  Source string "source"; // 6
}

func NewContributor() *Contributor {
  output := &Contributor{
    TStruct:thrift.NewTStruct("Contributor", []thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("id", thrift.STRING, 2),
    thrift.NewTField("groupid", thrift.STRING, 3),
    thrift.NewTField("similarnames", thrift.LIST, 4),
    thrift.NewTField("attributeValues", thrift.MAP, 5),
    thrift.NewTField("source", thrift.STRING, 6),
    }),
  }
  {
  }
  return output
}

func (p *Contributor) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "name" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "id" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "groupid" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "similarnames" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "attributeValues" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "source" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *Contributor) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v82, err83 := iprot.ReadString()
  if err83 != nil { return thrift.NewTProtocolExceptionReadField(1, "name", p.ThriftName(), err83); }
  p.Name = v82
  return err
}

func (p *Contributor) ReadFieldName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *Contributor) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v84, err85 := iprot.ReadString()
  if err85 != nil { return thrift.NewTProtocolExceptionReadField(2, "id", p.ThriftName(), err85); }
  p.Id = v84
  return err
}

func (p *Contributor) ReadFieldId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *Contributor) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v86, err87 := iprot.ReadString()
  if err87 != nil { return thrift.NewTProtocolExceptionReadField(3, "groupid", p.ThriftName(), err87); }
  p.Groupid = v86
  return err
}

func (p *Contributor) ReadFieldGroupid(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *Contributor) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype93, _size90, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Similarnames", "", err)
  }
  p.Similarnames = thrift.NewTList(_etype93, _size90)
  for _i94:= 0; _i94 < _size90; _i94++ {
    v96, err97 := iprot.ReadString()
    if err97 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem95", "", err97); }
    _elem95 := v96
    p.Similarnames.Push(_elem95)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *Contributor) ReadFieldSimilarnames(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *Contributor) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype101, _vtype102, _size100, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.AttributeValues", "", err)
  }
  p.AttributeValues = thrift.NewTMap(_ktype101, _vtype102, _size100)
  for _i104:= 0; _i104 < _size100; _i104++ {
    v107, err108 := iprot.ReadString()
    if err108 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key105", "", err108); }
    _key105 := v107
    _val106 := NewAttribute()
    err111 := _val106.Read(iprot)
    if err111 != nil { return thrift.NewTProtocolExceptionReadStruct("_val106Attribute", err111); }
    p.AttributeValues.Set(_key105, _val106)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *Contributor) ReadFieldAttributeValues(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *Contributor) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v112, err113 := iprot.ReadString()
  if err113 != nil { return thrift.NewTProtocolExceptionReadField(6, "source", p.ThriftName(), err113); }
  p.Source = v112
  return err
}

func (p *Contributor) ReadFieldSource(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *Contributor) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("Contributor")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *Contributor) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("name", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Name))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "name", p.ThriftName(), err); }
  return err
}

func (p *Contributor) WriteFieldName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *Contributor) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("id", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "id", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Id))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "id", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "id", p.ThriftName(), err); }
  return err
}

func (p *Contributor) WriteFieldId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *Contributor) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("groupid", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "groupid", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Groupid))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "groupid", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "groupid", p.ThriftName(), err); }
  return err
}

func (p *Contributor) WriteFieldGroupid(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *Contributor) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Similarnames != nil {
    err = oprot.WriteFieldBegin("similarnames", thrift.LIST, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "similarnames", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.Similarnames.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter114 := range p.Similarnames.Iter() {
      Iter115 := Iter114.(string)
      err = oprot.WriteString(string(Iter115))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter115", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "similarnames", p.ThriftName(), err); }
  }
  return err
}

func (p *Contributor) WriteFieldSimilarnames(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *Contributor) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.AttributeValues != nil {
    err = oprot.WriteFieldBegin("attributeValues", thrift.MAP, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "attributeValues", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.AttributeValues.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter116 := range p.AttributeValues.Iter() {
      Kiter117, Viter118 := Miter116.Key().(string), Miter116.Value().(*Attribute)
      err = oprot.WriteString(string(Kiter117))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter117", "", err); }
      err = Viter118.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Attribute", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "attributeValues", p.ThriftName(), err); }
  }
  return err
}

func (p *Contributor) WriteFieldAttributeValues(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *Contributor) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("source", thrift.STRING, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "source", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Source))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "source", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "source", p.ThriftName(), err); }
  return err
}

func (p *Contributor) WriteFieldSource(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *Contributor) TStructName() string {
  return "Contributor"
}

func (p *Contributor) ThriftName() string {
  return "Contributor"
}

func (p *Contributor) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Contributor(%+v)", *p)
}

func (p *Contributor) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*Contributor)
  if !ok {
    return 0, false
  }
  if p.Name != data.Name {
    if p.Name < data.Name {
      return -1, true
    }
    return 1, true
  }
  if p.Id != data.Id {
    if p.Id < data.Id {
      return -1, true
    }
    return 1, true
  }
  if p.Groupid != data.Groupid {
    if p.Groupid < data.Groupid {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Similarnames.CompareTo(data.Similarnames); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.AttributeValues.CompareTo(data.AttributeValues); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.Source != data.Source {
    if p.Source < data.Source {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *Contributor) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Name
  case 2: return p.Id
  case 3: return p.Groupid
  case 4: return p.Similarnames
  case 5: return p.AttributeValues
  case 6: return p.Source
  }
  return nil
}

func (p *Contributor) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("name", thrift.STRING, 1),
    thrift.NewTField("id", thrift.STRING, 2),
    thrift.NewTField("groupid", thrift.STRING, 3),
    thrift.NewTField("similarnames", thrift.LIST, 4),
    thrift.NewTField("attributeValues", thrift.MAP, 5),
    thrift.NewTField("source", thrift.STRING, 6),
    })
}

/**
 * Attributes:
 *  - TagId
 *  - TagName
 *  - TagStatus
 *  - Tenant
 *  - TagData
 *  - TagAssociationData
 */
type TagInfo struct {
  thrift.TStruct
  TagId string "tagId"; // 1
  TagName string "tagName"; // 2
  TagStatus string "tagStatus"; // 3
  Tenant string "tenant"; // 4
  TagData string "tagData"; // 5
  TagAssociationData string "tagAssociationData"; // 6
}

func NewTagInfo() *TagInfo {
  output := &TagInfo{
    TStruct:thrift.NewTStruct("TagInfo", []thrift.TField{
    thrift.NewTField("tagId", thrift.STRING, 1),
    thrift.NewTField("tagName", thrift.STRING, 2),
    thrift.NewTField("tagStatus", thrift.STRING, 3),
    thrift.NewTField("tenant", thrift.STRING, 4),
    thrift.NewTField("tagData", thrift.STRING, 5),
    thrift.NewTField("tagAssociationData", thrift.STRING, 6),
    }),
  }
  {
  }
  return output
}

func (p *TagInfo) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "tagId" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "tagName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "tagStatus" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "tenant" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "tagData" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "tagAssociationData" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TagInfo) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v119, err120 := iprot.ReadString()
  if err120 != nil { return thrift.NewTProtocolExceptionReadField(1, "tagId", p.ThriftName(), err120); }
  p.TagId = v119
  return err
}

func (p *TagInfo) ReadFieldTagId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TagInfo) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v121, err122 := iprot.ReadString()
  if err122 != nil { return thrift.NewTProtocolExceptionReadField(2, "tagName", p.ThriftName(), err122); }
  p.TagName = v121
  return err
}

func (p *TagInfo) ReadFieldTagName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *TagInfo) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v123, err124 := iprot.ReadString()
  if err124 != nil { return thrift.NewTProtocolExceptionReadField(3, "tagStatus", p.ThriftName(), err124); }
  p.TagStatus = v123
  return err
}

func (p *TagInfo) ReadFieldTagStatus(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *TagInfo) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v125, err126 := iprot.ReadString()
  if err126 != nil { return thrift.NewTProtocolExceptionReadField(4, "tenant", p.ThriftName(), err126); }
  p.Tenant = v125
  return err
}

func (p *TagInfo) ReadFieldTenant(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *TagInfo) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v127, err128 := iprot.ReadString()
  if err128 != nil { return thrift.NewTProtocolExceptionReadField(5, "tagData", p.ThriftName(), err128); }
  p.TagData = v127
  return err
}

func (p *TagInfo) ReadFieldTagData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *TagInfo) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v129, err130 := iprot.ReadString()
  if err130 != nil { return thrift.NewTProtocolExceptionReadField(6, "tagAssociationData", p.ThriftName(), err130); }
  p.TagAssociationData = v129
  return err
}

func (p *TagInfo) ReadFieldTagAssociationData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *TagInfo) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TagInfo")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TagInfo) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("tagId", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tagId", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TagId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tagId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "tagId", p.ThriftName(), err); }
  return err
}

func (p *TagInfo) WriteFieldTagId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TagInfo) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("tagName", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tagName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TagName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tagName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "tagName", p.ThriftName(), err); }
  return err
}

func (p *TagInfo) WriteFieldTagName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *TagInfo) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("tagStatus", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "tagStatus", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TagStatus))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "tagStatus", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "tagStatus", p.ThriftName(), err); }
  return err
}

func (p *TagInfo) WriteFieldTagStatus(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *TagInfo) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("tenant", thrift.STRING, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "tenant", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Tenant))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "tenant", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "tenant", p.ThriftName(), err); }
  return err
}

func (p *TagInfo) WriteFieldTenant(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *TagInfo) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("tagData", thrift.STRING, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "tagData", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TagData))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "tagData", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "tagData", p.ThriftName(), err); }
  return err
}

func (p *TagInfo) WriteFieldTagData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *TagInfo) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("tagAssociationData", thrift.STRING, 6)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "tagAssociationData", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.TagAssociationData))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "tagAssociationData", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "tagAssociationData", p.ThriftName(), err); }
  return err
}

func (p *TagInfo) WriteFieldTagAssociationData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *TagInfo) TStructName() string {
  return "TagInfo"
}

func (p *TagInfo) ThriftName() string {
  return "TagInfo"
}

func (p *TagInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TagInfo(%+v)", *p)
}

func (p *TagInfo) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TagInfo)
  if !ok {
    return 0, false
  }
  if p.TagId != data.TagId {
    if p.TagId < data.TagId {
      return -1, true
    }
    return 1, true
  }
  if p.TagName != data.TagName {
    if p.TagName < data.TagName {
      return -1, true
    }
    return 1, true
  }
  if p.TagStatus != data.TagStatus {
    if p.TagStatus < data.TagStatus {
      return -1, true
    }
    return 1, true
  }
  if p.Tenant != data.Tenant {
    if p.Tenant < data.Tenant {
      return -1, true
    }
    return 1, true
  }
  if p.TagData != data.TagData {
    if p.TagData < data.TagData {
      return -1, true
    }
    return 1, true
  }
  if p.TagAssociationData != data.TagAssociationData {
    if p.TagAssociationData < data.TagAssociationData {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *TagInfo) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.TagId
  case 2: return p.TagName
  case 3: return p.TagStatus
  case 4: return p.Tenant
  case 5: return p.TagData
  case 6: return p.TagAssociationData
  }
  return nil
}

func (p *TagInfo) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("tagId", thrift.STRING, 1),
    thrift.NewTField("tagName", thrift.STRING, 2),
    thrift.NewTField("tagStatus", thrift.STRING, 3),
    thrift.NewTField("tenant", thrift.STRING, 4),
    thrift.NewTField("tagData", thrift.STRING, 5),
    thrift.NewTField("tagAssociationData", thrift.STRING, 6),
    })
}

/**
 * Attributes:
 *  - RelationshipData
 *  - RelationType
 *  - Vertical
 *  - IsProduct
 */
type RelationshipInfo struct {
  thrift.TStruct
  RelationshipData thrift.TMap "relationshipData"; // 1
  RelationType string "relationType"; // 2
  Vertical string "vertical"; // 3
  IsProduct bool "isProduct"; // 4
}

func NewRelationshipInfo() *RelationshipInfo {
  output := &RelationshipInfo{
    TStruct:thrift.NewTStruct("RelationshipInfo", []thrift.TField{
    thrift.NewTField("relationshipData", thrift.MAP, 1),
    thrift.NewTField("relationType", thrift.STRING, 2),
    thrift.NewTField("vertical", thrift.STRING, 3),
    thrift.NewTField("isProduct", thrift.BOOL, 4),
    }),
  }
  {
  }
  return output
}

func (p *RelationshipInfo) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "relationshipData" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "relationType" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "vertical" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "isProduct" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *RelationshipInfo) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype134, _vtype135, _size133, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.RelationshipData", "", err)
  }
  p.RelationshipData = thrift.NewTMap(_ktype134, _vtype135, _size133)
  for _i137:= 0; _i137 < _size133; _i137++ {
    v140, err141 := iprot.ReadString()
    if err141 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key138", "", err141); }
    _key138 := v140
    v142, err143 := iprot.ReadString()
    if err143 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val139", "", err143); }
    _val139 := v142
    p.RelationshipData.Set(_key138, _val139)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *RelationshipInfo) ReadFieldRelationshipData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *RelationshipInfo) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v144, err145 := iprot.ReadString()
  if err145 != nil { return thrift.NewTProtocolExceptionReadField(2, "relationType", p.ThriftName(), err145); }
  p.RelationType = v144
  return err
}

func (p *RelationshipInfo) ReadFieldRelationType(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *RelationshipInfo) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v146, err147 := iprot.ReadString()
  if err147 != nil { return thrift.NewTProtocolExceptionReadField(3, "vertical", p.ThriftName(), err147); }
  p.Vertical = v146
  return err
}

func (p *RelationshipInfo) ReadFieldVertical(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *RelationshipInfo) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v148, err149 := iprot.ReadBool()
  if err149 != nil { return thrift.NewTProtocolExceptionReadField(4, "isProduct", p.ThriftName(), err149); }
  p.IsProduct = v148
  return err
}

func (p *RelationshipInfo) ReadFieldIsProduct(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *RelationshipInfo) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("RelationshipInfo")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *RelationshipInfo) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.RelationshipData != nil {
    err = oprot.WriteFieldBegin("relationshipData", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "relationshipData", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.RelationshipData.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter150 := range p.RelationshipData.Iter() {
      Kiter151, Viter152 := Miter150.Key().(string), Miter150.Value().(string)
      err = oprot.WriteString(string(Kiter151))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter151", "", err); }
      err = oprot.WriteString(string(Viter152))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter152", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "relationshipData", p.ThriftName(), err); }
  }
  return err
}

func (p *RelationshipInfo) WriteFieldRelationshipData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *RelationshipInfo) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("relationType", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "relationType", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.RelationType))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "relationType", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "relationType", p.ThriftName(), err); }
  return err
}

func (p *RelationshipInfo) WriteFieldRelationType(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *RelationshipInfo) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("vertical", thrift.STRING, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "vertical", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Vertical))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "vertical", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "vertical", p.ThriftName(), err); }
  return err
}

func (p *RelationshipInfo) WriteFieldVertical(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *RelationshipInfo) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isProduct", thrift.BOOL, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "isProduct", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsProduct))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "isProduct", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "isProduct", p.ThriftName(), err); }
  return err
}

func (p *RelationshipInfo) WriteFieldIsProduct(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *RelationshipInfo) TStructName() string {
  return "RelationshipInfo"
}

func (p *RelationshipInfo) ThriftName() string {
  return "RelationshipInfo"
}

func (p *RelationshipInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RelationshipInfo(%+v)", *p)
}

func (p *RelationshipInfo) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*RelationshipInfo)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.RelationshipData.CompareTo(data.RelationshipData); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.RelationType != data.RelationType {
    if p.RelationType < data.RelationType {
      return -1, true
    }
    return 1, true
  }
  if p.Vertical != data.Vertical {
    if p.Vertical < data.Vertical {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.IsProduct, data.IsProduct); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *RelationshipInfo) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.RelationshipData
  case 2: return p.RelationType
  case 3: return p.Vertical
  case 4: return p.IsProduct
  }
  return nil
}

func (p *RelationshipInfo) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("relationshipData", thrift.MAP, 1),
    thrift.NewTField("relationType", thrift.STRING, 2),
    thrift.NewTField("vertical", thrift.STRING, 3),
    thrift.NewTField("isProduct", thrift.BOOL, 4),
    })
}

/**
 * Attributes:
 *  - NodeId
 *  - NodeName
 *  - ChildCount
 *  - ProductCount
 *  - NodeMetaData
 */
type CategoryNodeInfo struct {
  thrift.TStruct
  NodeId int32 "nodeId"; // 1
  NodeName string "nodeName"; // 2
  ChildCount int32 "childCount"; // 3
  ProductCount int32 "productCount"; // 4
  NodeMetaData thrift.TMap "nodeMetaData"; // 5
}

func NewCategoryNodeInfo() *CategoryNodeInfo {
  output := &CategoryNodeInfo{
    TStruct:thrift.NewTStruct("CategoryNodeInfo", []thrift.TField{
    thrift.NewTField("nodeId", thrift.I32, 1),
    thrift.NewTField("nodeName", thrift.STRING, 2),
    thrift.NewTField("childCount", thrift.I32, 3),
    thrift.NewTField("productCount", thrift.I32, 4),
    thrift.NewTField("nodeMetaData", thrift.MAP, 5),
    }),
  }
  {
  }
  return output
}

func (p *CategoryNodeInfo) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "nodeId" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "nodeName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "childCount" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "productCount" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "nodeMetaData" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfo) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v153, err154 := iprot.ReadI32()
  if err154 != nil { return thrift.NewTProtocolExceptionReadField(1, "nodeId", p.ThriftName(), err154); }
  p.NodeId = v153
  return err
}

func (p *CategoryNodeInfo) ReadFieldNodeId(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CategoryNodeInfo) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v155, err156 := iprot.ReadString()
  if err156 != nil { return thrift.NewTProtocolExceptionReadField(2, "nodeName", p.ThriftName(), err156); }
  p.NodeName = v155
  return err
}

func (p *CategoryNodeInfo) ReadFieldNodeName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CategoryNodeInfo) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v157, err158 := iprot.ReadI32()
  if err158 != nil { return thrift.NewTProtocolExceptionReadField(3, "childCount", p.ThriftName(), err158); }
  p.ChildCount = v157
  return err
}

func (p *CategoryNodeInfo) ReadFieldChildCount(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *CategoryNodeInfo) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v159, err160 := iprot.ReadI32()
  if err160 != nil { return thrift.NewTProtocolExceptionReadField(4, "productCount", p.ThriftName(), err160); }
  p.ProductCount = v159
  return err
}

func (p *CategoryNodeInfo) ReadFieldProductCount(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *CategoryNodeInfo) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype164, _vtype165, _size163, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.NodeMetaData", "", err)
  }
  p.NodeMetaData = thrift.NewTMap(_ktype164, _vtype165, _size163)
  for _i167:= 0; _i167 < _size163; _i167++ {
    v170, err171 := iprot.ReadString()
    if err171 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key168", "", err171); }
    _key168 := v170
    _ktype175, _vtype176, _size174, err := iprot.ReadMapBegin()
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(-1, "_val169", "", err)
    }
    _val169 := thrift.NewTMap(_ktype175, _vtype176, _size174)
    for _i178:= 0; _i178 < _size174; _i178++ {
      v181, err182 := iprot.ReadString()
      if err182 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key179", "", err182); }
      _key179 := v181
      v183, err184 := iprot.ReadString()
      if err184 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val180", "", err184); }
      _val180 := v183
      _val169.Set(_key179, _val180)
    }
    err = iprot.ReadMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
    p.NodeMetaData.Set(_key168, _val169)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *CategoryNodeInfo) ReadFieldNodeMetaData(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *CategoryNodeInfo) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CategoryNodeInfo")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfo) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("nodeId", thrift.I32, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "nodeId", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.NodeId))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "nodeId", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "nodeId", p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfo) WriteFieldNodeId(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CategoryNodeInfo) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("nodeName", thrift.STRING, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "nodeName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.NodeName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "nodeName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "nodeName", p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfo) WriteFieldNodeName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CategoryNodeInfo) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("childCount", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "childCount", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.ChildCount))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "childCount", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "childCount", p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfo) WriteFieldChildCount(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *CategoryNodeInfo) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("productCount", thrift.I32, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "productCount", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.ProductCount))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "productCount", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "productCount", p.ThriftName(), err); }
  return err
}

func (p *CategoryNodeInfo) WriteFieldProductCount(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *CategoryNodeInfo) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.NodeMetaData != nil {
    err = oprot.WriteFieldBegin("nodeMetaData", thrift.MAP, 5)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "nodeMetaData", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.MAP, p.NodeMetaData.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter185 := range p.NodeMetaData.Iter() {
      Kiter186, Viter187 := Miter185.Key().(string), Miter185.Value().(thrift.TMap)
      err = oprot.WriteString(string(Kiter186))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter186", "", err); }
      err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, Viter187.Len())
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
      for Miter188 := range Viter187.Iter() {
        Kiter189, Viter190 := Miter188.Key().(string), Miter188.Value().(string)
        err = oprot.WriteString(string(Kiter189))
        if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter189", "", err); }
        err = oprot.WriteString(string(Viter190))
        if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter190", "", err); }
      }
      err = oprot.WriteMapEnd()
      if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "nodeMetaData", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryNodeInfo) WriteFieldNodeMetaData(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *CategoryNodeInfo) TStructName() string {
  return "CategoryNodeInfo"
}

func (p *CategoryNodeInfo) ThriftName() string {
  return "CategoryNodeInfo"
}

func (p *CategoryNodeInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryNodeInfo(%+v)", *p)
}

func (p *CategoryNodeInfo) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CategoryNodeInfo)
  if !ok {
    return 0, false
  }
  if p.NodeId != data.NodeId {
    if p.NodeId < data.NodeId {
      return -1, true
    }
    return 1, true
  }
  if p.NodeName != data.NodeName {
    if p.NodeName < data.NodeName {
      return -1, true
    }
    return 1, true
  }
  if p.ChildCount != data.ChildCount {
    if p.ChildCount < data.ChildCount {
      return -1, true
    }
    return 1, true
  }
  if p.ProductCount != data.ProductCount {
    if p.ProductCount < data.ProductCount {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.NodeMetaData.CompareTo(data.NodeMetaData); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CategoryNodeInfo) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.NodeId
  case 2: return p.NodeName
  case 3: return p.ChildCount
  case 4: return p.ProductCount
  case 5: return p.NodeMetaData
  }
  return nil
}

func (p *CategoryNodeInfo) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("nodeId", thrift.I32, 1),
    thrift.NewTField("nodeName", thrift.STRING, 2),
    thrift.NewTField("childCount", thrift.I32, 3),
    thrift.NewTField("productCount", thrift.I32, 4),
    thrift.NewTField("nodeMetaData", thrift.MAP, 5),
    })
}

/**
 * Attributes:
 *  - CategoryNodeInfo
 *  - IsPrimary
 */
type CategoryPathInfo struct {
  thrift.TStruct
  CategoryNodeInfo thrift.TList "categoryNodeInfo"; // 1
  IsPrimary bool "isPrimary"; // 2
}

func NewCategoryPathInfo() *CategoryPathInfo {
  output := &CategoryPathInfo{
    TStruct:thrift.NewTStruct("CategoryPathInfo", []thrift.TField{
    thrift.NewTField("categoryNodeInfo", thrift.LIST, 1),
    thrift.NewTField("isPrimary", thrift.BOOL, 2),
    }),
  }
  {
  }
  return output
}

func (p *CategoryPathInfo) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "categoryNodeInfo" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "isPrimary" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryPathInfo) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype196, _size193, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.CategoryNodeInfo", "", err)
  }
  p.CategoryNodeInfo = thrift.NewTList(_etype196, _size193)
  for _i197:= 0; _i197 < _size193; _i197++ {
    _elem198 := NewCategoryNodeInfo()
    err201 := _elem198.Read(iprot)
    if err201 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem198CategoryNodeInfo", err201); }
    p.CategoryNodeInfo.Push(_elem198)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *CategoryPathInfo) ReadFieldCategoryNodeInfo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CategoryPathInfo) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v202, err203 := iprot.ReadBool()
  if err203 != nil { return thrift.NewTProtocolExceptionReadField(2, "isPrimary", p.ThriftName(), err203); }
  p.IsPrimary = v202
  return err
}

func (p *CategoryPathInfo) ReadFieldIsPrimary(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *CategoryPathInfo) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CategoryPathInfo")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CategoryPathInfo) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CategoryNodeInfo != nil {
    err = oprot.WriteFieldBegin("categoryNodeInfo", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "categoryNodeInfo", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.CategoryNodeInfo.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter204 := range p.CategoryNodeInfo.Iter() {
      Iter205 := Iter204.(*CategoryNodeInfo)
      err = Iter205.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategoryNodeInfo", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "categoryNodeInfo", p.ThriftName(), err); }
  }
  return err
}

func (p *CategoryPathInfo) WriteFieldCategoryNodeInfo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CategoryPathInfo) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("isPrimary", thrift.BOOL, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "isPrimary", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.IsPrimary))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "isPrimary", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "isPrimary", p.ThriftName(), err); }
  return err
}

func (p *CategoryPathInfo) WriteFieldIsPrimary(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *CategoryPathInfo) TStructName() string {
  return "CategoryPathInfo"
}

func (p *CategoryPathInfo) ThriftName() string {
  return "CategoryPathInfo"
}

func (p *CategoryPathInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryPathInfo(%+v)", *p)
}

func (p *CategoryPathInfo) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CategoryPathInfo)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.CategoryNodeInfo.CompareTo(data.CategoryNodeInfo); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp := thrift.CompareBool(p.IsPrimary, data.IsPrimary); cmp != 0 {
    return cmp, true
  }
  return 0, true
}

func (p *CategoryPathInfo) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.CategoryNodeInfo
  case 2: return p.IsPrimary
  }
  return nil
}

func (p *CategoryPathInfo) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("categoryNodeInfo", thrift.LIST, 1),
    thrift.NewTField("isPrimary", thrift.BOOL, 2),
    })
}

/**
 * Attributes:
 *  - CategoryPathInfo
 */
type CategorizationInfo struct {
  thrift.TStruct
  CategoryPathInfo thrift.TList "categoryPathInfo"; // 1
}

func NewCategorizationInfo() *CategorizationInfo {
  output := &CategorizationInfo{
    TStruct:thrift.NewTStruct("CategorizationInfo", []thrift.TField{
    thrift.NewTField("categoryPathInfo", thrift.LIST, 1),
    }),
  }
  {
  }
  return output
}

func (p *CategorizationInfo) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "categoryPathInfo" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CategorizationInfo) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype211, _size208, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.CategoryPathInfo", "", err)
  }
  p.CategoryPathInfo = thrift.NewTList(_etype211, _size208)
  for _i212:= 0; _i212 < _size208; _i212++ {
    _elem213 := NewCategoryPathInfo()
    err216 := _elem213.Read(iprot)
    if err216 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem213CategoryPathInfo", err216); }
    p.CategoryPathInfo.Push(_elem213)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *CategorizationInfo) ReadFieldCategoryPathInfo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CategorizationInfo) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CategorizationInfo")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CategorizationInfo) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CategoryPathInfo != nil {
    err = oprot.WriteFieldBegin("categoryPathInfo", thrift.LIST, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "categoryPathInfo", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.CategoryPathInfo.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter217 := range p.CategoryPathInfo.Iter() {
      Iter218 := Iter217.(*CategoryPathInfo)
      err = Iter218.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CategoryPathInfo", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "categoryPathInfo", p.ThriftName(), err); }
  }
  return err
}

func (p *CategorizationInfo) WriteFieldCategoryPathInfo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CategorizationInfo) TStructName() string {
  return "CategorizationInfo"
}

func (p *CategorizationInfo) ThriftName() string {
  return "CategorizationInfo"
}

func (p *CategorizationInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategorizationInfo(%+v)", *p)
}

func (p *CategorizationInfo) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CategorizationInfo)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.CategoryPathInfo.CompareTo(data.CategoryPathInfo); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CategorizationInfo) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.CategoryPathInfo
  }
  return nil
}

func (p *CategorizationInfo) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("categoryPathInfo", thrift.LIST, 1),
    })
}

/**
 * Attributes:
 *  - GroupName
 *  - GroupDetails
 */
type ContentGroup struct {
  thrift.TStruct
  GroupName string "groupName"; // 1
  GroupDetails thrift.TMap "groupDetails"; // 2
}

func NewContentGroup() *ContentGroup {
  output := &ContentGroup{
    TStruct:thrift.NewTStruct("ContentGroup", []thrift.TField{
    thrift.NewTField("groupName", thrift.STRING, 1),
    thrift.NewTField("groupDetails", thrift.MAP, 2),
    }),
  }
  {
  }
  return output
}

func (p *ContentGroup) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "groupName" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "groupDetails" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *ContentGroup) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v219, err220 := iprot.ReadString()
  if err220 != nil { return thrift.NewTProtocolExceptionReadField(1, "groupName", p.ThriftName(), err220); }
  p.GroupName = v219
  return err
}

func (p *ContentGroup) ReadFieldGroupName(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *ContentGroup) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype224, _vtype225, _size223, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.GroupDetails", "", err)
  }
  p.GroupDetails = thrift.NewTMap(_ktype224, _vtype225, _size223)
  for _i227:= 0; _i227 < _size223; _i227++ {
    v230, err231 := iprot.ReadString()
    if err231 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key228", "", err231); }
    _key228 := v230
    v232, err233 := iprot.ReadString()
    if err233 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val229", "", err233); }
    _val229 := v232
    p.GroupDetails.Set(_key228, _val229)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *ContentGroup) ReadFieldGroupDetails(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *ContentGroup) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("ContentGroup")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *ContentGroup) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("groupName", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "groupName", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.GroupName))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "groupName", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "groupName", p.ThriftName(), err); }
  return err
}

func (p *ContentGroup) WriteFieldGroupName(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *ContentGroup) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.GroupDetails != nil {
    err = oprot.WriteFieldBegin("groupDetails", thrift.MAP, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "groupDetails", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, p.GroupDetails.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter234 := range p.GroupDetails.Iter() {
      Kiter235, Viter236 := Miter234.Key().(string), Miter234.Value().(string)
      err = oprot.WriteString(string(Kiter235))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter235", "", err); }
      err = oprot.WriteString(string(Viter236))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter236", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "groupDetails", p.ThriftName(), err); }
  }
  return err
}

func (p *ContentGroup) WriteFieldGroupDetails(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *ContentGroup) TStructName() string {
  return "ContentGroup"
}

func (p *ContentGroup) ThriftName() string {
  return "ContentGroup"
}

func (p *ContentGroup) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContentGroup(%+v)", *p)
}

func (p *ContentGroup) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*ContentGroup)
  if !ok {
    return 0, false
  }
  if p.GroupName != data.GroupName {
    if p.GroupName < data.GroupName {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.GroupDetails.CompareTo(data.GroupDetails); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *ContentGroup) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.GroupName
  case 2: return p.GroupDetails
  }
  return nil
}

func (p *ContentGroup) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("groupName", thrift.STRING, 1),
    thrift.NewTField("groupDetails", thrift.MAP, 2),
    })
}

/**
 * Attributes:
 *  - AttributeValues
 */
type TransformedContent struct {
  thrift.TStruct
  AttributeValues thrift.TMap "attributeValues"; // 1
}

func NewTransformedContent() *TransformedContent {
  output := &TransformedContent{
    TStruct:thrift.NewTStruct("TransformedContent", []thrift.TField{
    thrift.NewTField("attributeValues", thrift.MAP, 1),
    }),
  }
  {
  }
  return output
}

func (p *TransformedContent) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "attributeValues" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *TransformedContent) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype240, _vtype241, _size239, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.AttributeValues", "", err)
  }
  p.AttributeValues = thrift.NewTMap(_ktype240, _vtype241, _size239)
  for _i243:= 0; _i243 < _size239; _i243++ {
    v246, err247 := iprot.ReadString()
    if err247 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key244", "", err247); }
    _key244 := v246
    _val245 := NewAttribute()
    err250 := _val245.Read(iprot)
    if err250 != nil { return thrift.NewTProtocolExceptionReadStruct("_val245Attribute", err250); }
    p.AttributeValues.Set(_key244, _val245)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *TransformedContent) ReadFieldAttributeValues(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *TransformedContent) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("TransformedContent")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *TransformedContent) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.AttributeValues != nil {
    err = oprot.WriteFieldBegin("attributeValues", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "attributeValues", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.AttributeValues.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter251 := range p.AttributeValues.Iter() {
      Kiter252, Viter253 := Miter251.Key().(string), Miter251.Value().(*Attribute)
      err = oprot.WriteString(string(Kiter252))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter252", "", err); }
      err = Viter253.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Attribute", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "attributeValues", p.ThriftName(), err); }
  }
  return err
}

func (p *TransformedContent) WriteFieldAttributeValues(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *TransformedContent) TStructName() string {
  return "TransformedContent"
}

func (p *TransformedContent) ThriftName() string {
  return "TransformedContent"
}

func (p *TransformedContent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TransformedContent(%+v)", *p)
}

func (p *TransformedContent) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*TransformedContent)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.AttributeValues.CompareTo(data.AttributeValues); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *TransformedContent) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.AttributeValues
  }
  return nil
}

func (p *TransformedContent) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("attributeValues", thrift.MAP, 1),
    })
}

/**
 * Attributes:
 *  - ContentID
 *  - Groups
 *  - AttributeValues
 *  - TransContents
 */
type StaticContent struct {
  thrift.TStruct
  ContentID string "contentID"; // 1
  Groups thrift.TList "groups"; // 2
  AttributeValues thrift.TMap "attributeValues"; // 3
  TransContents thrift.TList "transContents"; // 4
}

func NewStaticContent() *StaticContent {
  output := &StaticContent{
    TStruct:thrift.NewTStruct("StaticContent", []thrift.TField{
    thrift.NewTField("contentID", thrift.STRING, 1),
    thrift.NewTField("groups", thrift.LIST, 2),
    thrift.NewTField("attributeValues", thrift.MAP, 3),
    thrift.NewTField("transContents", thrift.LIST, 4),
    }),
  }
  {
  }
  return output
}

func (p *StaticContent) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "contentID" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "groups" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "attributeValues" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "transContents" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *StaticContent) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v254, err255 := iprot.ReadString()
  if err255 != nil { return thrift.NewTProtocolExceptionReadField(1, "contentID", p.ThriftName(), err255); }
  p.ContentID = v254
  return err
}

func (p *StaticContent) ReadFieldContentID(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *StaticContent) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype261, _size258, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.Groups", "", err)
  }
  p.Groups = thrift.NewTList(_etype261, _size258)
  for _i262:= 0; _i262 < _size258; _i262++ {
    _elem263 := NewContentGroup()
    err266 := _elem263.Read(iprot)
    if err266 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem263ContentGroup", err266); }
    p.Groups.Push(_elem263)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *StaticContent) ReadFieldGroups(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *StaticContent) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype270, _vtype271, _size269, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.AttributeValues", "", err)
  }
  p.AttributeValues = thrift.NewTMap(_ktype270, _vtype271, _size269)
  for _i273:= 0; _i273 < _size269; _i273++ {
    v276, err277 := iprot.ReadString()
    if err277 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key274", "", err277); }
    _key274 := v276
    _val275 := NewAttribute()
    err280 := _val275.Read(iprot)
    if err280 != nil { return thrift.NewTProtocolExceptionReadStruct("_val275Attribute", err280); }
    p.AttributeValues.Set(_key274, _val275)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *StaticContent) ReadFieldAttributeValues(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *StaticContent) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype286, _size283, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.TransContents", "", err)
  }
  p.TransContents = thrift.NewTList(_etype286, _size283)
  for _i287:= 0; _i287 < _size283; _i287++ {
    _elem288 := NewTransformedContent()
    err291 := _elem288.Read(iprot)
    if err291 != nil { return thrift.NewTProtocolExceptionReadStruct("_elem288TransformedContent", err291); }
    p.TransContents.Push(_elem288)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *StaticContent) ReadFieldTransContents(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *StaticContent) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("StaticContent")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *StaticContent) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("contentID", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "contentID", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.ContentID))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "contentID", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "contentID", p.ThriftName(), err); }
  return err
}

func (p *StaticContent) WriteFieldContentID(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *StaticContent) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.Groups != nil {
    err = oprot.WriteFieldBegin("groups", thrift.LIST, 2)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "groups", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.Groups.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter292 := range p.Groups.Iter() {
      Iter293 := Iter292.(*ContentGroup)
      err = Iter293.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("ContentGroup", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "groups", p.ThriftName(), err); }
  }
  return err
}

func (p *StaticContent) WriteFieldGroups(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *StaticContent) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.AttributeValues != nil {
    err = oprot.WriteFieldBegin("attributeValues", thrift.MAP, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "attributeValues", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, p.AttributeValues.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter294 := range p.AttributeValues.Iter() {
      Kiter295, Viter296 := Miter294.Key().(string), Miter294.Value().(*Attribute)
      err = oprot.WriteString(string(Kiter295))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter295", "", err); }
      err = Viter296.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("Attribute", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "attributeValues", p.ThriftName(), err); }
  }
  return err
}

func (p *StaticContent) WriteFieldAttributeValues(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *StaticContent) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.TransContents != nil {
    err = oprot.WriteFieldBegin("transContents", thrift.LIST, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "transContents", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRUCT, p.TransContents.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter297 := range p.TransContents.Iter() {
      Iter298 := Iter297.(*TransformedContent)
      err = Iter298.Write(oprot)
      if err != nil { return thrift.NewTProtocolExceptionWriteStruct("TransformedContent", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "transContents", p.ThriftName(), err); }
  }
  return err
}

func (p *StaticContent) WriteFieldTransContents(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *StaticContent) TStructName() string {
  return "StaticContent"
}

func (p *StaticContent) ThriftName() string {
  return "StaticContent"
}

func (p *StaticContent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StaticContent(%+v)", *p)
}

func (p *StaticContent) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*StaticContent)
  if !ok {
    return 0, false
  }
  if p.ContentID != data.ContentID {
    if p.ContentID < data.ContentID {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.Groups.CompareTo(data.Groups); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.AttributeValues.CompareTo(data.AttributeValues); !ok || cmp != 0 {
    return cmp, ok
  }
  if cmp, ok := p.TransContents.CompareTo(data.TransContents); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *StaticContent) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.ContentID
  case 2: return p.Groups
  case 3: return p.AttributeValues
  case 4: return p.TransContents
  }
  return nil
}

func (p *StaticContent) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("contentID", thrift.STRING, 1),
    thrift.NewTField("groups", thrift.LIST, 2),
    thrift.NewTField("attributeValues", thrift.MAP, 3),
    thrift.NewTField("transContents", thrift.LIST, 4),
    })
}

/**
 * Attributes:
 *  - Vertical
 *  - CurrentVersionNo
 *  - MaxResultSize
 *  - CmsBaseRequest
 *  - MaxVersionNo
 */
type DeltaRequest struct {
  thrift.TStruct
  Vertical string "vertical"; // 1
  CurrentVersionNo int64 "currentVersionNo"; // 2
  MaxResultSize int32 "maxResultSize"; // 3
  CmsBaseRequest *CMSBaseRequest "cmsBaseRequest"; // 4
  MaxVersionNo int64 "maxVersionNo"; // 5
}

func NewDeltaRequest() *DeltaRequest {
  output := &DeltaRequest{
    TStruct:thrift.NewTStruct("DeltaRequest", []thrift.TField{
    thrift.NewTField("vertical", thrift.STRING, 1),
    thrift.NewTField("currentVersionNo", thrift.I64, 2),
    thrift.NewTField("maxResultSize", thrift.I32, 3),
    thrift.NewTField("cmsBaseRequest", thrift.STRUCT, 4),
    thrift.NewTField("maxVersionNo", thrift.I64, 5),
    }),
  }
  {
  }
  return output
}

func (p *DeltaRequest) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "vertical" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "currentVersionNo" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "maxResultSize" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "cmsBaseRequest" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "maxVersionNo" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeltaRequest) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v299, err300 := iprot.ReadString()
  if err300 != nil { return thrift.NewTProtocolExceptionReadField(1, "vertical", p.ThriftName(), err300); }
  p.Vertical = v299
  return err
}

func (p *DeltaRequest) ReadFieldVertical(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeltaRequest) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v301, err302 := iprot.ReadI64()
  if err302 != nil { return thrift.NewTProtocolExceptionReadField(2, "currentVersionNo", p.ThriftName(), err302); }
  p.CurrentVersionNo = v301
  return err
}

func (p *DeltaRequest) ReadFieldCurrentVersionNo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DeltaRequest) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v303, err304 := iprot.ReadI32()
  if err304 != nil { return thrift.NewTProtocolExceptionReadField(3, "maxResultSize", p.ThriftName(), err304); }
  p.MaxResultSize = v303
  return err
}

func (p *DeltaRequest) ReadFieldMaxResultSize(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DeltaRequest) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsBaseRequest = NewCMSBaseRequest()
  err307 := p.CmsBaseRequest.Read(iprot)
  if err307 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsBaseRequestCMSBaseRequest", err307); }
  return err
}

func (p *DeltaRequest) ReadFieldCmsBaseRequest(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *DeltaRequest) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v308, err309 := iprot.ReadI64()
  if err309 != nil { return thrift.NewTProtocolExceptionReadField(5, "maxVersionNo", p.ThriftName(), err309); }
  p.MaxVersionNo = v308
  return err
}

func (p *DeltaRequest) ReadFieldMaxVersionNo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *DeltaRequest) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("DeltaRequest")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeltaRequest) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("vertical", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "vertical", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Vertical))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "vertical", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "vertical", p.ThriftName(), err); }
  return err
}

func (p *DeltaRequest) WriteFieldVertical(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeltaRequest) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("currentVersionNo", thrift.I64, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "currentVersionNo", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.CurrentVersionNo))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "currentVersionNo", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "currentVersionNo", p.ThriftName(), err); }
  return err
}

func (p *DeltaRequest) WriteFieldCurrentVersionNo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DeltaRequest) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("maxResultSize", thrift.I32, 3)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "maxResultSize", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.MaxResultSize))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "maxResultSize", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "maxResultSize", p.ThriftName(), err); }
  return err
}

func (p *DeltaRequest) WriteFieldMaxResultSize(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DeltaRequest) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsBaseRequest != nil {
    err = oprot.WriteFieldBegin("cmsBaseRequest", thrift.STRUCT, 4)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "cmsBaseRequest", p.ThriftName(), err); }
    err = p.CmsBaseRequest.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSBaseRequest", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "cmsBaseRequest", p.ThriftName(), err); }
  }
  return err
}

func (p *DeltaRequest) WriteFieldCmsBaseRequest(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *DeltaRequest) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("maxVersionNo", thrift.I64, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "maxVersionNo", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.MaxVersionNo))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "maxVersionNo", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "maxVersionNo", p.ThriftName(), err); }
  return err
}

func (p *DeltaRequest) WriteFieldMaxVersionNo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *DeltaRequest) TStructName() string {
  return "DeltaRequest"
}

func (p *DeltaRequest) ThriftName() string {
  return "DeltaRequest"
}

func (p *DeltaRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeltaRequest(%+v)", *p)
}

func (p *DeltaRequest) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeltaRequest)
  if !ok {
    return 0, false
  }
  if p.Vertical != data.Vertical {
    if p.Vertical < data.Vertical {
      return -1, true
    }
    return 1, true
  }
  if p.CurrentVersionNo != data.CurrentVersionNo {
    if p.CurrentVersionNo < data.CurrentVersionNo {
      return -1, true
    }
    return 1, true
  }
  if p.MaxResultSize != data.MaxResultSize {
    if p.MaxResultSize < data.MaxResultSize {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.CmsBaseRequest.CompareTo(data.CmsBaseRequest); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.MaxVersionNo != data.MaxVersionNo {
    if p.MaxVersionNo < data.MaxVersionNo {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *DeltaRequest) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Vertical
  case 2: return p.CurrentVersionNo
  case 3: return p.MaxResultSize
  case 4: return p.CmsBaseRequest
  case 5: return p.MaxVersionNo
  }
  return nil
}

func (p *DeltaRequest) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("vertical", thrift.STRING, 1),
    thrift.NewTField("currentVersionNo", thrift.I64, 2),
    thrift.NewTField("maxResultSize", thrift.I32, 3),
    thrift.NewTField("cmsBaseRequest", thrift.STRUCT, 4),
    thrift.NewTField("maxVersionNo", thrift.I64, 5),
    })
}

/**
 * Attributes:
 *  - Vertical
 *  - ResultCount
 *  - ProductIDs
 *  - NewVersionNo
 *  - HasNext
 *  - CmsBaseResult
 */
type DeltaResult struct {
  thrift.TStruct
  Vertical string "vertical"; // 1
  ResultCount int32 "resultCount"; // 2
  ProductIDs thrift.TList "productIDs"; // 3
  NewVersionNo int64 "newVersionNo"; // 4
  HasNext bool "hasNext"; // 5
  CmsBaseResult *CMSBaseResult "cmsBaseResult"; // 6
}

func NewDeltaResult() *DeltaResult {
  output := &DeltaResult{
    TStruct:thrift.NewTStruct("DeltaResult", []thrift.TField{
    thrift.NewTField("vertical", thrift.STRING, 1),
    thrift.NewTField("resultCount", thrift.I32, 2),
    thrift.NewTField("productIDs", thrift.LIST, 3),
    thrift.NewTField("newVersionNo", thrift.I64, 4),
    thrift.NewTField("hasNext", thrift.BOOL, 5),
    thrift.NewTField("cmsBaseResult", thrift.STRUCT, 6),
    }),
  }
  {
  }
  return output
}

func (p *DeltaResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "vertical" {
      if fieldTypeId == thrift.STRING {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 2 || fieldName == "resultCount" {
      if fieldTypeId == thrift.I32 {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField2(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 3 || fieldName == "productIDs" {
      if fieldTypeId == thrift.LIST {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField3(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 4 || fieldName == "newVersionNo" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField4(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 5 || fieldName == "hasNext" {
      if fieldTypeId == thrift.BOOL {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField5(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else if fieldId == 6 || fieldName == "cmsBaseResult" {
      if fieldTypeId == thrift.STRUCT {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField6(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *DeltaResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v310, err311 := iprot.ReadString()
  if err311 != nil { return thrift.NewTProtocolExceptionReadField(1, "vertical", p.ThriftName(), err311); }
  p.Vertical = v310
  return err
}

func (p *DeltaResult) ReadFieldVertical(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *DeltaResult) ReadField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v312, err313 := iprot.ReadI32()
  if err313 != nil { return thrift.NewTProtocolExceptionReadField(2, "resultCount", p.ThriftName(), err313); }
  p.ResultCount = v312
  return err
}

func (p *DeltaResult) ReadFieldResultCount(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField2(iprot)
}

func (p *DeltaResult) ReadField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _etype319, _size316, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.ProductIDs", "", err)
  }
  p.ProductIDs = thrift.NewTList(_etype319, _size316)
  for _i320:= 0; _i320 < _size316; _i320++ {
    v322, err323 := iprot.ReadString()
    if err323 != nil { return thrift.NewTProtocolExceptionReadField(0, "_elem321", "", err323); }
    _elem321 := ProductID(v322)
    p.ProductIDs.Push(_elem321)
  }
  err = iprot.ReadListEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "list",err); }
  return err
}

func (p *DeltaResult) ReadFieldProductIDs(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField3(iprot)
}

func (p *DeltaResult) ReadField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v324, err325 := iprot.ReadI64()
  if err325 != nil { return thrift.NewTProtocolExceptionReadField(4, "newVersionNo", p.ThriftName(), err325); }
  p.NewVersionNo = v324
  return err
}

func (p *DeltaResult) ReadFieldNewVersionNo(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField4(iprot)
}

func (p *DeltaResult) ReadField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v326, err327 := iprot.ReadBool()
  if err327 != nil { return thrift.NewTProtocolExceptionReadField(5, "hasNext", p.ThriftName(), err327); }
  p.HasNext = v326
  return err
}

func (p *DeltaResult) ReadFieldHasNext(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField5(iprot)
}

func (p *DeltaResult) ReadField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  p.CmsBaseResult = NewCMSBaseResult()
  err330 := p.CmsBaseResult.Read(iprot)
  if err330 != nil { return thrift.NewTProtocolExceptionReadStruct("p.CmsBaseResultCMSBaseResult", err330); }
  return err
}

func (p *DeltaResult) ReadFieldCmsBaseResult(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField6(iprot)
}

func (p *DeltaResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("DeltaResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = p.WriteField2(oprot)
  if err != nil { return err }
  err = p.WriteField3(oprot)
  if err != nil { return err }
  err = p.WriteField4(oprot)
  if err != nil { return err }
  err = p.WriteField5(oprot)
  if err != nil { return err }
  err = p.WriteField6(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *DeltaResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("vertical", thrift.STRING, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "vertical", p.ThriftName(), err); }
  err = oprot.WriteString(string(p.Vertical))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "vertical", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "vertical", p.ThriftName(), err); }
  return err
}

func (p *DeltaResult) WriteFieldVertical(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *DeltaResult) WriteField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("resultCount", thrift.I32, 2)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "resultCount", p.ThriftName(), err); }
  err = oprot.WriteI32(int32(p.ResultCount))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "resultCount", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(2, "resultCount", p.ThriftName(), err); }
  return err
}

func (p *DeltaResult) WriteFieldResultCount(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField2(oprot)
}

func (p *DeltaResult) WriteField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.ProductIDs != nil {
    err = oprot.WriteFieldBegin("productIDs", thrift.LIST, 3)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "productIDs", p.ThriftName(), err); }
    err = oprot.WriteListBegin(thrift.STRING, p.ProductIDs.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    for Iter331 := range p.ProductIDs.Iter() {
      Iter332 := Iter331.(ProductID)
      err = oprot.WriteString(string(Iter332))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Iter332", "", err); }
    }
    err = oprot.WriteListEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(3, "productIDs", p.ThriftName(), err); }
  }
  return err
}

func (p *DeltaResult) WriteFieldProductIDs(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField3(oprot)
}

func (p *DeltaResult) WriteField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("newVersionNo", thrift.I64, 4)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "newVersionNo", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.NewVersionNo))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "newVersionNo", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(4, "newVersionNo", p.ThriftName(), err); }
  return err
}

func (p *DeltaResult) WriteFieldNewVersionNo(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField4(oprot)
}

func (p *DeltaResult) WriteField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("hasNext", thrift.BOOL, 5)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "hasNext", p.ThriftName(), err); }
  err = oprot.WriteBool(bool(p.HasNext))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "hasNext", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(5, "hasNext", p.ThriftName(), err); }
  return err
}

func (p *DeltaResult) WriteFieldHasNext(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField5(oprot)
}

func (p *DeltaResult) WriteField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.CmsBaseResult != nil {
    err = oprot.WriteFieldBegin("cmsBaseResult", thrift.STRUCT, 6)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "cmsBaseResult", p.ThriftName(), err); }
    err = p.CmsBaseResult.Write(oprot)
    if err != nil { return thrift.NewTProtocolExceptionWriteStruct("CMSBaseResult", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(6, "cmsBaseResult", p.ThriftName(), err); }
  }
  return err
}

func (p *DeltaResult) WriteFieldCmsBaseResult(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField6(oprot)
}

func (p *DeltaResult) TStructName() string {
  return "DeltaResult"
}

func (p *DeltaResult) ThriftName() string {
  return "DeltaResult"
}

func (p *DeltaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeltaResult(%+v)", *p)
}

func (p *DeltaResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*DeltaResult)
  if !ok {
    return 0, false
  }
  if p.Vertical != data.Vertical {
    if p.Vertical < data.Vertical {
      return -1, true
    }
    return 1, true
  }
  if p.ResultCount != data.ResultCount {
    if p.ResultCount < data.ResultCount {
      return -1, true
    }
    return 1, true
  }
  if cmp, ok := p.ProductIDs.CompareTo(data.ProductIDs); !ok || cmp != 0 {
    return cmp, ok
  }
  if p.NewVersionNo != data.NewVersionNo {
    if p.NewVersionNo < data.NewVersionNo {
      return -1, true
    }
    return 1, true
  }
  if cmp := thrift.CompareBool(p.HasNext, data.HasNext); cmp != 0 {
    return cmp, true
  }
  if cmp, ok := p.CmsBaseResult.CompareTo(data.CmsBaseResult); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *DeltaResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Vertical
  case 2: return p.ResultCount
  case 3: return p.ProductIDs
  case 4: return p.NewVersionNo
  case 5: return p.HasNext
  case 6: return p.CmsBaseResult
  }
  return nil
}

func (p *DeltaResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("vertical", thrift.STRING, 1),
    thrift.NewTField("resultCount", thrift.I32, 2),
    thrift.NewTField("productIDs", thrift.LIST, 3),
    thrift.NewTField("newVersionNo", thrift.I64, 4),
    thrift.NewTField("hasNext", thrift.BOOL, 5),
    thrift.NewTField("cmsBaseResult", thrift.STRUCT, 6),
    })
}

/**
 * Attributes:
 *  - VerticalVersionMap
 */
type CmsVerticalVersionsResult struct {
  thrift.TStruct
  VerticalVersionMap thrift.TMap "verticalVersionMap"; // 1
}

func NewCmsVerticalVersionsResult() *CmsVerticalVersionsResult {
  output := &CmsVerticalVersionsResult{
    TStruct:thrift.NewTStruct("CmsVerticalVersionsResult", []thrift.TField{
    thrift.NewTField("verticalVersionMap", thrift.MAP, 1),
    }),
  }
  {
  }
  return output
}

func (p *CmsVerticalVersionsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "verticalVersionMap" {
      if fieldTypeId == thrift.MAP {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *CmsVerticalVersionsResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _ktype336, _vtype337, _size335, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.NewTProtocolExceptionReadField(-1, "p.VerticalVersionMap", "", err)
  }
  p.VerticalVersionMap = thrift.NewTMap(_ktype336, _vtype337, _size335)
  for _i339:= 0; _i339 < _size335; _i339++ {
    v342, err343 := iprot.ReadString()
    if err343 != nil { return thrift.NewTProtocolExceptionReadField(0, "_key340", "", err343); }
    _key340 := v342
    v344, err345 := iprot.ReadI64()
    if err345 != nil { return thrift.NewTProtocolExceptionReadField(0, "_val341", "", err345); }
    _val341 := v344
    p.VerticalVersionMap.Set(_key340, _val341)
  }
  err = iprot.ReadMapEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadField(-1, "", "map", err); }
  return err
}

func (p *CmsVerticalVersionsResult) ReadFieldVerticalVersionMap(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *CmsVerticalVersionsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("CmsVerticalVersionsResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *CmsVerticalVersionsResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  if p.VerticalVersionMap != nil {
    err = oprot.WriteFieldBegin("verticalVersionMap", thrift.MAP, 1)
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalVersionMap", p.ThriftName(), err); }
    err = oprot.WriteMapBegin(thrift.STRING, thrift.I64, p.VerticalVersionMap.Len())
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    for Miter346 := range p.VerticalVersionMap.Iter() {
      Kiter347, Viter348 := Miter346.Key().(string), Miter346.Value().(int64)
      err = oprot.WriteString(string(Kiter347))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Kiter347", "", err); }
      err = oprot.WriteI64(int64(Viter348))
      if err != nil { return thrift.NewTProtocolExceptionWriteField(0, "Viter348", "", err); }
    }
    err = oprot.WriteMapEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err); }
    err = oprot.WriteFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "verticalVersionMap", p.ThriftName(), err); }
  }
  return err
}

func (p *CmsVerticalVersionsResult) WriteFieldVerticalVersionMap(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *CmsVerticalVersionsResult) TStructName() string {
  return "CmsVerticalVersionsResult"
}

func (p *CmsVerticalVersionsResult) ThriftName() string {
  return "CmsVerticalVersionsResult"
}

func (p *CmsVerticalVersionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CmsVerticalVersionsResult(%+v)", *p)
}

func (p *CmsVerticalVersionsResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*CmsVerticalVersionsResult)
  if !ok {
    return 0, false
  }
  if cmp, ok := p.VerticalVersionMap.CompareTo(data.VerticalVersionMap); !ok || cmp != 0 {
    return cmp, ok
  }
  return 0, true
}

func (p *CmsVerticalVersionsResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.VerticalVersionMap
  }
  return nil
}

func (p *CmsVerticalVersionsResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("verticalVersionMap", thrift.MAP, 1),
    })
}

/**
 * Attributes:
 *  - Version
 */
type VerticalVersionResult struct {
  thrift.TStruct
  Version int64 "version"; // 1
}

func NewVerticalVersionResult() *VerticalVersionResult {
  output := &VerticalVersionResult{
    TStruct:thrift.NewTStruct("VerticalVersionResult", []thrift.TField{
    thrift.NewTField("version", thrift.I64, 1),
    }),
  }
  {
  }
  return output
}

func (p *VerticalVersionResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  _, err = iprot.ReadStructBegin()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  for {
    fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if fieldId < 0 {
      fieldId = int16(p.FieldIdFromFieldName(fieldName))
    } else if fieldName == "" {
      fieldName = p.FieldNameFromFieldId(int(fieldId))
    }
    if fieldTypeId == thrift.GENERIC {
      fieldTypeId = p.FieldFromFieldId(int(fieldId)).TypeId()
    }
    if err != nil {
      return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if fieldId == 1 || fieldName == "version" {
      if fieldTypeId == thrift.I64 {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else if fieldTypeId == thrift.VOID {
        err = iprot.Skip(fieldTypeId)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      } else {
        err = p.ReadField1(iprot)
        if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
      }
    } else {
      err = iprot.Skip(fieldTypeId)
      if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
    }
    err = iprot.ReadFieldEnd()
    if err != nil { return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err); }
  }
  err = iprot.ReadStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err); }
  return err
}

func (p *VerticalVersionResult) ReadField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
  v349, err350 := iprot.ReadI64()
  if err350 != nil { return thrift.NewTProtocolExceptionReadField(1, "version", p.ThriftName(), err350); }
  p.Version = v349
  return err
}

func (p *VerticalVersionResult) ReadFieldVersion(iprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.ReadField1(iprot)
}

func (p *VerticalVersionResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteStructBegin("VerticalVersionResult")
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  err = p.WriteField1(oprot)
  if err != nil { return err }
  err = oprot.WriteFieldStop()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err); }
  err = oprot.WriteStructEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err); }
  return err
}

func (p *VerticalVersionResult) WriteField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
  err = oprot.WriteFieldBegin("version", thrift.I64, 1)
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "version", p.ThriftName(), err); }
  err = oprot.WriteI64(int64(p.Version))
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "version", p.ThriftName(), err); }
  err = oprot.WriteFieldEnd()
  if err != nil { return thrift.NewTProtocolExceptionWriteField(1, "version", p.ThriftName(), err); }
  return err
}

func (p *VerticalVersionResult) WriteFieldVersion(oprot thrift.TProtocol) (thrift.TProtocolException) {
  return p.WriteField1(oprot)
}

func (p *VerticalVersionResult) TStructName() string {
  return "VerticalVersionResult"
}

func (p *VerticalVersionResult) ThriftName() string {
  return "VerticalVersionResult"
}

func (p *VerticalVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerticalVersionResult(%+v)", *p)
}

func (p *VerticalVersionResult) CompareTo(other interface{}) (int, bool) {
  if other == nil {
    return 1, true
  }
  data, ok := other.(*VerticalVersionResult)
  if !ok {
    return 0, false
  }
  if p.Version != data.Version {
    if p.Version < data.Version {
      return -1, true
    }
    return 1, true
  }
  return 0, true
}

func (p *VerticalVersionResult) AttributeByFieldId(id int) interface{} {
  switch id {
  default: return nil
  case 1: return p.Version
  }
  return nil
}

func (p *VerticalVersionResult) TStructFields() thrift.TFieldContainer {
  return thrift.NewTFieldContainer([]thrift.TField{
    thrift.NewTField("version", thrift.I64, 1),
    })
}

func init() {
}

