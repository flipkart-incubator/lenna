// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cms

import (
	"fmt"
	"thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type ProductID string

type CMSBaseRequest struct {
	ClientId         string            `thrift:"clientId,1"`
	RequestId        string            `thrift:"requestId,2"`
	RequestTimestamp int64             `thrift:"requestTimestamp,3"`
	RequestParams    map[string]string `thrift:"requestParams,4"`
}

func NewCMSBaseRequest() *CMSBaseRequest {
	return &CMSBaseRequest{}
}

func (p *CMSBaseRequest) IsSetRequestParams() bool {
	return p.RequestParams != nil && len(p.RequestParams) > 0
}

func (p *CMSBaseRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CMSBaseRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ClientId = v
	}
	return nil
}

func (p *CMSBaseRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RequestId = v
	}
	return nil
}

func (p *CMSBaseRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.RequestTimestamp = v
	}
	return nil
}

func (p *CMSBaseRequest) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.RequestParams = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val1 = v
		}
		p.RequestParams[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *CMSBaseRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CMSBaseRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CMSBaseRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:clientId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ClientId)); err != nil {
		return fmt.Errorf("%T.clientId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:clientId: %s", p, err)
	}
	return err
}

func (p *CMSBaseRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:requestId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RequestId)); err != nil {
		return fmt.Errorf("%T.requestId (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:requestId: %s", p, err)
	}
	return err
}

func (p *CMSBaseRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("requestTimestamp", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:requestTimestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.RequestTimestamp)); err != nil {
		return fmt.Errorf("%T.requestTimestamp (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:requestTimestamp: %s", p, err)
	}
	return err
}

func (p *CMSBaseRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.RequestParams != nil {
		if p.IsSetRequestParams() {
			if err := oprot.WriteFieldBegin("requestParams", thrift.MAP, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:requestParams: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.RequestParams)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range p.RequestParams {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:requestParams: %s", p, err)
			}
		}
	}
	return err
}

func (p *CMSBaseRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CMSBaseRequest(%+v)", *p)
}

type CMSBaseResult struct {
	ServerId            string            `thrift:"serverId,1"`
	ResponseTimestamp   int64             `thrift:"responseTimestamp,2"`
	CmsRequestTimestamp int64             `thrift:"cmsRequestTimestamp,3"`
	CmsBaseRequest      *CMSBaseRequest   `thrift:"cmsBaseRequest,4"`
	ResultParams        map[string]string `thrift:"resultParams,5"`
}

func NewCMSBaseResult() *CMSBaseResult {
	return &CMSBaseResult{}
}

func (p *CMSBaseResult) IsSetResultParams() bool {
	return p.ResultParams != nil && len(p.ResultParams) > 0
}

func (p *CMSBaseResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CMSBaseResult) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ServerId = v
	}
	return nil
}

func (p *CMSBaseResult) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ResponseTimestamp = v
	}
	return nil
}

func (p *CMSBaseResult) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.CmsRequestTimestamp = v
	}
	return nil
}

func (p *CMSBaseResult) readField4(iprot thrift.TProtocol) error {
	p.CmsBaseRequest = NewCMSBaseRequest()
	if err := p.CmsBaseRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CmsBaseRequest)
	}
	return nil
}

func (p *CMSBaseResult) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.ResultParams = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val3 = v
		}
		p.ResultParams[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *CMSBaseResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CMSBaseResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CMSBaseResult) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serverId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:serverId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ServerId)); err != nil {
		return fmt.Errorf("%T.serverId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:serverId: %s", p, err)
	}
	return err
}

func (p *CMSBaseResult) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("responseTimestamp", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:responseTimestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.ResponseTimestamp)); err != nil {
		return fmt.Errorf("%T.responseTimestamp (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:responseTimestamp: %s", p, err)
	}
	return err
}

func (p *CMSBaseResult) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cmsRequestTimestamp", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:cmsRequestTimestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CmsRequestTimestamp)); err != nil {
		return fmt.Errorf("%T.cmsRequestTimestamp (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:cmsRequestTimestamp: %s", p, err)
	}
	return err
}

func (p *CMSBaseResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.CmsBaseRequest != nil {
		if err := oprot.WriteFieldBegin("cmsBaseRequest", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:cmsBaseRequest: %s", p, err)
		}
		if err := p.CmsBaseRequest.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CmsBaseRequest)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:cmsBaseRequest: %s", p, err)
		}
	}
	return err
}

func (p *CMSBaseResult) writeField5(oprot thrift.TProtocol) (err error) {
	if p.ResultParams != nil {
		if p.IsSetResultParams() {
			if err := oprot.WriteFieldBegin("resultParams", thrift.MAP, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:resultParams: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ResultParams)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range p.ResultParams {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:resultParams: %s", p, err)
			}
		}
	}
	return err
}

func (p *CMSBaseResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CMSBaseResult(%+v)", *p)
}

type CMSException struct {
	ErrorCode    int32  `thrift:"errorCode,1"`
	ErrorMessage string `thrift:"errorMessage,2"`
	Trace        string `thrift:"trace,3"`
}

func NewCMSException() *CMSException {
	return &CMSException{}
}

func (p *CMSException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CMSException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ErrorCode = v
	}
	return nil
}

func (p *CMSException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ErrorMessage = v
	}
	return nil
}

func (p *CMSException) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Trace = v
	}
	return nil
}

func (p *CMSException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CMSException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CMSException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return fmt.Errorf("%T.errorCode (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err)
	}
	return err
}

func (p *CMSException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("errorMessage", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:errorMessage: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorMessage)); err != nil {
		return fmt.Errorf("%T.errorMessage (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:errorMessage: %s", p, err)
	}
	return err
}

func (p *CMSException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("trace", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:trace: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Trace)); err != nil {
		return fmt.Errorf("%T.trace (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:trace: %s", p, err)
	}
	return err
}

func (p *CMSException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CMSException(%+v)", *p)
}

type AttributeValue struct {
	Value     string `thrift:"value,1"`
	Qualifier string `thrift:"qualifier,2"`
}

func NewAttributeValue() *AttributeValue {
	return &AttributeValue{}
}

func (p *AttributeValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AttributeValue) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *AttributeValue) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Qualifier = v
	}
	return nil
}

func (p *AttributeValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AttributeValue"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AttributeValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:value: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return fmt.Errorf("%T.value (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:value: %s", p, err)
	}
	return err
}

func (p *AttributeValue) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("qualifier", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:qualifier: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Qualifier)); err != nil {
		return fmt.Errorf("%T.qualifier (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:qualifier: %s", p, err)
	}
	return err
}

func (p *AttributeValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttributeValue(%+v)", *p)
}

type Attribute struct {
	ValuesList    []*AttributeValue `thrift:"valuesList,1"`
	HasQualifier  bool              `thrift:"hasQualifier,2"`
	IsMultivalued bool              `thrift:"isMultivalued,3"`
	HasType       bool              `thrift:"hasType,4"`
	TypeA1        string            `thrift:"type,5"`
}

func NewAttribute() *Attribute {
	return &Attribute{}
}

func (p *Attribute) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Attribute) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ValuesList = make([]*AttributeValue, 0, size)
	for i := 0; i < size; i++ {
		_elem4 := NewAttributeValue()
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4)
		}
		p.ValuesList = append(p.ValuesList, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Attribute) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.HasQualifier = v
	}
	return nil
}

func (p *Attribute) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.IsMultivalued = v
	}
	return nil
}

func (p *Attribute) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.HasType = v
	}
	return nil
}

func (p *Attribute) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.TypeA1 = v
	}
	return nil
}

func (p *Attribute) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Attribute"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Attribute) writeField1(oprot thrift.TProtocol) (err error) {
	if p.ValuesList != nil {
		if err := oprot.WriteFieldBegin("valuesList", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:valuesList: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ValuesList)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.ValuesList {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:valuesList: %s", p, err)
		}
	}
	return err
}

func (p *Attribute) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasQualifier", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:hasQualifier: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasQualifier)); err != nil {
		return fmt.Errorf("%T.hasQualifier (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:hasQualifier: %s", p, err)
	}
	return err
}

func (p *Attribute) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isMultivalued", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:isMultivalued: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsMultivalued)); err != nil {
		return fmt.Errorf("%T.isMultivalued (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:isMultivalued: %s", p, err)
	}
	return err
}

func (p *Attribute) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasType", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:hasType: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasType)); err != nil {
		return fmt.Errorf("%T.hasType (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:hasType: %s", p, err)
	}
	return err
}

func (p *Attribute) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:type: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TypeA1)); err != nil {
		return fmt.Errorf("%T.type (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:type: %s", p, err)
	}
	return err
}

func (p *Attribute) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Attribute(%+v)", *p)
}

type Price struct {
	Amount   float64 `thrift:"amount,1"`
	Currency string  `thrift:"currency,2"`
}

func NewPrice() *Price {
	return &Price{}
}

func (p *Price) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Price) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Amount = v
	}
	return nil
}

func (p *Price) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Currency = v
	}
	return nil
}

func (p *Price) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Price"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Price) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("amount", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:amount: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Amount)); err != nil {
		return fmt.Errorf("%T.amount (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:amount: %s", p, err)
	}
	return err
}

func (p *Price) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currency", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:currency: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Currency)); err != nil {
		return fmt.Errorf("%T.currency (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:currency: %s", p, err)
	}
	return err
}

func (p *Price) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Price(%+v)", *p)
}

type Contributor struct {
	Name            string                `thrift:"name,1"`
	Id              string                `thrift:"id,2"`
	Groupid         string                `thrift:"groupid,3"`
	Similarnames    []string              `thrift:"similarnames,4"`
	AttributeValues map[string]*Attribute `thrift:"attributeValues,5"`
	Source          string                `thrift:"source,6"`
}

func NewContributor() *Contributor {
	return &Contributor{}
}

func (p *Contributor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Contributor) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *Contributor) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Contributor) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *Contributor) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Similarnames = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem5 = v
		}
		p.Similarnames = append(p.Similarnames, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Contributor) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.AttributeValues = make(map[string]*Attribute, size)
	for i := 0; i < size; i++ {
		var _key6 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key6 = v
		}
		_val7 := NewAttribute()
		if err := _val7.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val7)
		}
		p.AttributeValues[_key6] = _val7
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *Contributor) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Source = v
	}
	return nil
}

func (p *Contributor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Contributor"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Contributor) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *Contributor) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:id: %s", p, err)
	}
	return err
}

func (p *Contributor) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupid", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:groupid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Groupid)); err != nil {
		return fmt.Errorf("%T.groupid (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:groupid: %s", p, err)
	}
	return err
}

func (p *Contributor) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Similarnames != nil {
		if err := oprot.WriteFieldBegin("similarnames", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:similarnames: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Similarnames)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Similarnames {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:similarnames: %s", p, err)
		}
	}
	return err
}

func (p *Contributor) writeField5(oprot thrift.TProtocol) (err error) {
	if p.AttributeValues != nil {
		if err := oprot.WriteFieldBegin("attributeValues", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:attributeValues: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.AttributeValues)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.AttributeValues {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:attributeValues: %s", p, err)
		}
	}
	return err
}

func (p *Contributor) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("source", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:source: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Source)); err != nil {
		return fmt.Errorf("%T.source (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:source: %s", p, err)
	}
	return err
}

func (p *Contributor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Contributor(%+v)", *p)
}

type TagInfo struct {
	TagId              string `thrift:"tagId,1"`
	TagName            string `thrift:"tagName,2"`
	TagStatus          string `thrift:"tagStatus,3"`
	Tenant             string `thrift:"tenant,4"`
	TagData            string `thrift:"tagData,5"`
	TagAssociationData string `thrift:"tagAssociationData,6"`
}

func NewTagInfo() *TagInfo {
	return &TagInfo{}
}

func (p *TagInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TagInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.TagId = v
	}
	return nil
}

func (p *TagInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TagName = v
	}
	return nil
}

func (p *TagInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.TagStatus = v
	}
	return nil
}

func (p *TagInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Tenant = v
	}
	return nil
}

func (p *TagInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.TagData = v
	}
	return nil
}

func (p *TagInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.TagAssociationData = v
	}
	return nil
}

func (p *TagInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TagInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TagInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tagId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TagId)); err != nil {
		return fmt.Errorf("%T.tagId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tagId: %s", p, err)
	}
	return err
}

func (p *TagInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:tagName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TagName)); err != nil {
		return fmt.Errorf("%T.tagName (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:tagName: %s", p, err)
	}
	return err
}

func (p *TagInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagStatus", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:tagStatus: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TagStatus)); err != nil {
		return fmt.Errorf("%T.tagStatus (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:tagStatus: %s", p, err)
	}
	return err
}

func (p *TagInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tenant", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:tenant: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Tenant)); err != nil {
		return fmt.Errorf("%T.tenant (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:tenant: %s", p, err)
	}
	return err
}

func (p *TagInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagData", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:tagData: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TagData)); err != nil {
		return fmt.Errorf("%T.tagData (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:tagData: %s", p, err)
	}
	return err
}

func (p *TagInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tagAssociationData", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:tagAssociationData: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TagAssociationData)); err != nil {
		return fmt.Errorf("%T.tagAssociationData (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:tagAssociationData: %s", p, err)
	}
	return err
}

func (p *TagInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagInfo(%+v)", *p)
}

type RelationshipInfo struct {
	RelationshipData map[string]string `thrift:"relationshipData,1"`
	RelationType     string            `thrift:"relationType,2"`
	Vertical         string            `thrift:"vertical,3"`
	IsProduct        bool              `thrift:"isProduct,4"`
}

func NewRelationshipInfo() *RelationshipInfo {
	return &RelationshipInfo{}
}

func (p *RelationshipInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RelationshipInfo) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.RelationshipData = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key8 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key8 = v
		}
		var _val9 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val9 = v
		}
		p.RelationshipData[_key8] = _val9
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *RelationshipInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.RelationType = v
	}
	return nil
}

func (p *RelationshipInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Vertical = v
	}
	return nil
}

func (p *RelationshipInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.IsProduct = v
	}
	return nil
}

func (p *RelationshipInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RelationshipInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *RelationshipInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.RelationshipData != nil {
		if err := oprot.WriteFieldBegin("relationshipData", thrift.MAP, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:relationshipData: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.RelationshipData)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.RelationshipData {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:relationshipData: %s", p, err)
		}
	}
	return err
}

func (p *RelationshipInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relationType", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:relationType: %s", p, err)
	}
	if err := oprot.WriteString(string(p.RelationType)); err != nil {
		return fmt.Errorf("%T.relationType (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:relationType: %s", p, err)
	}
	return err
}

func (p *RelationshipInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vertical", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:vertical: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Vertical)); err != nil {
		return fmt.Errorf("%T.vertical (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:vertical: %s", p, err)
	}
	return err
}

func (p *RelationshipInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isProduct", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:isProduct: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsProduct)); err != nil {
		return fmt.Errorf("%T.isProduct (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:isProduct: %s", p, err)
	}
	return err
}

func (p *RelationshipInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RelationshipInfo(%+v)", *p)
}

type CategoryNodeInfo struct {
	NodeId       int32                        `thrift:"nodeId,1"`
	NodeName     string                       `thrift:"nodeName,2"`
	ChildCount   int32                        `thrift:"childCount,3"`
	ProductCount int32                        `thrift:"productCount,4"`
	NodeMetaData map[string]map[string]string `thrift:"nodeMetaData,5"`
}

func NewCategoryNodeInfo() *CategoryNodeInfo {
	return &CategoryNodeInfo{}
}

func (p *CategoryNodeInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CategoryNodeInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.NodeId = v
	}
	return nil
}

func (p *CategoryNodeInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.NodeName = v
	}
	return nil
}

func (p *CategoryNodeInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.ChildCount = v
	}
	return nil
}

func (p *CategoryNodeInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.ProductCount = v
	}
	return nil
}

func (p *CategoryNodeInfo) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.NodeMetaData = make(map[string]map[string]string, size)
	for i := 0; i < size; i++ {
		var _key10 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key10 = v
		}
		_, _, size, err := iprot.ReadMapBegin()
		if err != nil {
			return fmt.Errorf("error reading map begin: %s")
		}
		_val11 := make(map[string]string, size)
		for i := 0; i < size; i++ {
			var _key12 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s")
			} else {
				_key12 = v
			}
			var _val13 string
			if v, err := iprot.ReadString(); err != nil {
				return fmt.Errorf("error reading field 0: %s")
			} else {
				_val13 = v
			}
			_val11[_key12] = _val13
		}
		if err := iprot.ReadMapEnd(); err != nil {
			return fmt.Errorf("error reading map end: %s")
		}
		p.NodeMetaData[_key10] = _val11
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *CategoryNodeInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CategoryNodeInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CategoryNodeInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nodeId", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:nodeId: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.NodeId)); err != nil {
		return fmt.Errorf("%T.nodeId (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:nodeId: %s", p, err)
	}
	return err
}

func (p *CategoryNodeInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nodeName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:nodeName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.NodeName)); err != nil {
		return fmt.Errorf("%T.nodeName (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:nodeName: %s", p, err)
	}
	return err
}

func (p *CategoryNodeInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("childCount", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:childCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ChildCount)); err != nil {
		return fmt.Errorf("%T.childCount (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:childCount: %s", p, err)
	}
	return err
}

func (p *CategoryNodeInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("productCount", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:productCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProductCount)); err != nil {
		return fmt.Errorf("%T.productCount (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:productCount: %s", p, err)
	}
	return err
}

func (p *CategoryNodeInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.NodeMetaData != nil {
		if err := oprot.WriteFieldBegin("nodeMetaData", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:nodeMetaData: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.MAP, len(p.NodeMetaData)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.NodeMetaData {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(v)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range v {
				if err := oprot.WriteString(string(k)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:nodeMetaData: %s", p, err)
		}
	}
	return err
}

func (p *CategoryNodeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryNodeInfo(%+v)", *p)
}

type CategoryPathInfo struct {
	CategoryNodeInfo []*CategoryNodeInfo `thrift:"categoryNodeInfo,1"`
	IsPrimary        bool                `thrift:"isPrimary,2"`
}

func NewCategoryPathInfo() *CategoryPathInfo {
	return &CategoryPathInfo{}
}

func (p *CategoryPathInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CategoryPathInfo) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.CategoryNodeInfo = make([]*CategoryNodeInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem14 := NewCategoryNodeInfo()
		if err := _elem14.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem14)
		}
		p.CategoryNodeInfo = append(p.CategoryNodeInfo, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *CategoryPathInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.IsPrimary = v
	}
	return nil
}

func (p *CategoryPathInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CategoryPathInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CategoryPathInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.CategoryNodeInfo != nil {
		if err := oprot.WriteFieldBegin("categoryNodeInfo", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:categoryNodeInfo: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CategoryNodeInfo)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.CategoryNodeInfo {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:categoryNodeInfo: %s", p, err)
		}
	}
	return err
}

func (p *CategoryPathInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isPrimary", thrift.BOOL, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:isPrimary: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsPrimary)); err != nil {
		return fmt.Errorf("%T.isPrimary (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:isPrimary: %s", p, err)
	}
	return err
}

func (p *CategoryPathInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategoryPathInfo(%+v)", *p)
}

type CategorizationInfo struct {
	CategoryPathInfo []*CategoryPathInfo `thrift:"categoryPathInfo,1"`
}

func NewCategorizationInfo() *CategorizationInfo {
	return &CategorizationInfo{}
}

func (p *CategorizationInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CategorizationInfo) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.CategoryPathInfo = make([]*CategoryPathInfo, 0, size)
	for i := 0; i < size; i++ {
		_elem15 := NewCategoryPathInfo()
		if err := _elem15.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem15)
		}
		p.CategoryPathInfo = append(p.CategoryPathInfo, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *CategorizationInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CategorizationInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CategorizationInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.CategoryPathInfo != nil {
		if err := oprot.WriteFieldBegin("categoryPathInfo", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:categoryPathInfo: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.CategoryPathInfo)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.CategoryPathInfo {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:categoryPathInfo: %s", p, err)
		}
	}
	return err
}

func (p *CategorizationInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CategorizationInfo(%+v)", *p)
}

type ContentGroup struct {
	GroupName    string            `thrift:"groupName,1"`
	GroupDetails map[string]string `thrift:"groupDetails,2"`
}

func NewContentGroup() *ContentGroup {
	return &ContentGroup{}
}

func (p *ContentGroup) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ContentGroup) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *ContentGroup) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.GroupDetails = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key16 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key16 = v
		}
		var _val17 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val17 = v
		}
		p.GroupDetails[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *ContentGroup) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContentGroup"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ContentGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:groupName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return fmt.Errorf("%T.groupName (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:groupName: %s", p, err)
	}
	return err
}

func (p *ContentGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if p.GroupDetails != nil {
		if err := oprot.WriteFieldBegin("groupDetails", thrift.MAP, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:groupDetails: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.GroupDetails)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.GroupDetails {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:groupDetails: %s", p, err)
		}
	}
	return err
}

func (p *ContentGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentGroup(%+v)", *p)
}

type TransformedContent struct {
	AttributeValues map[string]*Attribute `thrift:"attributeValues,1"`
}

func NewTransformedContent() *TransformedContent {
	return &TransformedContent{}
}

func (p *TransformedContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TransformedContent) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.AttributeValues = make(map[string]*Attribute, size)
	for i := 0; i < size; i++ {
		var _key18 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key18 = v
		}
		_val19 := NewAttribute()
		if err := _val19.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val19)
		}
		p.AttributeValues[_key18] = _val19
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *TransformedContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TransformedContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TransformedContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.AttributeValues != nil {
		if err := oprot.WriteFieldBegin("attributeValues", thrift.MAP, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:attributeValues: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.AttributeValues)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.AttributeValues {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:attributeValues: %s", p, err)
		}
	}
	return err
}

func (p *TransformedContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TransformedContent(%+v)", *p)
}

type StaticContent struct {
	ContentID       string                `thrift:"contentID,1"`
	Groups          []*ContentGroup       `thrift:"groups,2"`
	AttributeValues map[string]*Attribute `thrift:"attributeValues,3"`
	TransContents   []*TransformedContent `thrift:"transContents,4"`
}

func NewStaticContent() *StaticContent {
	return &StaticContent{}
}

func (p *StaticContent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StaticContent) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ContentID = v
	}
	return nil
}

func (p *StaticContent) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Groups = make([]*ContentGroup, 0, size)
	for i := 0; i < size; i++ {
		_elem20 := NewContentGroup()
		if err := _elem20.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem20)
		}
		p.Groups = append(p.Groups, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *StaticContent) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.AttributeValues = make(map[string]*Attribute, size)
	for i := 0; i < size; i++ {
		var _key21 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key21 = v
		}
		_val22 := NewAttribute()
		if err := _val22.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val22)
		}
		p.AttributeValues[_key21] = _val22
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *StaticContent) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.TransContents = make([]*TransformedContent, 0, size)
	for i := 0; i < size; i++ {
		_elem23 := NewTransformedContent()
		if err := _elem23.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem23)
		}
		p.TransContents = append(p.TransContents, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *StaticContent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StaticContent"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *StaticContent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("contentID", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:contentID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ContentID)); err != nil {
		return fmt.Errorf("%T.contentID (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:contentID: %s", p, err)
	}
	return err
}

func (p *StaticContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Groups != nil {
		if err := oprot.WriteFieldBegin("groups", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:groups: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Groups)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Groups {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:groups: %s", p, err)
		}
	}
	return err
}

func (p *StaticContent) writeField3(oprot thrift.TProtocol) (err error) {
	if p.AttributeValues != nil {
		if err := oprot.WriteFieldBegin("attributeValues", thrift.MAP, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:attributeValues: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.AttributeValues)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.AttributeValues {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:attributeValues: %s", p, err)
		}
	}
	return err
}

func (p *StaticContent) writeField4(oprot thrift.TProtocol) (err error) {
	if p.TransContents != nil {
		if err := oprot.WriteFieldBegin("transContents", thrift.LIST, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:transContents: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TransContents)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.TransContents {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:transContents: %s", p, err)
		}
	}
	return err
}

func (p *StaticContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StaticContent(%+v)", *p)
}

type DeltaRequest struct {
	Vertical         string          `thrift:"vertical,1"`
	CurrentVersionNo int64           `thrift:"currentVersionNo,2"`
	MaxResultSize    int32           `thrift:"maxResultSize,3"`
	CmsBaseRequest   *CMSBaseRequest `thrift:"cmsBaseRequest,4,required"`
	MaxVersionNo     int64           `thrift:"maxVersionNo,5"`
}

func NewDeltaRequest() *DeltaRequest {
	return &DeltaRequest{}
}

func (p *DeltaRequest) IsSetMaxVersionNo() bool {
	return p.MaxVersionNo != 0
}

func (p *DeltaRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeltaRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Vertical = v
	}
	return nil
}

func (p *DeltaRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.CurrentVersionNo = v
	}
	return nil
}

func (p *DeltaRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.MaxResultSize = v
	}
	return nil
}

func (p *DeltaRequest) readField4(iprot thrift.TProtocol) error {
	p.CmsBaseRequest = NewCMSBaseRequest()
	if err := p.CmsBaseRequest.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CmsBaseRequest)
	}
	return nil
}

func (p *DeltaRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.MaxVersionNo = v
	}
	return nil
}

func (p *DeltaRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeltaRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DeltaRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vertical", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:vertical: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Vertical)); err != nil {
		return fmt.Errorf("%T.vertical (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:vertical: %s", p, err)
	}
	return err
}

func (p *DeltaRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("currentVersionNo", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:currentVersionNo: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.CurrentVersionNo)); err != nil {
		return fmt.Errorf("%T.currentVersionNo (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:currentVersionNo: %s", p, err)
	}
	return err
}

func (p *DeltaRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxResultSize", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:maxResultSize: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxResultSize)); err != nil {
		return fmt.Errorf("%T.maxResultSize (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:maxResultSize: %s", p, err)
	}
	return err
}

func (p *DeltaRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.CmsBaseRequest != nil {
		if err := oprot.WriteFieldBegin("cmsBaseRequest", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:cmsBaseRequest: %s", p, err)
		}
		if err := p.CmsBaseRequest.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.CmsBaseRequest)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:cmsBaseRequest: %s", p, err)
		}
	}
	return err
}

func (p *DeltaRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxVersionNo() {
		if err := oprot.WriteFieldBegin("maxVersionNo", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:maxVersionNo: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MaxVersionNo)); err != nil {
			return fmt.Errorf("%T.maxVersionNo (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:maxVersionNo: %s", p, err)
		}
	}
	return err
}

func (p *DeltaRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeltaRequest(%+v)", *p)
}

type DeltaResult struct {
	Vertical      string         `thrift:"vertical,1"`
	ResultCount   int32          `thrift:"resultCount,2"`
	ProductIDs    []ProductID    `thrift:"productIDs,3"`
	NewVersionNo  int64          `thrift:"newVersionNo,4"`
	HasNext       bool           `thrift:"hasNext,5"`
	CmsBaseResult *CMSBaseResult `thrift:"cmsBaseResult,6"`
}

func NewDeltaResult() *DeltaResult {
	return &DeltaResult{}
}

func (p *DeltaResult) IsSetCmsBaseResult() bool {
	return p.CmsBaseResult != nil
}

func (p *DeltaResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeltaResult) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Vertical = v
	}
	return nil
}

func (p *DeltaResult) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ResultCount = v
	}
	return nil
}

func (p *DeltaResult) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ProductIDs = make([]ProductID, 0, size)
	for i := 0; i < size; i++ {
		var _elem24 ProductID
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem24 = ProductID(v)
		}
		p.ProductIDs = append(p.ProductIDs, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *DeltaResult) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.NewVersionNo = v
	}
	return nil
}

func (p *DeltaResult) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.HasNext = v
	}
	return nil
}

func (p *DeltaResult) readField6(iprot thrift.TProtocol) error {
	p.CmsBaseResult = NewCMSBaseResult()
	if err := p.CmsBaseResult.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.CmsBaseResult)
	}
	return nil
}

func (p *DeltaResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeltaResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DeltaResult) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("vertical", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:vertical: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Vertical)); err != nil {
		return fmt.Errorf("%T.vertical (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:vertical: %s", p, err)
	}
	return err
}

func (p *DeltaResult) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("resultCount", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:resultCount: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ResultCount)); err != nil {
		return fmt.Errorf("%T.resultCount (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:resultCount: %s", p, err)
	}
	return err
}

func (p *DeltaResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.ProductIDs != nil {
		if err := oprot.WriteFieldBegin("productIDs", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:productIDs: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ProductIDs)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.ProductIDs {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:productIDs: %s", p, err)
		}
	}
	return err
}

func (p *DeltaResult) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newVersionNo", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:newVersionNo: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.NewVersionNo)); err != nil {
		return fmt.Errorf("%T.newVersionNo (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:newVersionNo: %s", p, err)
	}
	return err
}

func (p *DeltaResult) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasNext", thrift.BOOL, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:hasNext: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.HasNext)); err != nil {
		return fmt.Errorf("%T.hasNext (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:hasNext: %s", p, err)
	}
	return err
}

func (p *DeltaResult) writeField6(oprot thrift.TProtocol) (err error) {
	if p.CmsBaseResult != nil {
		if p.IsSetCmsBaseResult() {
			if err := oprot.WriteFieldBegin("cmsBaseResult", thrift.STRUCT, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:cmsBaseResult: %s", p, err)
			}
			if err := p.CmsBaseResult.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.CmsBaseResult)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:cmsBaseResult: %s", p, err)
			}
		}
	}
	return err
}

func (p *DeltaResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeltaResult(%+v)", *p)
}

type CmsVerticalVersionsResult struct {
	VerticalVersionMap map[string]int64 `thrift:"verticalVersionMap,1"`
}

func NewCmsVerticalVersionsResult() *CmsVerticalVersionsResult {
	return &CmsVerticalVersionsResult{}
}

func (p *CmsVerticalVersionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CmsVerticalVersionsResult) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.VerticalVersionMap = make(map[string]int64, size)
	for i := 0; i < size; i++ {
		var _key25 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key25 = v
		}
		var _val26 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_val26 = v
		}
		p.VerticalVersionMap[_key25] = _val26
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *CmsVerticalVersionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CmsVerticalVersionsResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CmsVerticalVersionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.VerticalVersionMap != nil {
		if err := oprot.WriteFieldBegin("verticalVersionMap", thrift.MAP, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:verticalVersionMap: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.VerticalVersionMap)); err != nil {
			return fmt.Errorf("error writing map begin: %s")
		}
		for k, v := range p.VerticalVersionMap {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:verticalVersionMap: %s", p, err)
		}
	}
	return err
}

func (p *CmsVerticalVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CmsVerticalVersionsResult(%+v)", *p)
}

type VerticalVersionResult struct {
	Version int64 `thrift:"version,1"`
}

func NewVerticalVersionResult() *VerticalVersionResult {
	return &VerticalVersionResult{}
}

func (p *VerticalVersionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *VerticalVersionResult) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Version = v
	}
	return nil
}

func (p *VerticalVersionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("VerticalVersionResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *VerticalVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:version: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Version)); err != nil {
		return fmt.Errorf("%T.version (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:version: %s", p, err)
	}
	return err
}

func (p *VerticalVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VerticalVersionResult(%+v)", *p)
}
