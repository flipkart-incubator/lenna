// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package spcms

import (
	"fmt"
	"math"
	"thrift"
	"github.com/thriftlib/cms"

)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = cms.GoUnusedProtection__
var GoUnusedProtection__ int;

type DataType int64
const (
  DataType_TEXT DataType = 1
  DataType_NUMBER DataType = 2
  DataType_DECIMAL DataType = 3
  DataType_BOOLEAN DataType = 4
  DataType_DATETIME DataType = 5
  DataType_PRICE_COMPONENT DataType = 6
)

func (p DataType) String() string {
  switch p {
  case DataType_TEXT: return "DataType_TEXT"
  case DataType_NUMBER: return "DataType_NUMBER"
  case DataType_DECIMAL: return "DataType_DECIMAL"
  case DataType_BOOLEAN: return "DataType_BOOLEAN"
  case DataType_DATETIME: return "DataType_DATETIME"
  case DataType_PRICE_COMPONENT: return "DataType_PRICE_COMPONENT"
  }
  return "<UNSET>"
}

func DataTypeFromString(s string) (DataType, error) {
  switch s {
  case "DataType_TEXT": return DataType_TEXT, nil 
  case "DataType_NUMBER": return DataType_NUMBER, nil 
  case "DataType_DECIMAL": return DataType_DECIMAL, nil 
  case "DataType_BOOLEAN": return DataType_BOOLEAN, nil 
  case "DataType_DATETIME": return DataType_DATETIME, nil 
  case "DataType_PRICE_COMPONENT": return DataType_PRICE_COMPONENT, nil 
  }
  return DataType(math.MinInt32 - 1), fmt.Errorf("not a valid DataType string")
}


type EntityType int64
const (
  EntityType_PRODUCT EntityType = 1
  EntityType_LISTING EntityType = 2
)

func (p EntityType) String() string {
  switch p {
  case EntityType_PRODUCT: return "EntityType_PRODUCT"
  case EntityType_LISTING: return "EntityType_LISTING"
  }
  return "<UNSET>"
}

func EntityTypeFromString(s string) (EntityType, error) {
  switch s {
  case "EntityType_PRODUCT": return EntityType_PRODUCT, nil 
  case "EntityType_LISTING": return EntityType_LISTING, nil 
  }
  return EntityType(math.MinInt32 - 1), fmt.Errorf("not a valid EntityType string")
}


type ItemID string

type ProductID string

type ListingID string

type BaseRequest struct {
  ClientId string `thrift:"clientId,1"`
  RequestId string `thrift:"requestId,2"`
  RequestTimestamp int64 `thrift:"requestTimestamp,3"`
  RequestParams map[string]string `thrift:"requestParams,4"`
}

func NewBaseRequest() *BaseRequest {
  return &BaseRequest{}
}

func (p *BaseRequest) IsSetRequestParams() bool {
  return p.RequestParams != nil && len(p.RequestParams) > 0
}

func (p *BaseRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *BaseRequest)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.ClientId = v
}
  return nil
}

func (p *BaseRequest)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.RequestId = v
}
  return nil
}

func (p *BaseRequest)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.RequestTimestamp = v
}
  return nil
}

func (p *BaseRequest)  readField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.RequestParams = make(map[string]string, size)
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key0 = v
}
var _val1 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _val1 = v
}
    p.RequestParams[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *BaseRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BaseRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *BaseRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clientId", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:clientId: %s", p, err); }
  if err := oprot.WriteString(string(p.ClientId)); err != nil {
  return fmt.Errorf("%T.clientId (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:clientId: %s", p, err); }
  return err
}

func (p *BaseRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:requestId: %s", p, err); }
  if err := oprot.WriteString(string(p.RequestId)); err != nil {
  return fmt.Errorf("%T.requestId (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:requestId: %s", p, err); }
  return err
}

func (p *BaseRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestTimestamp", thrift.I64, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:requestTimestamp: %s", p, err); }
  if err := oprot.WriteI64(int64(p.RequestTimestamp)); err != nil {
  return fmt.Errorf("%T.requestTimestamp (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:requestTimestamp: %s", p, err); }
  return err
}

func (p *BaseRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.RequestParams != nil {
    if p.IsSetRequestParams() {
      if err := oprot.WriteFieldBegin("requestParams", thrift.MAP, 4); err != nil {
        return fmt.Errorf("%T write field begin error 4:requestParams: %s", p, err); }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.RequestParams)); err != nil {
        return fmt.Errorf("error writing map begin: %s")
      }
      for k,v := range p.RequestParams {
        if err := oprot.WriteString(string(k)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return fmt.Errorf("error writing map end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 4:requestParams: %s", p, err); }
    }
  }
  return err
}

func (p *BaseRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseRequest(%+v)", *p)
}

type BaseResult struct {
  ServerId string `thrift:"serverId,1"`
  ResponseTimestamp int64 `thrift:"responseTimestamp,2"`
  CmsRequestTimestamp int64 `thrift:"cmsRequestTimestamp,3"`
  BaseRequest *BaseRequest `thrift:"baseRequest,4"`
  ResultParams map[string]string `thrift:"resultParams,5"`
}

func NewBaseResult() *BaseResult {
  return &BaseResult{}
}

func (p *BaseResult) IsSetResultParams() bool {
  return p.ResultParams != nil && len(p.ResultParams) > 0
}

func (p *BaseResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
case 5:
      if err := p.readField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *BaseResult)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.ServerId = v
}
  return nil
}

func (p *BaseResult)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.ResponseTimestamp = v
}
  return nil
}

func (p *BaseResult)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.CmsRequestTimestamp = v
}
  return nil
}

func (p *BaseResult)  readField4(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *BaseResult)  readField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ResultParams = make(map[string]string, size)
  for i := 0; i < size; i ++ {
var _key2 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key2 = v
}
var _val3 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _val3 = v
}
    p.ResultParams[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *BaseResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BaseResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *BaseResult) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serverId", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:serverId: %s", p, err); }
  if err := oprot.WriteString(string(p.ServerId)); err != nil {
  return fmt.Errorf("%T.serverId (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:serverId: %s", p, err); }
  return err
}

func (p *BaseResult) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("responseTimestamp", thrift.I64, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:responseTimestamp: %s", p, err); }
  if err := oprot.WriteI64(int64(p.ResponseTimestamp)); err != nil {
  return fmt.Errorf("%T.responseTimestamp (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:responseTimestamp: %s", p, err); }
  return err
}

func (p *BaseResult) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cmsRequestTimestamp", thrift.I64, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:cmsRequestTimestamp: %s", p, err); }
  if err := oprot.WriteI64(int64(p.CmsRequestTimestamp)); err != nil {
  return fmt.Errorf("%T.cmsRequestTimestamp (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:cmsRequestTimestamp: %s", p, err); }
  return err
}

func (p *BaseResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 4); err != nil {
      return fmt.Errorf("%T write field begin error 4:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 4:baseRequest: %s", p, err); }
  }
  return err
}

func (p *BaseResult) writeField5(oprot thrift.TProtocol) (err error) {
  if p.ResultParams != nil {
    if p.IsSetResultParams() {
      if err := oprot.WriteFieldBegin("resultParams", thrift.MAP, 5); err != nil {
        return fmt.Errorf("%T write field begin error 5:resultParams: %s", p, err); }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ResultParams)); err != nil {
        return fmt.Errorf("error writing map begin: %s")
      }
      for k,v := range p.ResultParams {
        if err := oprot.WriteString(string(k)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return fmt.Errorf("error writing map end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 5:resultParams: %s", p, err); }
    }
  }
  return err
}

func (p *BaseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseResult(%+v)", *p)
}

type SPCMSException struct {
  ErrorCode int32 `thrift:"errorCode,1"`
  ErrorMessage string `thrift:"errorMessage,2"`
  Trace string `thrift:"trace,3"`
}

func NewSPCMSException() *SPCMSException {
  return &SPCMSException{}
}

func (p *SPCMSException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *SPCMSException)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.ErrorCode = v
}
  return nil
}

func (p *SPCMSException)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.ErrorMessage = v
}
  return nil
}

func (p *SPCMSException)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.Trace = v
}
  return nil
}

func (p *SPCMSException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SPCMSException"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *SPCMSException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:errorCode: %s", p, err); }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return fmt.Errorf("%T.errorCode (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:errorCode: %s", p, err); }
  return err
}

func (p *SPCMSException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorMessage", thrift.STRING, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:errorMessage: %s", p, err); }
  if err := oprot.WriteString(string(p.ErrorMessage)); err != nil {
  return fmt.Errorf("%T.errorMessage (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:errorMessage: %s", p, err); }
  return err
}

func (p *SPCMSException) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trace", thrift.STRING, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:trace: %s", p, err); }
  if err := oprot.WriteString(string(p.Trace)); err != nil {
  return fmt.Errorf("%T.trace (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:trace: %s", p, err); }
  return err
}

func (p *SPCMSException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SPCMSException(%+v)", *p)
}

type ShippingDetails struct {
  MinShippingDays int32 `thrift:"minShippingDays,1"`
  MaxShippingDays int32 `thrift:"maxShippingDays,2"`
  ProcurementSLA int32 `thrift:"procurementSLA,3"`
}

func NewShippingDetails() *ShippingDetails {
  return &ShippingDetails{}
}

func (p *ShippingDetails) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ShippingDetails)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.MinShippingDays = v
}
  return nil
}

func (p *ShippingDetails)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.MaxShippingDays = v
}
  return nil
}

func (p *ShippingDetails)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.ProcurementSLA = v
}
  return nil
}

func (p *ShippingDetails) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ShippingDetails"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ShippingDetails) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("minShippingDays", thrift.I32, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:minShippingDays: %s", p, err); }
  if err := oprot.WriteI32(int32(p.MinShippingDays)); err != nil {
  return fmt.Errorf("%T.minShippingDays (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:minShippingDays: %s", p, err); }
  return err
}

func (p *ShippingDetails) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxShippingDays", thrift.I32, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:maxShippingDays: %s", p, err); }
  if err := oprot.WriteI32(int32(p.MaxShippingDays)); err != nil {
  return fmt.Errorf("%T.maxShippingDays (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:maxShippingDays: %s", p, err); }
  return err
}

func (p *ShippingDetails) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("procurementSLA", thrift.I32, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:procurementSLA: %s", p, err); }
  if err := oprot.WriteI32(int32(p.ProcurementSLA)); err != nil {
  return fmt.Errorf("%T.procurementSLA (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:procurementSLA: %s", p, err); }
  return err
}

func (p *ShippingDetails) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShippingDetails(%+v)", *p)
}

type ProductData struct {
  ProductId string `thrift:"productId,1"`
  Vertical string `thrift:"vertical,2"`
  VersionNo int64 `thrift:"versionNo,3"`
  ItemID string `thrift:"itemID,4"`
  PreferredListingId ListingID `thrift:"preferredListingId,5"`
  ItemizedProductIds []string `thrift:"itemizedProductIds,6"`
  ProductAttributes map[string]*cms.Attribute `thrift:"productAttributes,7"`
  // unused field # 8
  ViewsAsJson map[string]string `thrift:"viewsAsJson,9"`
  RelationshipInfo []*cms.RelationshipInfo `thrift:"relationshipInfo,10"`
  StaticContentInfo []*cms.StaticContent `thrift:"staticContentInfo,11"`
  CategorizationInfo *cms.CategorizationInfo `thrift:"categorizationInfo,12"`
  ContributorInfo map[string]*cms.Contributor `thrift:"contributorInfo,13"`
  TagDetails map[string][]*cms.TagInfo `thrift:"tagDetails,14"`
}

func NewProductData() *ProductData {
  return &ProductData{}
}

func (p *ProductData) IsSetViewsAsJson() bool {
  return p.ViewsAsJson != nil && len(p.ViewsAsJson) > 0
}

func (p *ProductData) IsSetRelationshipInfo() bool {
  return p.RelationshipInfo != nil && len(p.RelationshipInfo) > 0
}

func (p *ProductData) IsSetStaticContentInfo() bool {
  return p.StaticContentInfo != nil && len(p.StaticContentInfo) > 0
}

func (p *ProductData) IsSetCategorizationInfo() bool {
  return p.CategorizationInfo != nil
}

func (p *ProductData) IsSetContributorInfo() bool {
  return p.ContributorInfo != nil && len(p.ContributorInfo) > 0
}

func (p *ProductData) IsSetTagDetails() bool {
  return p.TagDetails != nil && len(p.TagDetails) > 0
}

func (p *ProductData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
case 5:
      if err := p.readField5(iprot); err != nil {
        return err
      }
case 6:
      if err := p.readField6(iprot); err != nil {
        return err
      }
case 7:
      if err := p.readField7(iprot); err != nil {
        return err
      }
case 9:
      if err := p.readField9(iprot); err != nil {
        return err
      }
case 10:
      if err := p.readField10(iprot); err != nil {
        return err
      }
case 11:
      if err := p.readField11(iprot); err != nil {
        return err
      }
case 12:
      if err := p.readField12(iprot); err != nil {
        return err
      }
case 13:
      if err := p.readField13(iprot); err != nil {
        return err
      }
case 14:
      if err := p.readField14(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ProductData)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.ProductId = v
}
  return nil
}

func (p *ProductData)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.Vertical = v
}
  return nil
}

func (p *ProductData)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.VersionNo = v
}
  return nil
}

func (p *ProductData)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 4: %s")
} else {
  p.ItemID = v
}
  return nil
}

func (p *ProductData)  readField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 5: %s")
} else {
  p.PreferredListingId = ListingID(v)
}
  return nil
}

func (p *ProductData)  readField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ItemizedProductIds = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem4 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem4 = v
}
    p.ItemizedProductIds = append(p.ItemizedProductIds, _elem4)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductData)  readField7(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ProductAttributes = make(map[string]*cms.Attribute, size)
  for i := 0; i < size; i ++ {
var _key5 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key5 = v
}
    _val6 := cms.NewAttribute()
    if err := _val6.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val6)
    }
    p.ProductAttributes[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ProductData)  readField9(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ViewsAsJson = make(map[string]string, size)
  for i := 0; i < size; i ++ {
var _key7 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key7 = v
}
var _val8 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _val8 = v
}
    p.ViewsAsJson[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ProductData)  readField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.RelationshipInfo = make([]*cms.RelationshipInfo, 0, size)
  for i := 0; i < size; i ++ {
    _elem9 := cms.NewRelationshipInfo()
    if err := _elem9.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _elem9)
    }
    p.RelationshipInfo = append(p.RelationshipInfo, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductData)  readField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.StaticContentInfo = make([]*cms.StaticContent, 0, size)
  for i := 0; i < size; i ++ {
    _elem10 := cms.NewStaticContent()
    if err := _elem10.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _elem10)
    }
    p.StaticContentInfo = append(p.StaticContentInfo, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductData)  readField12(iprot thrift.TProtocol) error {
  p.CategorizationInfo = cms.NewCategorizationInfo()
  if err := p.CategorizationInfo.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CategorizationInfo)
  }
  return nil
}

func (p *ProductData)  readField13(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ContributorInfo = make(map[string]*cms.Contributor, size)
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key11 = v
}
    _val12 := cms.NewContributor()
    if err := _val12.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val12)
    }
    p.ContributorInfo[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ProductData)  readField14(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.TagDetails = make(map[string][]*cms.TagInfo, size)
  for i := 0; i < size; i ++ {
var _key13 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key13 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return fmt.Errorf("error reading list being: %s")
    }
    _val14 := make([]*cms.TagInfo, 0, size)
    for i := 0; i < size; i ++ {
      _elem15 := cms.NewTagInfo()
      if err := _elem15.Read(iprot); err != nil {
        return fmt.Errorf("%T error reading struct: %s", _elem15)
      }
      _val14 = append(_val14, _elem15)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return fmt.Errorf("error reading list end: %s")
    }
    p.TagDetails[_key13] = _val14
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ProductData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProductData"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := p.writeField13(oprot); err != nil { return err }
  if err := p.writeField14(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ProductData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productId", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:productId: %s", p, err); }
  if err := oprot.WriteString(string(p.ProductId)); err != nil {
  return fmt.Errorf("%T.productId (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:productId: %s", p, err); }
  return err
}

func (p *ProductData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vertical", thrift.STRING, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:vertical: %s", p, err); }
  if err := oprot.WriteString(string(p.Vertical)); err != nil {
  return fmt.Errorf("%T.vertical (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:vertical: %s", p, err); }
  return err
}

func (p *ProductData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("versionNo", thrift.I64, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:versionNo: %s", p, err); }
  if err := oprot.WriteI64(int64(p.VersionNo)); err != nil {
  return fmt.Errorf("%T.versionNo (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:versionNo: %s", p, err); }
  return err
}

func (p *ProductData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemID", thrift.STRING, 4); err != nil {
    return fmt.Errorf("%T write field begin error 4:itemID: %s", p, err); }
  if err := oprot.WriteString(string(p.ItemID)); err != nil {
  return fmt.Errorf("%T.itemID (4) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 4:itemID: %s", p, err); }
  return err
}

func (p *ProductData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("preferredListingId", thrift.STRING, 5); err != nil {
    return fmt.Errorf("%T write field begin error 5:preferredListingId: %s", p, err); }
  if err := oprot.WriteString(string(p.PreferredListingId)); err != nil {
  return fmt.Errorf("%T.preferredListingId (5) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 5:preferredListingId: %s", p, err); }
  return err
}

func (p *ProductData) writeField6(oprot thrift.TProtocol) (err error) {
  if p.ItemizedProductIds != nil {
    if err := oprot.WriteFieldBegin("itemizedProductIds", thrift.LIST, 6); err != nil {
      return fmt.Errorf("%T write field begin error 6:itemizedProductIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ItemizedProductIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.ItemizedProductIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 6:itemizedProductIds: %s", p, err); }
  }
  return err
}

func (p *ProductData) writeField7(oprot thrift.TProtocol) (err error) {
  if p.ProductAttributes != nil {
    if err := oprot.WriteFieldBegin("productAttributes", thrift.MAP, 7); err != nil {
      return fmt.Errorf("%T write field begin error 7:productAttributes: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ProductAttributes)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.ProductAttributes {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 7:productAttributes: %s", p, err); }
  }
  return err
}

func (p *ProductData) writeField9(oprot thrift.TProtocol) (err error) {
  if p.ViewsAsJson != nil {
    if p.IsSetViewsAsJson() {
      if err := oprot.WriteFieldBegin("viewsAsJson", thrift.MAP, 9); err != nil {
        return fmt.Errorf("%T write field begin error 9:viewsAsJson: %s", p, err); }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ViewsAsJson)); err != nil {
        return fmt.Errorf("error writing map begin: %s")
      }
      for k,v := range p.ViewsAsJson {
        if err := oprot.WriteString(string(k)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return fmt.Errorf("error writing map end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 9:viewsAsJson: %s", p, err); }
    }
  }
  return err
}

func (p *ProductData) writeField10(oprot thrift.TProtocol) (err error) {
  if p.RelationshipInfo != nil {
    if p.IsSetRelationshipInfo() {
      if err := oprot.WriteFieldBegin("relationshipInfo", thrift.LIST, 10); err != nil {
        return fmt.Errorf("%T write field begin error 10:relationshipInfo: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RelationshipInfo)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.RelationshipInfo {
        if err := v.Write(oprot); err != nil {
          return fmt.Errorf("%T error writing struct: %s", v)
        }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 10:relationshipInfo: %s", p, err); }
    }
  }
  return err
}

func (p *ProductData) writeField11(oprot thrift.TProtocol) (err error) {
  if p.StaticContentInfo != nil {
    if p.IsSetStaticContentInfo() {
      if err := oprot.WriteFieldBegin("staticContentInfo", thrift.LIST, 11); err != nil {
        return fmt.Errorf("%T write field begin error 11:staticContentInfo: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRUCT, len(p.StaticContentInfo)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.StaticContentInfo {
        if err := v.Write(oprot); err != nil {
          return fmt.Errorf("%T error writing struct: %s", v)
        }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 11:staticContentInfo: %s", p, err); }
    }
  }
  return err
}

func (p *ProductData) writeField12(oprot thrift.TProtocol) (err error) {
  if p.CategorizationInfo != nil {
    if p.IsSetCategorizationInfo() {
      if err := oprot.WriteFieldBegin("categorizationInfo", thrift.STRUCT, 12); err != nil {
        return fmt.Errorf("%T write field begin error 12:categorizationInfo: %s", p, err); }
      if err := p.CategorizationInfo.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.CategorizationInfo)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 12:categorizationInfo: %s", p, err); }
    }
  }
  return err
}

func (p *ProductData) writeField13(oprot thrift.TProtocol) (err error) {
  if p.ContributorInfo != nil {
    if p.IsSetContributorInfo() {
      if err := oprot.WriteFieldBegin("contributorInfo", thrift.MAP, 13); err != nil {
        return fmt.Errorf("%T write field begin error 13:contributorInfo: %s", p, err); }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ContributorInfo)); err != nil {
        return fmt.Errorf("error writing map begin: %s")
      }
      for k,v := range p.ContributorInfo {
        if err := oprot.WriteString(string(k)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
        if err := v.Write(oprot); err != nil {
          return fmt.Errorf("%T error writing struct: %s", v)
        }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return fmt.Errorf("error writing map end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 13:contributorInfo: %s", p, err); }
    }
  }
  return err
}

func (p *ProductData) writeField14(oprot thrift.TProtocol) (err error) {
  if p.TagDetails != nil {
    if p.IsSetTagDetails() {
      if err := oprot.WriteFieldBegin("tagDetails", thrift.MAP, 14); err != nil {
        return fmt.Errorf("%T write field begin error 14:tagDetails: %s", p, err); }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.TagDetails)); err != nil {
        return fmt.Errorf("error writing map begin: %s")
      }
      for k,v := range p.TagDetails {
        if err := oprot.WriteString(string(k)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
        if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
          return fmt.Errorf("error writing list begin: %s")
        }
        for _, v := range v {
          if err := v.Write(oprot); err != nil {
            return fmt.Errorf("%T error writing struct: %s", v)
          }
        }
        if err := oprot.WriteListEnd(); err != nil {
          return fmt.Errorf("error writing list end: %s")
        }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return fmt.Errorf("error writing map end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 14:tagDetails: %s", p, err); }
    }
  }
  return err
}

func (p *ProductData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductData(%+v)", *p)
}

type ListingData struct {
  ListingId string `thrift:"listingId,1"`
  ProductId string `thrift:"productId,2"`
  SellerId string `thrift:"sellerId,3"`
  ListingStatus string `thrift:"listingStatus,4"`
  ListingState string `thrift:"listingState,5"`
  IsAvailable bool `thrift:"isAvailable,6"`
  ShippingDetails *ShippingDetails `thrift:"shippingDetails,7"`
  Mrp *cms.Price `thrift:"mrp,8"`
  SellerSellingPrice *cms.Price `thrift:"sellerSellingPrice,9"`
  PricingAttributes map[string]*cms.Price `thrift:"pricingAttributes,10"`
  ListingAttributes map[string]*cms.Attribute `thrift:"listingAttributes,11"`
  TagDetails map[string][]*cms.TagInfo `thrift:"tagDetails,12"`
}

func NewListingData() *ListingData {
  return &ListingData{}
}

func (p *ListingData) IsSetTagDetails() bool {
  return p.TagDetails != nil && len(p.TagDetails) > 0
}

func (p *ListingData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
case 5:
      if err := p.readField5(iprot); err != nil {
        return err
      }
case 6:
      if err := p.readField6(iprot); err != nil {
        return err
      }
case 7:
      if err := p.readField7(iprot); err != nil {
        return err
      }
case 8:
      if err := p.readField8(iprot); err != nil {
        return err
      }
case 9:
      if err := p.readField9(iprot); err != nil {
        return err
      }
case 10:
      if err := p.readField10(iprot); err != nil {
        return err
      }
case 11:
      if err := p.readField11(iprot); err != nil {
        return err
      }
case 12:
      if err := p.readField12(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ListingData)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.ListingId = v
}
  return nil
}

func (p *ListingData)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.ProductId = v
}
  return nil
}

func (p *ListingData)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.SellerId = v
}
  return nil
}

func (p *ListingData)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 4: %s")
} else {
  p.ListingStatus = v
}
  return nil
}

func (p *ListingData)  readField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 5: %s")
} else {
  p.ListingState = v
}
  return nil
}

func (p *ListingData)  readField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 6: %s")
} else {
  p.IsAvailable = v
}
  return nil
}

func (p *ListingData)  readField7(iprot thrift.TProtocol) error {
  p.ShippingDetails = NewShippingDetails()
  if err := p.ShippingDetails.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.ShippingDetails)
  }
  return nil
}

func (p *ListingData)  readField8(iprot thrift.TProtocol) error {
  p.Mrp = cms.NewPrice()
  if err := p.Mrp.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Mrp)
  }
  return nil
}

func (p *ListingData)  readField9(iprot thrift.TProtocol) error {
  p.SellerSellingPrice = cms.NewPrice()
  if err := p.SellerSellingPrice.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.SellerSellingPrice)
  }
  return nil
}

func (p *ListingData)  readField10(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.PricingAttributes = make(map[string]*cms.Price, size)
  for i := 0; i < size; i ++ {
var _key16 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key16 = v
}
    _val17 := cms.NewPrice()
    if err := _val17.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val17)
    }
    p.PricingAttributes[_key16] = _val17
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ListingData)  readField11(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ListingAttributes = make(map[string]*cms.Attribute, size)
  for i := 0; i < size; i ++ {
var _key18 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key18 = v
}
    _val19 := cms.NewAttribute()
    if err := _val19.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val19)
    }
    p.ListingAttributes[_key18] = _val19
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ListingData)  readField12(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.TagDetails = make(map[string][]*cms.TagInfo, size)
  for i := 0; i < size; i ++ {
var _key20 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key20 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return fmt.Errorf("error reading list being: %s")
    }
    _val21 := make([]*cms.TagInfo, 0, size)
    for i := 0; i < size; i ++ {
      _elem22 := cms.NewTagInfo()
      if err := _elem22.Read(iprot); err != nil {
        return fmt.Errorf("%T error reading struct: %s", _elem22)
      }
      _val21 = append(_val21, _elem22)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return fmt.Errorf("error reading list end: %s")
    }
    p.TagDetails[_key20] = _val21
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ListingData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListingData"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ListingData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listingId", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:listingId: %s", p, err); }
  if err := oprot.WriteString(string(p.ListingId)); err != nil {
  return fmt.Errorf("%T.listingId (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:listingId: %s", p, err); }
  return err
}

func (p *ListingData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productId", thrift.STRING, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:productId: %s", p, err); }
  if err := oprot.WriteString(string(p.ProductId)); err != nil {
  return fmt.Errorf("%T.productId (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:productId: %s", p, err); }
  return err
}

func (p *ListingData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sellerId", thrift.STRING, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:sellerId: %s", p, err); }
  if err := oprot.WriteString(string(p.SellerId)); err != nil {
  return fmt.Errorf("%T.sellerId (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:sellerId: %s", p, err); }
  return err
}

func (p *ListingData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listingStatus", thrift.STRING, 4); err != nil {
    return fmt.Errorf("%T write field begin error 4:listingStatus: %s", p, err); }
  if err := oprot.WriteString(string(p.ListingStatus)); err != nil {
  return fmt.Errorf("%T.listingStatus (4) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 4:listingStatus: %s", p, err); }
  return err
}

func (p *ListingData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("listingState", thrift.STRING, 5); err != nil {
    return fmt.Errorf("%T write field begin error 5:listingState: %s", p, err); }
  if err := oprot.WriteString(string(p.ListingState)); err != nil {
  return fmt.Errorf("%T.listingState (5) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 5:listingState: %s", p, err); }
  return err
}

func (p *ListingData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isAvailable", thrift.BOOL, 6); err != nil {
    return fmt.Errorf("%T write field begin error 6:isAvailable: %s", p, err); }
  if err := oprot.WriteBool(bool(p.IsAvailable)); err != nil {
  return fmt.Errorf("%T.isAvailable (6) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 6:isAvailable: %s", p, err); }
  return err
}

func (p *ListingData) writeField7(oprot thrift.TProtocol) (err error) {
  if p.ShippingDetails != nil {
    if err := oprot.WriteFieldBegin("shippingDetails", thrift.STRUCT, 7); err != nil {
      return fmt.Errorf("%T write field begin error 7:shippingDetails: %s", p, err); }
    if err := p.ShippingDetails.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.ShippingDetails)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 7:shippingDetails: %s", p, err); }
  }
  return err
}

func (p *ListingData) writeField8(oprot thrift.TProtocol) (err error) {
  if p.Mrp != nil {
    if err := oprot.WriteFieldBegin("mrp", thrift.STRUCT, 8); err != nil {
      return fmt.Errorf("%T write field begin error 8:mrp: %s", p, err); }
    if err := p.Mrp.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Mrp)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 8:mrp: %s", p, err); }
  }
  return err
}

func (p *ListingData) writeField9(oprot thrift.TProtocol) (err error) {
  if p.SellerSellingPrice != nil {
    if err := oprot.WriteFieldBegin("sellerSellingPrice", thrift.STRUCT, 9); err != nil {
      return fmt.Errorf("%T write field begin error 9:sellerSellingPrice: %s", p, err); }
    if err := p.SellerSellingPrice.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.SellerSellingPrice)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 9:sellerSellingPrice: %s", p, err); }
  }
  return err
}

func (p *ListingData) writeField10(oprot thrift.TProtocol) (err error) {
  if p.PricingAttributes != nil {
    if err := oprot.WriteFieldBegin("pricingAttributes", thrift.MAP, 10); err != nil {
      return fmt.Errorf("%T write field begin error 10:pricingAttributes: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.PricingAttributes)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.PricingAttributes {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 10:pricingAttributes: %s", p, err); }
  }
  return err
}

func (p *ListingData) writeField11(oprot thrift.TProtocol) (err error) {
  if p.ListingAttributes != nil {
    if err := oprot.WriteFieldBegin("listingAttributes", thrift.MAP, 11); err != nil {
      return fmt.Errorf("%T write field begin error 11:listingAttributes: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ListingAttributes)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.ListingAttributes {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 11:listingAttributes: %s", p, err); }
  }
  return err
}

func (p *ListingData) writeField12(oprot thrift.TProtocol) (err error) {
  if p.TagDetails != nil {
    if p.IsSetTagDetails() {
      if err := oprot.WriteFieldBegin("tagDetails", thrift.MAP, 12); err != nil {
        return fmt.Errorf("%T write field begin error 12:tagDetails: %s", p, err); }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.TagDetails)); err != nil {
        return fmt.Errorf("error writing map begin: %s")
      }
      for k,v := range p.TagDetails {
        if err := oprot.WriteString(string(k)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
        if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
          return fmt.Errorf("error writing list begin: %s")
        }
        for _, v := range v {
          if err := v.Write(oprot); err != nil {
            return fmt.Errorf("%T error writing struct: %s", v)
          }
        }
        if err := oprot.WriteListEnd(); err != nil {
          return fmt.Errorf("error writing list end: %s")
        }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return fmt.Errorf("error writing map end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 12:tagDetails: %s", p, err); }
    }
  }
  return err
}

func (p *ListingData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListingData(%+v)", *p)
}

type VariationDetail struct {
  VariationID string `thrift:"variationID,1"`
  ProductData *ProductData `thrift:"productData,2"`
}

func NewVariationDetail() *VariationDetail {
  return &VariationDetail{}
}

func (p *VariationDetail) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *VariationDetail)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.VariationID = v
}
  return nil
}

func (p *VariationDetail)  readField2(iprot thrift.TProtocol) error {
  p.ProductData = NewProductData()
  if err := p.ProductData.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.ProductData)
  }
  return nil
}

func (p *VariationDetail) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VariationDetail"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *VariationDetail) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("variationID", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:variationID: %s", p, err); }
  if err := oprot.WriteString(string(p.VariationID)); err != nil {
  return fmt.Errorf("%T.variationID (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:variationID: %s", p, err); }
  return err
}

func (p *VariationDetail) writeField2(oprot thrift.TProtocol) (err error) {
  if p.ProductData != nil {
    if err := oprot.WriteFieldBegin("productData", thrift.STRUCT, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:productData: %s", p, err); }
    if err := p.ProductData.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.ProductData)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:productData: %s", p, err); }
  }
  return err
}

func (p *VariationDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VariationDetail(%+v)", *p)
}

type LiveExperimentDetail struct {
  LiveExperimentName string `thrift:"liveExperimentName,1"`
  VariationDetailList []*VariationDetail `thrift:"variationDetailList,2"`
}

func NewLiveExperimentDetail() *LiveExperimentDetail {
  return &LiveExperimentDetail{}
}

func (p *LiveExperimentDetail) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *LiveExperimentDetail)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.LiveExperimentName = v
}
  return nil
}

func (p *LiveExperimentDetail)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.VariationDetailList = make([]*VariationDetail, 0, size)
  for i := 0; i < size; i ++ {
    _elem23 := NewVariationDetail()
    if err := _elem23.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _elem23)
    }
    p.VariationDetailList = append(p.VariationDetailList, _elem23)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *LiveExperimentDetail) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LiveExperimentDetail"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *LiveExperimentDetail) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("liveExperimentName", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:liveExperimentName: %s", p, err); }
  if err := oprot.WriteString(string(p.LiveExperimentName)); err != nil {
  return fmt.Errorf("%T.liveExperimentName (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:liveExperimentName: %s", p, err); }
  return err
}

func (p *LiveExperimentDetail) writeField2(oprot thrift.TProtocol) (err error) {
  if p.VariationDetailList != nil {
    if err := oprot.WriteFieldBegin("variationDetailList", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:variationDetailList: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VariationDetailList)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.VariationDetailList {
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:variationDetailList: %s", p, err); }
  }
  return err
}

func (p *LiveExperimentDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LiveExperimentDetail(%+v)", *p)
}

type ProductDataWithListings struct {
  ProductData *ProductData `thrift:"productData,1"`
  Listings map[ListingID]*ListingData `thrift:"listings,2"`
  LiveExperimentDetail *LiveExperimentDetail `thrift:"liveExperimentDetail,3"`
}

func NewProductDataWithListings() *ProductDataWithListings {
  return &ProductDataWithListings{}
}

func (p *ProductDataWithListings) IsSetLiveExperimentDetail() bool {
  return p.LiveExperimentDetail != nil
}

func (p *ProductDataWithListings) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ProductDataWithListings)  readField1(iprot thrift.TProtocol) error {
  p.ProductData = NewProductData()
  if err := p.ProductData.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.ProductData)
  }
  return nil
}

func (p *ProductDataWithListings)  readField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.Listings = make(map[ListingID]*ListingData, size)
  for i := 0; i < size; i ++ {
var _key24 ListingID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key24 = ListingID(v)
}
    _val25 := NewListingData()
    if err := _val25.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val25)
    }
    p.Listings[_key24] = _val25
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ProductDataWithListings)  readField3(iprot thrift.TProtocol) error {
  p.LiveExperimentDetail = NewLiveExperimentDetail()
  if err := p.LiveExperimentDetail.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.LiveExperimentDetail)
  }
  return nil
}

func (p *ProductDataWithListings) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProductDataWithListings"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ProductDataWithListings) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductData != nil {
    if err := oprot.WriteFieldBegin("productData", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productData: %s", p, err); }
    if err := p.ProductData.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.ProductData)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productData: %s", p, err); }
  }
  return err
}

func (p *ProductDataWithListings) writeField2(oprot thrift.TProtocol) (err error) {
  if p.Listings != nil {
    if err := oprot.WriteFieldBegin("listings", thrift.MAP, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:listings: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Listings)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.Listings {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:listings: %s", p, err); }
  }
  return err
}

func (p *ProductDataWithListings) writeField3(oprot thrift.TProtocol) (err error) {
  if p.LiveExperimentDetail != nil {
    if p.IsSetLiveExperimentDetail() {
      if err := oprot.WriteFieldBegin("liveExperimentDetail", thrift.STRUCT, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:liveExperimentDetail: %s", p, err); }
      if err := p.LiveExperimentDetail.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.LiveExperimentDetail)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:liveExperimentDetail: %s", p, err); }
    }
  }
  return err
}

func (p *ProductDataWithListings) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductDataWithListings(%+v)", *p)
}

type ListingWithProductData struct {
  Listing *ListingData `thrift:"listing,1"`
  ProductData *ProductData `thrift:"productData,2"`
  LiveExperimentDetail *LiveExperimentDetail `thrift:"liveExperimentDetail,3"`
}

func NewListingWithProductData() *ListingWithProductData {
  return &ListingWithProductData{}
}

func (p *ListingWithProductData) IsSetLiveExperimentDetail() bool {
  return p.LiveExperimentDetail != nil
}

func (p *ListingWithProductData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ListingWithProductData)  readField1(iprot thrift.TProtocol) error {
  p.Listing = NewListingData()
  if err := p.Listing.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Listing)
  }
  return nil
}

func (p *ListingWithProductData)  readField2(iprot thrift.TProtocol) error {
  p.ProductData = NewProductData()
  if err := p.ProductData.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.ProductData)
  }
  return nil
}

func (p *ListingWithProductData)  readField3(iprot thrift.TProtocol) error {
  p.LiveExperimentDetail = NewLiveExperimentDetail()
  if err := p.LiveExperimentDetail.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.LiveExperimentDetail)
  }
  return nil
}

func (p *ListingWithProductData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListingWithProductData"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ListingWithProductData) writeField1(oprot thrift.TProtocol) (err error) {
  if p.Listing != nil {
    if err := oprot.WriteFieldBegin("listing", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:listing: %s", p, err); }
    if err := p.Listing.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Listing)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:listing: %s", p, err); }
  }
  return err
}

func (p *ListingWithProductData) writeField2(oprot thrift.TProtocol) (err error) {
  if p.ProductData != nil {
    if err := oprot.WriteFieldBegin("productData", thrift.STRUCT, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:productData: %s", p, err); }
    if err := p.ProductData.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.ProductData)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:productData: %s", p, err); }
  }
  return err
}

func (p *ListingWithProductData) writeField3(oprot thrift.TProtocol) (err error) {
  if p.LiveExperimentDetail != nil {
    if p.IsSetLiveExperimentDetail() {
      if err := oprot.WriteFieldBegin("liveExperimentDetail", thrift.STRUCT, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:liveExperimentDetail: %s", p, err); }
      if err := p.LiveExperimentDetail.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.LiveExperimentDetail)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:liveExperimentDetail: %s", p, err); }
    }
  }
  return err
}

func (p *ListingWithProductData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListingWithProductData(%+v)", *p)
}

type ProductInfoRequest struct {
  ProductIds []string `thrift:"productIds,1"`
  ProductAttributes []string `thrift:"productAttributes,2"`
  ListingAttributes []string `thrift:"listingAttributes,3"`
  ViewNames []string `thrift:"viewNames,4"`
  IsRelationshipInfoRequired bool `thrift:"isRelationshipInfoRequired,5"`
  IsStaticContentsRequired bool `thrift:"isStaticContentsRequired,6"`
  IsCategorizationInfoRequired bool `thrift:"isCategorizationInfoRequired,7"`
  IsContributorInfoRequired bool `thrift:"isContributorInfoRequired,8"`
  BaseRequest *BaseRequest `thrift:"baseRequest,9,required"`
  IsTagInfoRequired bool `thrift:"isTagInfoRequired,10"`
  SellerIds []string `thrift:"sellerIds,11"`
  IsABInfoRequest bool `thrift:"isABInfoRequest,12"`
}

func NewProductInfoRequest() *ProductInfoRequest {
  return &ProductInfoRequest{
IsRelationshipInfoRequired: true,

IsStaticContentsRequired: true,

IsCategorizationInfoRequired: true,

IsContributorInfoRequired: true,

IsTagInfoRequired: true,

IsABInfoRequest: false,
}
}

func (p *ProductInfoRequest) IsSetProductAttributes() bool {
  return p.ProductAttributes != nil && len(p.ProductAttributes) > 0
}

func (p *ProductInfoRequest) IsSetListingAttributes() bool {
  return p.ListingAttributes != nil && len(p.ListingAttributes) > 0
}

func (p *ProductInfoRequest) IsSetViewNames() bool {
  return p.ViewNames != nil && len(p.ViewNames) > 0
}

func (p *ProductInfoRequest) IsSetIsRelationshipInfoRequired() bool {
  return p.IsRelationshipInfoRequired != true
}

func (p *ProductInfoRequest) IsSetIsStaticContentsRequired() bool {
  return p.IsStaticContentsRequired != true
}

func (p *ProductInfoRequest) IsSetIsCategorizationInfoRequired() bool {
  return p.IsCategorizationInfoRequired != true
}

func (p *ProductInfoRequest) IsSetIsContributorInfoRequired() bool {
  return p.IsContributorInfoRequired != true
}

func (p *ProductInfoRequest) IsSetIsTagInfoRequired() bool {
  return p.IsTagInfoRequired != true
}

func (p *ProductInfoRequest) IsSetSellerIds() bool {
  return p.SellerIds != nil && len(p.SellerIds) > 0
}

func (p *ProductInfoRequest) IsSetIsABInfoRequest() bool {
  return p.IsABInfoRequest != false
}

func (p *ProductInfoRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
case 5:
      if err := p.readField5(iprot); err != nil {
        return err
      }
case 6:
      if err := p.readField6(iprot); err != nil {
        return err
      }
case 7:
      if err := p.readField7(iprot); err != nil {
        return err
      }
case 8:
      if err := p.readField8(iprot); err != nil {
        return err
      }
case 9:
      if err := p.readField9(iprot); err != nil {
        return err
      }
case 10:
      if err := p.readField10(iprot); err != nil {
        return err
      }
case 11:
      if err := p.readField11(iprot); err != nil {
        return err
      }
case 12:
      if err := p.readField12(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ProductInfoRequest)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ProductIds = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem26 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem26 = v
}
    p.ProductIds = append(p.ProductIds, _elem26)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductInfoRequest)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ProductAttributes = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem27 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem27 = v
}
    p.ProductAttributes = append(p.ProductAttributes, _elem27)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductInfoRequest)  readField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ListingAttributes = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem28 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem28 = v
}
    p.ListingAttributes = append(p.ListingAttributes, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductInfoRequest)  readField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ViewNames = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem29 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem29 = v
}
    p.ViewNames = append(p.ViewNames, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductInfoRequest)  readField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 5: %s")
} else {
  p.IsRelationshipInfoRequired = v
}
  return nil
}

func (p *ProductInfoRequest)  readField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 6: %s")
} else {
  p.IsStaticContentsRequired = v
}
  return nil
}

func (p *ProductInfoRequest)  readField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 7: %s")
} else {
  p.IsCategorizationInfoRequired = v
}
  return nil
}

func (p *ProductInfoRequest)  readField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 8: %s")
} else {
  p.IsContributorInfoRequired = v
}
  return nil
}

func (p *ProductInfoRequest)  readField9(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *ProductInfoRequest)  readField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 10: %s")
} else {
  p.IsTagInfoRequired = v
}
  return nil
}

func (p *ProductInfoRequest)  readField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.SellerIds = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem30 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem30 = v
}
    p.SellerIds = append(p.SellerIds, _elem30)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductInfoRequest)  readField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 12: %s")
} else {
  p.IsABInfoRequest = v
}
  return nil
}

func (p *ProductInfoRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProductInfoRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ProductInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductIds != nil {
    if err := oprot.WriteFieldBegin("productIds", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ProductIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.ProductIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productIds: %s", p, err); }
  }
  return err
}

func (p *ProductInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.ProductAttributes != nil {
    if p.IsSetProductAttributes() {
      if err := oprot.WriteFieldBegin("productAttributes", thrift.LIST, 2); err != nil {
        return fmt.Errorf("%T write field begin error 2:productAttributes: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRING, len(p.ProductAttributes)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.ProductAttributes {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 2:productAttributes: %s", p, err); }
    }
  }
  return err
}

func (p *ProductInfoRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.ListingAttributes != nil {
    if p.IsSetListingAttributes() {
      if err := oprot.WriteFieldBegin("listingAttributes", thrift.LIST, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:listingAttributes: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRING, len(p.ListingAttributes)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.ListingAttributes {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:listingAttributes: %s", p, err); }
    }
  }
  return err
}

func (p *ProductInfoRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.ViewNames != nil {
    if p.IsSetViewNames() {
      if err := oprot.WriteFieldBegin("viewNames", thrift.LIST, 4); err != nil {
        return fmt.Errorf("%T write field begin error 4:viewNames: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRING, len(p.ViewNames)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.ViewNames {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 4:viewNames: %s", p, err); }
    }
  }
  return err
}

func (p *ProductInfoRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsRelationshipInfoRequired() {
    if err := oprot.WriteFieldBegin("isRelationshipInfoRequired", thrift.BOOL, 5); err != nil {
      return fmt.Errorf("%T write field begin error 5:isRelationshipInfoRequired: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsRelationshipInfoRequired)); err != nil {
    return fmt.Errorf("%T.isRelationshipInfoRequired (5) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 5:isRelationshipInfoRequired: %s", p, err); }
  }
  return err
}

func (p *ProductInfoRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsStaticContentsRequired() {
    if err := oprot.WriteFieldBegin("isStaticContentsRequired", thrift.BOOL, 6); err != nil {
      return fmt.Errorf("%T write field begin error 6:isStaticContentsRequired: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsStaticContentsRequired)); err != nil {
    return fmt.Errorf("%T.isStaticContentsRequired (6) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 6:isStaticContentsRequired: %s", p, err); }
  }
  return err
}

func (p *ProductInfoRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsCategorizationInfoRequired() {
    if err := oprot.WriteFieldBegin("isCategorizationInfoRequired", thrift.BOOL, 7); err != nil {
      return fmt.Errorf("%T write field begin error 7:isCategorizationInfoRequired: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsCategorizationInfoRequired)); err != nil {
    return fmt.Errorf("%T.isCategorizationInfoRequired (7) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 7:isCategorizationInfoRequired: %s", p, err); }
  }
  return err
}

func (p *ProductInfoRequest) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsContributorInfoRequired() {
    if err := oprot.WriteFieldBegin("isContributorInfoRequired", thrift.BOOL, 8); err != nil {
      return fmt.Errorf("%T write field begin error 8:isContributorInfoRequired: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsContributorInfoRequired)); err != nil {
    return fmt.Errorf("%T.isContributorInfoRequired (8) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 8:isContributorInfoRequired: %s", p, err); }
  }
  return err
}

func (p *ProductInfoRequest) writeField9(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 9); err != nil {
      return fmt.Errorf("%T write field begin error 9:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 9:baseRequest: %s", p, err); }
  }
  return err
}

func (p *ProductInfoRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsTagInfoRequired() {
    if err := oprot.WriteFieldBegin("isTagInfoRequired", thrift.BOOL, 10); err != nil {
      return fmt.Errorf("%T write field begin error 10:isTagInfoRequired: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsTagInfoRequired)); err != nil {
    return fmt.Errorf("%T.isTagInfoRequired (10) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 10:isTagInfoRequired: %s", p, err); }
  }
  return err
}

func (p *ProductInfoRequest) writeField11(oprot thrift.TProtocol) (err error) {
  if p.SellerIds != nil {
    if p.IsSetSellerIds() {
      if err := oprot.WriteFieldBegin("sellerIds", thrift.LIST, 11); err != nil {
        return fmt.Errorf("%T write field begin error 11:sellerIds: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRING, len(p.SellerIds)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.SellerIds {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 11:sellerIds: %s", p, err); }
    }
  }
  return err
}

func (p *ProductInfoRequest) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsABInfoRequest() {
    if err := oprot.WriteFieldBegin("isABInfoRequest", thrift.BOOL, 12); err != nil {
      return fmt.Errorf("%T write field begin error 12:isABInfoRequest: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsABInfoRequest)); err != nil {
    return fmt.Errorf("%T.isABInfoRequest (12) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 12:isABInfoRequest: %s", p, err); }
  }
  return err
}

func (p *ProductInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductInfoRequest(%+v)", *p)
}

type ProductListingsResult struct {
  ProductDataWithListings map[ProductID]*ProductDataWithListings `thrift:"productDataWithListings,1"`
  InvalidProductIds []ProductID `thrift:"invalidProductIds,2"`
  BaseResult *BaseResult `thrift:"baseResult,3"`
}

func NewProductListingsResult() *ProductListingsResult {
  return &ProductListingsResult{}
}

func (p *ProductListingsResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *ProductListingsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ProductListingsResult)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ProductDataWithListings = make(map[ProductID]*ProductDataWithListings, size)
  for i := 0; i < size; i ++ {
var _key31 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key31 = ProductID(v)
}
    _val32 := NewProductDataWithListings()
    if err := _val32.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val32)
    }
    p.ProductDataWithListings[_key31] = _val32
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ProductListingsResult)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.InvalidProductIds = make([]ProductID, 0, size)
  for i := 0; i < size; i ++ {
var _elem33 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem33 = ProductID(v)
}
    p.InvalidProductIds = append(p.InvalidProductIds, _elem33)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductListingsResult)  readField3(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *ProductListingsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProductListingsResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ProductListingsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductDataWithListings != nil {
    if err := oprot.WriteFieldBegin("productDataWithListings", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productDataWithListings: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ProductDataWithListings)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.ProductDataWithListings {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productDataWithListings: %s", p, err); }
  }
  return err
}

func (p *ProductListingsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.InvalidProductIds != nil {
    if err := oprot.WriteFieldBegin("invalidProductIds", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:invalidProductIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.InvalidProductIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.InvalidProductIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:invalidProductIds: %s", p, err); }
  }
  return err
}

func (p *ProductListingsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *ProductListingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductListingsResult(%+v)", *p)
}

type ListingProductResult struct {
  ListingWithProductData map[ListingID]*ListingWithProductData `thrift:"listingWithProductData,1"`
  InvalidListingIds []ListingID `thrift:"invalidListingIds,2"`
  BaseResult *BaseResult `thrift:"baseResult,3"`
}

func NewListingProductResult() *ListingProductResult {
  return &ListingProductResult{}
}

func (p *ListingProductResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *ListingProductResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ListingProductResult)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ListingWithProductData = make(map[ListingID]*ListingWithProductData, size)
  for i := 0; i < size; i ++ {
var _key34 ListingID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key34 = ListingID(v)
}
    _val35 := NewListingWithProductData()
    if err := _val35.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val35)
    }
    p.ListingWithProductData[_key34] = _val35
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ListingProductResult)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.InvalidListingIds = make([]ListingID, 0, size)
  for i := 0; i < size; i ++ {
var _elem36 ListingID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem36 = ListingID(v)
}
    p.InvalidListingIds = append(p.InvalidListingIds, _elem36)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ListingProductResult)  readField3(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *ListingProductResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListingProductResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ListingProductResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ListingWithProductData != nil {
    if err := oprot.WriteFieldBegin("listingWithProductData", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:listingWithProductData: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ListingWithProductData)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.ListingWithProductData {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:listingWithProductData: %s", p, err); }
  }
  return err
}

func (p *ListingProductResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.InvalidListingIds != nil {
    if err := oprot.WriteFieldBegin("invalidListingIds", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:invalidListingIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.InvalidListingIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.InvalidListingIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:invalidListingIds: %s", p, err); }
  }
  return err
}

func (p *ListingProductResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *ListingProductResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListingProductResult(%+v)", *p)
}

type ProductInfoResult struct {
  ProductData map[ProductID]*ProductData `thrift:"productData,1"`
  InvalidProductIds []ProductID `thrift:"invalidProductIds,2"`
  BaseResult *BaseResult `thrift:"baseResult,3"`
  LiveExperimentDetailForPIDs map[ProductID]*LiveExperimentDetail `thrift:"liveExperimentDetailForPIDs,4"`
}

func NewProductInfoResult() *ProductInfoResult {
  return &ProductInfoResult{}
}

func (p *ProductInfoResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *ProductInfoResult) IsSetLiveExperimentDetailForPIDs() bool {
  return p.LiveExperimentDetailForPIDs != nil && len(p.LiveExperimentDetailForPIDs) > 0
}

func (p *ProductInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ProductInfoResult)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ProductData = make(map[ProductID]*ProductData, size)
  for i := 0; i < size; i ++ {
var _key37 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key37 = ProductID(v)
}
    _val38 := NewProductData()
    if err := _val38.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val38)
    }
    p.ProductData[_key37] = _val38
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ProductInfoResult)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.InvalidProductIds = make([]ProductID, 0, size)
  for i := 0; i < size; i ++ {
var _elem39 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem39 = ProductID(v)
}
    p.InvalidProductIds = append(p.InvalidProductIds, _elem39)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductInfoResult)  readField3(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *ProductInfoResult)  readField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.LiveExperimentDetailForPIDs = make(map[ProductID]*LiveExperimentDetail, size)
  for i := 0; i < size; i ++ {
var _key40 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key40 = ProductID(v)
}
    _val41 := NewLiveExperimentDetail()
    if err := _val41.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val41)
    }
    p.LiveExperimentDetailForPIDs[_key40] = _val41
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ProductInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProductInfoResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ProductInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductData != nil {
    if err := oprot.WriteFieldBegin("productData", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productData: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ProductData)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.ProductData {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productData: %s", p, err); }
  }
  return err
}

func (p *ProductInfoResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.InvalidProductIds != nil {
    if err := oprot.WriteFieldBegin("invalidProductIds", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:invalidProductIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.InvalidProductIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.InvalidProductIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:invalidProductIds: %s", p, err); }
  }
  return err
}

func (p *ProductInfoResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *ProductInfoResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.LiveExperimentDetailForPIDs != nil {
    if p.IsSetLiveExperimentDetailForPIDs() {
      if err := oprot.WriteFieldBegin("liveExperimentDetailForPIDs", thrift.MAP, 4); err != nil {
        return fmt.Errorf("%T write field begin error 4:liveExperimentDetailForPIDs: %s", p, err); }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.LiveExperimentDetailForPIDs)); err != nil {
        return fmt.Errorf("error writing map begin: %s")
      }
      for k,v := range p.LiveExperimentDetailForPIDs {
        if err := oprot.WriteString(string(k)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
        if err := v.Write(oprot); err != nil {
          return fmt.Errorf("%T error writing struct: %s", v)
        }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return fmt.Errorf("error writing map end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 4:liveExperimentDetailForPIDs: %s", p, err); }
    }
  }
  return err
}

func (p *ProductInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductInfoResult(%+v)", *p)
}

type ListingRequest struct {
  ProductIds []string `thrift:"productIds,1"`
  ListingAttributes []string `thrift:"listingAttributes,2"`
  BaseRequest *BaseRequest `thrift:"baseRequest,3,required"`
  SellerIds []string `thrift:"sellerIds,4"`
  IsABInfoRequest bool `thrift:"isABInfoRequest,5"`
}

func NewListingRequest() *ListingRequest {
  return &ListingRequest{
IsABInfoRequest: false,
}
}

func (p *ListingRequest) IsSetListingAttributes() bool {
  return p.ListingAttributes != nil && len(p.ListingAttributes) > 0
}

func (p *ListingRequest) IsSetSellerIds() bool {
  return p.SellerIds != nil && len(p.SellerIds) > 0
}

func (p *ListingRequest) IsSetIsABInfoRequest() bool {
  return p.IsABInfoRequest != false
}

func (p *ListingRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
case 5:
      if err := p.readField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ListingRequest)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ProductIds = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem42 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem42 = v
}
    p.ProductIds = append(p.ProductIds, _elem42)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ListingRequest)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ListingAttributes = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem43 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem43 = v
}
    p.ListingAttributes = append(p.ListingAttributes, _elem43)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ListingRequest)  readField3(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *ListingRequest)  readField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.SellerIds = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem44 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem44 = v
}
    p.SellerIds = append(p.SellerIds, _elem44)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ListingRequest)  readField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 5: %s")
} else {
  p.IsABInfoRequest = v
}
  return nil
}

func (p *ListingRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListingRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ListingRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductIds != nil {
    if err := oprot.WriteFieldBegin("productIds", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ProductIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.ProductIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productIds: %s", p, err); }
  }
  return err
}

func (p *ListingRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.ListingAttributes != nil {
    if p.IsSetListingAttributes() {
      if err := oprot.WriteFieldBegin("listingAttributes", thrift.LIST, 2); err != nil {
        return fmt.Errorf("%T write field begin error 2:listingAttributes: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRING, len(p.ListingAttributes)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.ListingAttributes {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 2:listingAttributes: %s", p, err); }
    }
  }
  return err
}

func (p *ListingRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 3); err != nil {
      return fmt.Errorf("%T write field begin error 3:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 3:baseRequest: %s", p, err); }
  }
  return err
}

func (p *ListingRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.SellerIds != nil {
    if p.IsSetSellerIds() {
      if err := oprot.WriteFieldBegin("sellerIds", thrift.LIST, 4); err != nil {
        return fmt.Errorf("%T write field begin error 4:sellerIds: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRING, len(p.SellerIds)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.SellerIds {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 4:sellerIds: %s", p, err); }
    }
  }
  return err
}

func (p *ListingRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsABInfoRequest() {
    if err := oprot.WriteFieldBegin("isABInfoRequest", thrift.BOOL, 5); err != nil {
      return fmt.Errorf("%T write field begin error 5:isABInfoRequest: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsABInfoRequest)); err != nil {
    return fmt.Errorf("%T.isABInfoRequest (5) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 5:isABInfoRequest: %s", p, err); }
  }
  return err
}

func (p *ListingRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListingRequest(%+v)", *p)
}

type ListingIDRequest struct {
  ListingId []string `thrift:"listingId,1"`
  IsCommonInfoRequired bool `thrift:"isCommonInfoRequired,2"`
  BaseRequest *BaseRequest `thrift:"baseRequest,3,required"`
  IsABInfoRequest bool `thrift:"isABInfoRequest,4"`
}

func NewListingIDRequest() *ListingIDRequest {
  return &ListingIDRequest{
IsCommonInfoRequired: false,

IsABInfoRequest: false,
}
}

func (p *ListingIDRequest) IsSetIsCommonInfoRequired() bool {
  return p.IsCommonInfoRequired != false
}

func (p *ListingIDRequest) IsSetIsABInfoRequest() bool {
  return p.IsABInfoRequest != false
}

func (p *ListingIDRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ListingIDRequest)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ListingId = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem45 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem45 = v
}
    p.ListingId = append(p.ListingId, _elem45)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ListingIDRequest)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.IsCommonInfoRequired = v
}
  return nil
}

func (p *ListingIDRequest)  readField3(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *ListingIDRequest)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 4: %s")
} else {
  p.IsABInfoRequest = v
}
  return nil
}

func (p *ListingIDRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListingIDRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ListingIDRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ListingId != nil {
    if err := oprot.WriteFieldBegin("listingId", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:listingId: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ListingId)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.ListingId {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:listingId: %s", p, err); }
  }
  return err
}

func (p *ListingIDRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsCommonInfoRequired() {
    if err := oprot.WriteFieldBegin("isCommonInfoRequired", thrift.BOOL, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:isCommonInfoRequired: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsCommonInfoRequired)); err != nil {
    return fmt.Errorf("%T.isCommonInfoRequired (2) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:isCommonInfoRequired: %s", p, err); }
  }
  return err
}

func (p *ListingIDRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 3); err != nil {
      return fmt.Errorf("%T write field begin error 3:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 3:baseRequest: %s", p, err); }
  }
  return err
}

func (p *ListingIDRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsABInfoRequest() {
    if err := oprot.WriteFieldBegin("isABInfoRequest", thrift.BOOL, 4); err != nil {
      return fmt.Errorf("%T write field begin error 4:isABInfoRequest: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsABInfoRequest)); err != nil {
    return fmt.Errorf("%T.isABInfoRequest (4) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 4:isABInfoRequest: %s", p, err); }
  }
  return err
}

func (p *ListingIDRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListingIDRequest(%+v)", *p)
}

type ListingResult struct {
  Listing map[ProductID][]*ListingData `thrift:"listing,1"`
  InvalidProductIds []ProductID `thrift:"invalidProductIds,2"`
  BaseResult *BaseResult `thrift:"baseResult,3"`
  LiveExperimentDetailForPIDs map[ProductID]*LiveExperimentDetail `thrift:"liveExperimentDetailForPIDs,4"`
}

func NewListingResult() *ListingResult {
  return &ListingResult{}
}

func (p *ListingResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *ListingResult) IsSetLiveExperimentDetailForPIDs() bool {
  return p.LiveExperimentDetailForPIDs != nil && len(p.LiveExperimentDetailForPIDs) > 0
}

func (p *ListingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ListingResult)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.Listing = make(map[ProductID][]*ListingData, size)
  for i := 0; i < size; i ++ {
var _key46 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key46 = ProductID(v)
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return fmt.Errorf("error reading list being: %s")
    }
    _val47 := make([]*ListingData, 0, size)
    for i := 0; i < size; i ++ {
      _elem48 := NewListingData()
      if err := _elem48.Read(iprot); err != nil {
        return fmt.Errorf("%T error reading struct: %s", _elem48)
      }
      _val47 = append(_val47, _elem48)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return fmt.Errorf("error reading list end: %s")
    }
    p.Listing[_key46] = _val47
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ListingResult)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.InvalidProductIds = make([]ProductID, 0, size)
  for i := 0; i < size; i ++ {
var _elem49 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem49 = ProductID(v)
}
    p.InvalidProductIds = append(p.InvalidProductIds, _elem49)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ListingResult)  readField3(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *ListingResult)  readField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.LiveExperimentDetailForPIDs = make(map[ProductID]*LiveExperimentDetail, size)
  for i := 0; i < size; i ++ {
var _key50 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key50 = ProductID(v)
}
    _val51 := NewLiveExperimentDetail()
    if err := _val51.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val51)
    }
    p.LiveExperimentDetailForPIDs[_key50] = _val51
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ListingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ListingResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ListingResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.Listing != nil {
    if err := oprot.WriteFieldBegin("listing", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:listing: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Listing)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.Listing {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range v {
        if err := v.Write(oprot); err != nil {
          return fmt.Errorf("%T error writing struct: %s", v)
        }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:listing: %s", p, err); }
  }
  return err
}

func (p *ListingResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.InvalidProductIds != nil {
    if err := oprot.WriteFieldBegin("invalidProductIds", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:invalidProductIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.InvalidProductIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.InvalidProductIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:invalidProductIds: %s", p, err); }
  }
  return err
}

func (p *ListingResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *ListingResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.LiveExperimentDetailForPIDs != nil {
    if p.IsSetLiveExperimentDetailForPIDs() {
      if err := oprot.WriteFieldBegin("liveExperimentDetailForPIDs", thrift.MAP, 4); err != nil {
        return fmt.Errorf("%T write field begin error 4:liveExperimentDetailForPIDs: %s", p, err); }
      if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.LiveExperimentDetailForPIDs)); err != nil {
        return fmt.Errorf("error writing map begin: %s")
      }
      for k,v := range p.LiveExperimentDetailForPIDs {
        if err := oprot.WriteString(string(k)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
        if err := v.Write(oprot); err != nil {
          return fmt.Errorf("%T error writing struct: %s", v)
        }
      }
      if err := oprot.WriteMapEnd(); err != nil {
        return fmt.Errorf("error writing map end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 4:liveExperimentDetailForPIDs: %s", p, err); }
    }
  }
  return err
}

func (p *ListingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ListingResult(%+v)", *p)
}

type ViewsJson struct {
  ViewsAsJson map[string]string `thrift:"viewsAsJson,1"`
}

func NewViewsJson() *ViewsJson {
  return &ViewsJson{}
}

func (p *ViewsJson) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ViewsJson)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ViewsAsJson = make(map[string]string, size)
  for i := 0; i < size; i ++ {
var _key52 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key52 = v
}
var _val53 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _val53 = v
}
    p.ViewsAsJson[_key52] = _val53
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ViewsJson) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ViewsJson"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ViewsJson) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ViewsAsJson != nil {
    if err := oprot.WriteFieldBegin("viewsAsJson", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:viewsAsJson: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ViewsAsJson)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.ViewsAsJson {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:viewsAsJson: %s", p, err); }
  }
  return err
}

func (p *ViewsJson) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ViewsJson(%+v)", *p)
}

type DefinitionJson struct {
  DefinitionAsJson map[string]string `thrift:"definitionAsJson,1"`
}

func NewDefinitionJson() *DefinitionJson {
  return &DefinitionJson{}
}

func (p *DefinitionJson) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *DefinitionJson)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.DefinitionAsJson = make(map[string]string, size)
  for i := 0; i < size; i ++ {
var _key54 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key54 = v
}
var _val55 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _val55 = v
}
    p.DefinitionAsJson[_key54] = _val55
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *DefinitionJson) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DefinitionJson"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *DefinitionJson) writeField1(oprot thrift.TProtocol) (err error) {
  if p.DefinitionAsJson != nil {
    if err := oprot.WriteFieldBegin("definitionAsJson", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:definitionAsJson: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.DefinitionAsJson)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.DefinitionAsJson {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:definitionAsJson: %s", p, err); }
  }
  return err
}

func (p *DefinitionJson) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DefinitionJson(%+v)", *p)
}

type ViewRequest struct {
  ProductIds []string `thrift:"productIds,1"`
  ViewNames []string `thrift:"viewNames,2"`
  BaseRequest *BaseRequest `thrift:"baseRequest,3,required"`
}

func NewViewRequest() *ViewRequest {
  return &ViewRequest{}
}

func (p *ViewRequest) IsSetViewNames() bool {
  return p.ViewNames != nil && len(p.ViewNames) > 0
}

func (p *ViewRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ViewRequest)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ProductIds = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem56 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem56 = v
}
    p.ProductIds = append(p.ProductIds, _elem56)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ViewRequest)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ViewNames = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem57 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem57 = v
}
    p.ViewNames = append(p.ViewNames, _elem57)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ViewRequest)  readField3(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *ViewRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ViewRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ViewRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductIds != nil {
    if err := oprot.WriteFieldBegin("productIds", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ProductIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.ProductIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productIds: %s", p, err); }
  }
  return err
}

func (p *ViewRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.ViewNames != nil {
    if p.IsSetViewNames() {
      if err := oprot.WriteFieldBegin("viewNames", thrift.LIST, 2); err != nil {
        return fmt.Errorf("%T write field begin error 2:viewNames: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRING, len(p.ViewNames)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.ViewNames {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 2:viewNames: %s", p, err); }
    }
  }
  return err
}

func (p *ViewRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 3); err != nil {
      return fmt.Errorf("%T write field begin error 3:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 3:baseRequest: %s", p, err); }
  }
  return err
}

func (p *ViewRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ViewRequest(%+v)", *p)
}

type ViewResult struct {
  ProductViewMap map[ProductID]*ViewsJson `thrift:"productViewMap,1"`
  InvalidProductIds []ProductID `thrift:"invalidProductIds,2"`
  BaseResult *BaseResult `thrift:"baseResult,3"`
}

func NewViewResult() *ViewResult {
  return &ViewResult{}
}

func (p *ViewResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *ViewResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ViewResult)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ProductViewMap = make(map[ProductID]*ViewsJson, size)
  for i := 0; i < size; i ++ {
var _key58 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key58 = ProductID(v)
}
    _val59 := NewViewsJson()
    if err := _val59.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val59)
    }
    p.ProductViewMap[_key58] = _val59
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ViewResult)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.InvalidProductIds = make([]ProductID, 0, size)
  for i := 0; i < size; i ++ {
var _elem60 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem60 = ProductID(v)
}
    p.InvalidProductIds = append(p.InvalidProductIds, _elem60)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ViewResult)  readField3(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *ViewResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ViewResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ViewResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductViewMap != nil {
    if err := oprot.WriteFieldBegin("productViewMap", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productViewMap: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ProductViewMap)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.ProductViewMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productViewMap: %s", p, err); }
  }
  return err
}

func (p *ViewResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.InvalidProductIds != nil {
    if err := oprot.WriteFieldBegin("invalidProductIds", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:invalidProductIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.InvalidProductIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.InvalidProductIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:invalidProductIds: %s", p, err); }
  }
  return err
}

func (p *ViewResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *ViewResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ViewResult(%+v)", *p)
}

type ViewDefinitionRequest struct {
  Verticals []string `thrift:"verticals,1"`
  ViewNames []string `thrift:"viewNames,2"`
  BaseRequest *BaseRequest `thrift:"baseRequest,3,required"`
}

func NewViewDefinitionRequest() *ViewDefinitionRequest {
  return &ViewDefinitionRequest{}
}

func (p *ViewDefinitionRequest) IsSetViewNames() bool {
  return p.ViewNames != nil && len(p.ViewNames) > 0
}

func (p *ViewDefinitionRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ViewDefinitionRequest)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.Verticals = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem61 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem61 = v
}
    p.Verticals = append(p.Verticals, _elem61)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ViewDefinitionRequest)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ViewNames = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem62 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem62 = v
}
    p.ViewNames = append(p.ViewNames, _elem62)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ViewDefinitionRequest)  readField3(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *ViewDefinitionRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ViewDefinitionRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ViewDefinitionRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.Verticals != nil {
    if err := oprot.WriteFieldBegin("verticals", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:verticals: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Verticals)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.Verticals {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:verticals: %s", p, err); }
  }
  return err
}

func (p *ViewDefinitionRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.ViewNames != nil {
    if p.IsSetViewNames() {
      if err := oprot.WriteFieldBegin("viewNames", thrift.LIST, 2); err != nil {
        return fmt.Errorf("%T write field begin error 2:viewNames: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRING, len(p.ViewNames)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.ViewNames {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 2:viewNames: %s", p, err); }
    }
  }
  return err
}

func (p *ViewDefinitionRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 3); err != nil {
      return fmt.Errorf("%T write field begin error 3:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 3:baseRequest: %s", p, err); }
  }
  return err
}

func (p *ViewDefinitionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ViewDefinitionRequest(%+v)", *p)
}

type ViewDefinitionResult struct {
  ViewDefinitionMap map[string]*DefinitionJson `thrift:"viewDefinitionMap,1"`
  InvalidVerticals []string `thrift:"invalidVerticals,2"`
  BaseResult *BaseResult `thrift:"baseResult,3"`
}

func NewViewDefinitionResult() *ViewDefinitionResult {
  return &ViewDefinitionResult{}
}

func (p *ViewDefinitionResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *ViewDefinitionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ViewDefinitionResult)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ViewDefinitionMap = make(map[string]*DefinitionJson, size)
  for i := 0; i < size; i ++ {
var _key63 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key63 = v
}
    _val64 := NewDefinitionJson()
    if err := _val64.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val64)
    }
    p.ViewDefinitionMap[_key63] = _val64
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ViewDefinitionResult)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.InvalidVerticals = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem65 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem65 = v
}
    p.InvalidVerticals = append(p.InvalidVerticals, _elem65)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ViewDefinitionResult)  readField3(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *ViewDefinitionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ViewDefinitionResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ViewDefinitionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ViewDefinitionMap != nil {
    if err := oprot.WriteFieldBegin("viewDefinitionMap", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:viewDefinitionMap: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ViewDefinitionMap)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.ViewDefinitionMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:viewDefinitionMap: %s", p, err); }
  }
  return err
}

func (p *ViewDefinitionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.InvalidVerticals != nil {
    if err := oprot.WriteFieldBegin("invalidVerticals", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:invalidVerticals: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.InvalidVerticals)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.InvalidVerticals {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:invalidVerticals: %s", p, err); }
  }
  return err
}

func (p *ViewDefinitionResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *ViewDefinitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ViewDefinitionResult(%+v)", *p)
}

type ContributorInfoRequest struct {
  Ids []string `thrift:"ids,1"`
  BaseRequest *BaseRequest `thrift:"baseRequest,2,required"`
}

func NewContributorInfoRequest() *ContributorInfoRequest {
  return &ContributorInfoRequest{}
}

func (p *ContributorInfoRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ContributorInfoRequest)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.Ids = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem66 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem66 = v
}
    p.Ids = append(p.Ids, _elem66)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ContributorInfoRequest)  readField2(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *ContributorInfoRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ContributorInfoRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ContributorInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.Ids != nil {
    if err := oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:ids: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.Ids {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:ids: %s", p, err); }
  }
  return err
}

func (p *ContributorInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:baseRequest: %s", p, err); }
  }
  return err
}

func (p *ContributorInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContributorInfoRequest(%+v)", *p)
}

type ContributorInfoResult struct {
  IdToContributorMap map[string]*cms.Contributor `thrift:"idToContributorMap,1"`
  UnavailableIds []string `thrift:"unavailableIds,2"`
  BaseResult *BaseResult `thrift:"baseResult,3"`
}

func NewContributorInfoResult() *ContributorInfoResult {
  return &ContributorInfoResult{}
}

func (p *ContributorInfoResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *ContributorInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ContributorInfoResult)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.IdToContributorMap = make(map[string]*cms.Contributor, size)
  for i := 0; i < size; i ++ {
var _key67 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key67 = v
}
    _val68 := cms.NewContributor()
    if err := _val68.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val68)
    }
    p.IdToContributorMap[_key67] = _val68
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ContributorInfoResult)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.UnavailableIds = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem69 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem69 = v
}
    p.UnavailableIds = append(p.UnavailableIds, _elem69)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ContributorInfoResult)  readField3(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *ContributorInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ContributorInfoResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ContributorInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IdToContributorMap != nil {
    if err := oprot.WriteFieldBegin("idToContributorMap", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:idToContributorMap: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.IdToContributorMap)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.IdToContributorMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:idToContributorMap: %s", p, err); }
  }
  return err
}

func (p *ContributorInfoResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.UnavailableIds != nil {
    if err := oprot.WriteFieldBegin("unavailableIds", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:unavailableIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.UnavailableIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.UnavailableIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:unavailableIds: %s", p, err); }
  }
  return err
}

func (p *ContributorInfoResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *ContributorInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContributorInfoResult(%+v)", *p)
}

type ItemsRequest struct {
  ItemIDs []ItemID `thrift:"itemIDs,1"`
  BaseRequest *BaseRequest `thrift:"baseRequest,2,required"`
}

func NewItemsRequest() *ItemsRequest {
  return &ItemsRequest{}
}

func (p *ItemsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ItemsRequest)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ItemIDs = make([]ItemID, 0, size)
  for i := 0; i < size; i ++ {
var _elem70 ItemID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem70 = ItemID(v)
}
    p.ItemIDs = append(p.ItemIDs, _elem70)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ItemsRequest)  readField2(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *ItemsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ItemsRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ItemsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ItemIDs != nil {
    if err := oprot.WriteFieldBegin("itemIDs", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:itemIDs: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ItemIDs)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.ItemIDs {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:itemIDs: %s", p, err); }
  }
  return err
}

func (p *ItemsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:baseRequest: %s", p, err); }
  }
  return err
}

func (p *ItemsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemsRequest(%+v)", *p)
}

type ItemsResult struct {
  ItemsMap map[ItemID][]string `thrift:"itemsMap,1"`
  UnavailableItemIds []ItemID `thrift:"unavailableItemIds,2"`
  BaseResult *BaseResult `thrift:"baseResult,3"`
}

func NewItemsResult() *ItemsResult {
  return &ItemsResult{}
}

func (p *ItemsResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *ItemsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ItemsResult)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ItemsMap = make(map[ItemID][]string, size)
  for i := 0; i < size; i ++ {
var _key71 ItemID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key71 = ItemID(v)
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return fmt.Errorf("error reading list being: %s")
    }
    _val72 := make([]string, 0, size)
    for i := 0; i < size; i ++ {
var _elem73 string
      if v, err := iprot.ReadString(); err != nil {
      return fmt.Errorf("error reading field 0: %s")
} else {
      _elem73 = v
}
      _val72 = append(_val72, _elem73)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return fmt.Errorf("error reading list end: %s")
    }
    p.ItemsMap[_key71] = _val72
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ItemsResult)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.UnavailableItemIds = make([]ItemID, 0, size)
  for i := 0; i < size; i ++ {
var _elem74 ItemID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem74 = ItemID(v)
}
    p.UnavailableItemIds = append(p.UnavailableItemIds, _elem74)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ItemsResult)  readField3(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *ItemsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ItemsResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ItemsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ItemsMap != nil {
    if err := oprot.WriteFieldBegin("itemsMap", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:itemsMap: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.ItemsMap)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.ItemsMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range v {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:itemsMap: %s", p, err); }
  }
  return err
}

func (p *ItemsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.UnavailableItemIds != nil {
    if err := oprot.WriteFieldBegin("unavailableItemIds", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:unavailableItemIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.UnavailableItemIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.UnavailableItemIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:unavailableItemIds: %s", p, err); }
  }
  return err
}

func (p *ItemsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *ItemsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemsResult(%+v)", *p)
}

type ProductDataOptions struct {
  AttributeNames []string `thrift:"attributeNames,1"`
  ViewNames []string `thrift:"viewNames,2"`
  SellerIds []string `thrift:"sellerIds,3"`
  IsRelationshipInfoRequired bool `thrift:"isRelationshipInfoRequired,4"`
  IsStaticContentsRequired bool `thrift:"isStaticContentsRequired,5"`
  IsCategorizationInfoRequired bool `thrift:"isCategorizationInfoRequired,6"`
  IsContributorInfoRequired bool `thrift:"isContributorInfoRequired,7"`
  IsTagInfoRequired bool `thrift:"isTagInfoRequired,8"`
}

func NewProductDataOptions() *ProductDataOptions {
  return &ProductDataOptions{
IsRelationshipInfoRequired: true,

IsStaticContentsRequired: true,

IsCategorizationInfoRequired: true,

IsContributorInfoRequired: true,

IsTagInfoRequired: true,
}
}

func (p *ProductDataOptions) IsSetAttributeNames() bool {
  return p.AttributeNames != nil && len(p.AttributeNames) > 0
}

func (p *ProductDataOptions) IsSetViewNames() bool {
  return p.ViewNames != nil && len(p.ViewNames) > 0
}

func (p *ProductDataOptions) IsSetSellerIds() bool {
  return p.SellerIds != nil && len(p.SellerIds) > 0
}

func (p *ProductDataOptions) IsSetIsRelationshipInfoRequired() bool {
  return p.IsRelationshipInfoRequired != true
}

func (p *ProductDataOptions) IsSetIsStaticContentsRequired() bool {
  return p.IsStaticContentsRequired != true
}

func (p *ProductDataOptions) IsSetIsCategorizationInfoRequired() bool {
  return p.IsCategorizationInfoRequired != true
}

func (p *ProductDataOptions) IsSetIsContributorInfoRequired() bool {
  return p.IsContributorInfoRequired != true
}

func (p *ProductDataOptions) IsSetIsTagInfoRequired() bool {
  return p.IsTagInfoRequired != true
}

func (p *ProductDataOptions) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
case 5:
      if err := p.readField5(iprot); err != nil {
        return err
      }
case 6:
      if err := p.readField6(iprot); err != nil {
        return err
      }
case 7:
      if err := p.readField7(iprot); err != nil {
        return err
      }
case 8:
      if err := p.readField8(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ProductDataOptions)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.AttributeNames = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem75 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem75 = v
}
    p.AttributeNames = append(p.AttributeNames, _elem75)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductDataOptions)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ViewNames = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem76 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem76 = v
}
    p.ViewNames = append(p.ViewNames, _elem76)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductDataOptions)  readField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.SellerIds = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem77 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem77 = v
}
    p.SellerIds = append(p.SellerIds, _elem77)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ProductDataOptions)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 4: %s")
} else {
  p.IsRelationshipInfoRequired = v
}
  return nil
}

func (p *ProductDataOptions)  readField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 5: %s")
} else {
  p.IsStaticContentsRequired = v
}
  return nil
}

func (p *ProductDataOptions)  readField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 6: %s")
} else {
  p.IsCategorizationInfoRequired = v
}
  return nil
}

func (p *ProductDataOptions)  readField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 7: %s")
} else {
  p.IsContributorInfoRequired = v
}
  return nil
}

func (p *ProductDataOptions)  readField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 8: %s")
} else {
  p.IsTagInfoRequired = v
}
  return nil
}

func (p *ProductDataOptions) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProductDataOptions"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ProductDataOptions) writeField1(oprot thrift.TProtocol) (err error) {
  if p.AttributeNames != nil {
    if p.IsSetAttributeNames() {
      if err := oprot.WriteFieldBegin("attributeNames", thrift.LIST, 1); err != nil {
        return fmt.Errorf("%T write field begin error 1:attributeNames: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRING, len(p.AttributeNames)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.AttributeNames {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 1:attributeNames: %s", p, err); }
    }
  }
  return err
}

func (p *ProductDataOptions) writeField2(oprot thrift.TProtocol) (err error) {
  if p.ViewNames != nil {
    if p.IsSetViewNames() {
      if err := oprot.WriteFieldBegin("viewNames", thrift.LIST, 2); err != nil {
        return fmt.Errorf("%T write field begin error 2:viewNames: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRING, len(p.ViewNames)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.ViewNames {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 2:viewNames: %s", p, err); }
    }
  }
  return err
}

func (p *ProductDataOptions) writeField3(oprot thrift.TProtocol) (err error) {
  if p.SellerIds != nil {
    if p.IsSetSellerIds() {
      if err := oprot.WriteFieldBegin("sellerIds", thrift.LIST, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:sellerIds: %s", p, err); }
      if err := oprot.WriteListBegin(thrift.STRING, len(p.SellerIds)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range p.SellerIds {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:sellerIds: %s", p, err); }
    }
  }
  return err
}

func (p *ProductDataOptions) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsRelationshipInfoRequired() {
    if err := oprot.WriteFieldBegin("isRelationshipInfoRequired", thrift.BOOL, 4); err != nil {
      return fmt.Errorf("%T write field begin error 4:isRelationshipInfoRequired: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsRelationshipInfoRequired)); err != nil {
    return fmt.Errorf("%T.isRelationshipInfoRequired (4) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 4:isRelationshipInfoRequired: %s", p, err); }
  }
  return err
}

func (p *ProductDataOptions) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsStaticContentsRequired() {
    if err := oprot.WriteFieldBegin("isStaticContentsRequired", thrift.BOOL, 5); err != nil {
      return fmt.Errorf("%T write field begin error 5:isStaticContentsRequired: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsStaticContentsRequired)); err != nil {
    return fmt.Errorf("%T.isStaticContentsRequired (5) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 5:isStaticContentsRequired: %s", p, err); }
  }
  return err
}

func (p *ProductDataOptions) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsCategorizationInfoRequired() {
    if err := oprot.WriteFieldBegin("isCategorizationInfoRequired", thrift.BOOL, 6); err != nil {
      return fmt.Errorf("%T write field begin error 6:isCategorizationInfoRequired: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsCategorizationInfoRequired)); err != nil {
    return fmt.Errorf("%T.isCategorizationInfoRequired (6) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 6:isCategorizationInfoRequired: %s", p, err); }
  }
  return err
}

func (p *ProductDataOptions) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsContributorInfoRequired() {
    if err := oprot.WriteFieldBegin("isContributorInfoRequired", thrift.BOOL, 7); err != nil {
      return fmt.Errorf("%T write field begin error 7:isContributorInfoRequired: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsContributorInfoRequired)); err != nil {
    return fmt.Errorf("%T.isContributorInfoRequired (7) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 7:isContributorInfoRequired: %s", p, err); }
  }
  return err
}

func (p *ProductDataOptions) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetIsTagInfoRequired() {
    if err := oprot.WriteFieldBegin("isTagInfoRequired", thrift.BOOL, 8); err != nil {
      return fmt.Errorf("%T write field begin error 8:isTagInfoRequired: %s", p, err); }
    if err := oprot.WriteBool(bool(p.IsTagInfoRequired)); err != nil {
    return fmt.Errorf("%T.isTagInfoRequired (8) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 8:isTagInfoRequired: %s", p, err); }
  }
  return err
}

func (p *ProductDataOptions) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductDataOptions(%+v)", *p)
}

type ItemDetailsRequest struct {
  ItemIDs []ItemID `thrift:"itemIDs,1"`
  ProductDataOptions *ProductDataOptions `thrift:"productDataOptions,2"`
  BaseRequest *BaseRequest `thrift:"baseRequest,3,required"`
}

func NewItemDetailsRequest() *ItemDetailsRequest {
  return &ItemDetailsRequest{}
}

func (p *ItemDetailsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ItemDetailsRequest)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ItemIDs = make([]ItemID, 0, size)
  for i := 0; i < size; i ++ {
var _elem78 ItemID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem78 = ItemID(v)
}
    p.ItemIDs = append(p.ItemIDs, _elem78)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ItemDetailsRequest)  readField2(iprot thrift.TProtocol) error {
  p.ProductDataOptions = NewProductDataOptions()
  if err := p.ProductDataOptions.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.ProductDataOptions)
  }
  return nil
}

func (p *ItemDetailsRequest)  readField3(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *ItemDetailsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ItemDetailsRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ItemDetailsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ItemIDs != nil {
    if err := oprot.WriteFieldBegin("itemIDs", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:itemIDs: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ItemIDs)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.ItemIDs {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:itemIDs: %s", p, err); }
  }
  return err
}

func (p *ItemDetailsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.ProductDataOptions != nil {
    if err := oprot.WriteFieldBegin("productDataOptions", thrift.STRUCT, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:productDataOptions: %s", p, err); }
    if err := p.ProductDataOptions.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.ProductDataOptions)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:productDataOptions: %s", p, err); }
  }
  return err
}

func (p *ItemDetailsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 3); err != nil {
      return fmt.Errorf("%T write field begin error 3:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 3:baseRequest: %s", p, err); }
  }
  return err
}

func (p *ItemDetailsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemDetailsRequest(%+v)", *p)
}

type ItemDetail struct {
  ItemID ItemID `thrift:"itemID,1"`
  Products map[ProductID]*ProductData `thrift:"products,2"`
}

func NewItemDetail() *ItemDetail {
  return &ItemDetail{}
}

func (p *ItemDetail) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ItemDetail)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.ItemID = ItemID(v)
}
  return nil
}

func (p *ItemDetail)  readField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.Products = make(map[ProductID]*ProductData, size)
  for i := 0; i < size; i ++ {
var _key79 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key79 = ProductID(v)
}
    _val80 := NewProductData()
    if err := _val80.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val80)
    }
    p.Products[_key79] = _val80
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ItemDetail) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ItemDetail"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ItemDetail) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemID", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:itemID: %s", p, err); }
  if err := oprot.WriteString(string(p.ItemID)); err != nil {
  return fmt.Errorf("%T.itemID (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:itemID: %s", p, err); }
  return err
}

func (p *ItemDetail) writeField2(oprot thrift.TProtocol) (err error) {
  if p.Products != nil {
    if err := oprot.WriteFieldBegin("products", thrift.MAP, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:products: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Products)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.Products {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:products: %s", p, err); }
  }
  return err
}

func (p *ItemDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemDetail(%+v)", *p)
}

type ItemDetailsResult struct {
  ItemDetails map[ItemID]*ItemDetail `thrift:"itemDetails,1"`
  UnavailableItemIDs []ItemID `thrift:"unavailableItemIDs,2"`
  BaseResult *BaseResult `thrift:"baseResult,3"`
}

func NewItemDetailsResult() *ItemDetailsResult {
  return &ItemDetailsResult{}
}

func (p *ItemDetailsResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *ItemDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ItemDetailsResult)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ItemDetails = make(map[ItemID]*ItemDetail, size)
  for i := 0; i < size; i ++ {
var _key81 ItemID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key81 = ItemID(v)
}
    _val82 := NewItemDetail()
    if err := _val82.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val82)
    }
    p.ItemDetails[_key81] = _val82
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ItemDetailsResult)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.UnavailableItemIDs = make([]ItemID, 0, size)
  for i := 0; i < size; i ++ {
var _elem83 ItemID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem83 = ItemID(v)
}
    p.UnavailableItemIDs = append(p.UnavailableItemIDs, _elem83)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ItemDetailsResult)  readField3(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *ItemDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ItemDetailsResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ItemDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ItemDetails != nil {
    if err := oprot.WriteFieldBegin("itemDetails", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:itemDetails: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ItemDetails)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.ItemDetails {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:itemDetails: %s", p, err); }
  }
  return err
}

func (p *ItemDetailsResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.UnavailableItemIDs != nil {
    if err := oprot.WriteFieldBegin("unavailableItemIDs", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:unavailableItemIDs: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.UnavailableItemIDs)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.UnavailableItemIDs {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:unavailableItemIDs: %s", p, err); }
  }
  return err
}

func (p *ItemDetailsResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *ItemDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemDetailsResult(%+v)", *p)
}

type CategoryTreeRequest struct {
  VerticalName string `thrift:"verticalName,1"`
  NodeId int32 `thrift:"nodeId,2"`
  MaxDepth int16 `thrift:"maxDepth,3"`
  BaseRequest *BaseRequest `thrift:"baseRequest,4,required"`
}

func NewCategoryTreeRequest() *CategoryTreeRequest {
  return &CategoryTreeRequest{}
}

func (p *CategoryTreeRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *CategoryTreeRequest)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.VerticalName = v
}
  return nil
}

func (p *CategoryTreeRequest)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.NodeId = v
}
  return nil
}

func (p *CategoryTreeRequest)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.MaxDepth = v
}
  return nil
}

func (p *CategoryTreeRequest)  readField4(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *CategoryTreeRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CategoryTreeRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *CategoryTreeRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verticalName", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:verticalName: %s", p, err); }
  if err := oprot.WriteString(string(p.VerticalName)); err != nil {
  return fmt.Errorf("%T.verticalName (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:verticalName: %s", p, err); }
  return err
}

func (p *CategoryTreeRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nodeId", thrift.I32, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:nodeId: %s", p, err); }
  if err := oprot.WriteI32(int32(p.NodeId)); err != nil {
  return fmt.Errorf("%T.nodeId (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:nodeId: %s", p, err); }
  return err
}

func (p *CategoryTreeRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxDepth", thrift.I16, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:maxDepth: %s", p, err); }
  if err := oprot.WriteI16(int16(p.MaxDepth)); err != nil {
  return fmt.Errorf("%T.maxDepth (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:maxDepth: %s", p, err); }
  return err
}

func (p *CategoryTreeRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 4); err != nil {
      return fmt.Errorf("%T write field begin error 4:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 4:baseRequest: %s", p, err); }
  }
  return err
}

func (p *CategoryTreeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryTreeRequest(%+v)", *p)
}

type CategoryTreeResult struct {
  CurrentNode *cms.CategoryNodeInfo `thrift:"currentNode,1"`
  NodePath []*cms.CategoryNodeInfo `thrift:"nodePath,2"`
  Children map[int32][]*cms.CategoryNodeInfo `thrift:"children,3"`
  BaseResult *BaseResult `thrift:"baseResult,4"`
}

func NewCategoryTreeResult() *CategoryTreeResult {
  return &CategoryTreeResult{}
}

func (p *CategoryTreeResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *CategoryTreeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *CategoryTreeResult)  readField1(iprot thrift.TProtocol) error {
  p.CurrentNode = cms.NewCategoryNodeInfo()
  if err := p.CurrentNode.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CurrentNode)
  }
  return nil
}

func (p *CategoryTreeResult)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.NodePath = make([]*cms.CategoryNodeInfo, 0, size)
  for i := 0; i < size; i ++ {
    _elem84 := cms.NewCategoryNodeInfo()
    if err := _elem84.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _elem84)
    }
    p.NodePath = append(p.NodePath, _elem84)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *CategoryTreeResult)  readField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.Children = make(map[int32][]*cms.CategoryNodeInfo, size)
  for i := 0; i < size; i ++ {
var _key85 int32
    if v, err := iprot.ReadI32(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key85 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return fmt.Errorf("error reading list being: %s")
    }
    _val86 := make([]*cms.CategoryNodeInfo, 0, size)
    for i := 0; i < size; i ++ {
      _elem87 := cms.NewCategoryNodeInfo()
      if err := _elem87.Read(iprot); err != nil {
        return fmt.Errorf("%T error reading struct: %s", _elem87)
      }
      _val86 = append(_val86, _elem87)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return fmt.Errorf("error reading list end: %s")
    }
    p.Children[_key85] = _val86
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *CategoryTreeResult)  readField4(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *CategoryTreeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CategoryTreeResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *CategoryTreeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CurrentNode != nil {
    if err := oprot.WriteFieldBegin("currentNode", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:currentNode: %s", p, err); }
    if err := p.CurrentNode.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CurrentNode)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:currentNode: %s", p, err); }
  }
  return err
}

func (p *CategoryTreeResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.NodePath != nil {
    if err := oprot.WriteFieldBegin("nodePath", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:nodePath: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.NodePath)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.NodePath {
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:nodePath: %s", p, err); }
  }
  return err
}

func (p *CategoryTreeResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.Children != nil {
    if err := oprot.WriteFieldBegin("children", thrift.MAP, 3); err != nil {
      return fmt.Errorf("%T write field begin error 3:children: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.Children)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.Children {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range v {
        if err := v.Write(oprot); err != nil {
          return fmt.Errorf("%T error writing struct: %s", v)
        }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 3:children: %s", p, err); }
  }
  return err
}

func (p *CategoryTreeResult) writeField4(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 4); err != nil {
        return fmt.Errorf("%T write field begin error 4:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 4:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *CategoryTreeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryTreeResult(%+v)", *p)
}

type CategoryPathRequest struct {
  ProductIDs []ProductID `thrift:"productIDs,1"`
  BaseRequest *BaseRequest `thrift:"baseRequest,2,required"`
}

func NewCategoryPathRequest() *CategoryPathRequest {
  return &CategoryPathRequest{}
}

func (p *CategoryPathRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *CategoryPathRequest)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ProductIDs = make([]ProductID, 0, size)
  for i := 0; i < size; i ++ {
var _elem88 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem88 = ProductID(v)
}
    p.ProductIDs = append(p.ProductIDs, _elem88)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *CategoryPathRequest)  readField2(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *CategoryPathRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CategoryPathRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *CategoryPathRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductIDs != nil {
    if err := oprot.WriteFieldBegin("productIDs", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productIDs: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ProductIDs)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.ProductIDs {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productIDs: %s", p, err); }
  }
  return err
}

func (p *CategoryPathRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:baseRequest: %s", p, err); }
  }
  return err
}

func (p *CategoryPathRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryPathRequest(%+v)", *p)
}

type CategoryPathResult struct {
  CategoryPath map[string][]string `thrift:"categoryPath,1"`
  BaseResult *BaseResult `thrift:"baseResult,2"`
}

func NewCategoryPathResult() *CategoryPathResult {
  return &CategoryPathResult{}
}

func (p *CategoryPathResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *CategoryPathResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *CategoryPathResult)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.CategoryPath = make(map[string][]string, size)
  for i := 0; i < size; i ++ {
var _key89 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key89 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return fmt.Errorf("error reading list being: %s")
    }
    _val90 := make([]string, 0, size)
    for i := 0; i < size; i ++ {
var _elem91 string
      if v, err := iprot.ReadString(); err != nil {
      return fmt.Errorf("error reading field 0: %s")
} else {
      _elem91 = v
}
      _val90 = append(_val90, _elem91)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return fmt.Errorf("error reading list end: %s")
    }
    p.CategoryPath[_key89] = _val90
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *CategoryPathResult)  readField2(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *CategoryPathResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CategoryPathResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *CategoryPathResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CategoryPath != nil {
    if err := oprot.WriteFieldBegin("categoryPath", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:categoryPath: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.CategoryPath)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.CategoryPath {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range v {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:categoryPath: %s", p, err); }
  }
  return err
}

func (p *CategoryPathResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 2); err != nil {
        return fmt.Errorf("%T write field begin error 2:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 2:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *CategoryPathResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryPathResult(%+v)", *p)
}

type CategoryNodeInfoRequest struct {
  VerticalName string `thrift:"verticalName,1"`
  CategoryNodeList []int32 `thrift:"categoryNodeList,2"`
  StartIndex int32 `thrift:"startIndex,3"`
  RecordSize int32 `thrift:"recordSize,4"`
  BaseRequest *BaseRequest `thrift:"baseRequest,5,required"`
}

func NewCategoryNodeInfoRequest() *CategoryNodeInfoRequest {
  return &CategoryNodeInfoRequest{}
}

func (p *CategoryNodeInfoRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
case 5:
      if err := p.readField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *CategoryNodeInfoRequest)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.VerticalName = v
}
  return nil
}

func (p *CategoryNodeInfoRequest)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.CategoryNodeList = make([]int32, 0, size)
  for i := 0; i < size; i ++ {
var _elem92 int32
    if v, err := iprot.ReadI32(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem92 = v
}
    p.CategoryNodeList = append(p.CategoryNodeList, _elem92)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *CategoryNodeInfoRequest)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.StartIndex = v
}
  return nil
}

func (p *CategoryNodeInfoRequest)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 4: %s")
} else {
  p.RecordSize = v
}
  return nil
}

func (p *CategoryNodeInfoRequest)  readField5(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *CategoryNodeInfoRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CategoryNodeInfoRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *CategoryNodeInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verticalName", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:verticalName: %s", p, err); }
  if err := oprot.WriteString(string(p.VerticalName)); err != nil {
  return fmt.Errorf("%T.verticalName (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:verticalName: %s", p, err); }
  return err
}

func (p *CategoryNodeInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.CategoryNodeList != nil {
    if err := oprot.WriteFieldBegin("categoryNodeList", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:categoryNodeList: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.I32, len(p.CategoryNodeList)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.CategoryNodeList {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:categoryNodeList: %s", p, err); }
  }
  return err
}

func (p *CategoryNodeInfoRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startIndex", thrift.I32, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:startIndex: %s", p, err); }
  if err := oprot.WriteI32(int32(p.StartIndex)); err != nil {
  return fmt.Errorf("%T.startIndex (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:startIndex: %s", p, err); }
  return err
}

func (p *CategoryNodeInfoRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recordSize", thrift.I32, 4); err != nil {
    return fmt.Errorf("%T write field begin error 4:recordSize: %s", p, err); }
  if err := oprot.WriteI32(int32(p.RecordSize)); err != nil {
  return fmt.Errorf("%T.recordSize (4) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 4:recordSize: %s", p, err); }
  return err
}

func (p *CategoryNodeInfoRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 5); err != nil {
      return fmt.Errorf("%T write field begin error 5:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 5:baseRequest: %s", p, err); }
  }
  return err
}

func (p *CategoryNodeInfoRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryNodeInfoRequest(%+v)", *p)
}

type CategoryNodeInfoResult struct {
  ProductIDs map[int32][]ProductID `thrift:"productIDs,1"`
  BaseResult *BaseResult `thrift:"baseResult,2"`
}

func NewCategoryNodeInfoResult() *CategoryNodeInfoResult {
  return &CategoryNodeInfoResult{}
}

func (p *CategoryNodeInfoResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *CategoryNodeInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *CategoryNodeInfoResult)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ProductIDs = make(map[int32][]ProductID, size)
  for i := 0; i < size; i ++ {
var _key93 int32
    if v, err := iprot.ReadI32(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key93 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return fmt.Errorf("error reading list being: %s")
    }
    _val94 := make([]ProductID, 0, size)
    for i := 0; i < size; i ++ {
var _elem95 ProductID
      if v, err := iprot.ReadString(); err != nil {
      return fmt.Errorf("error reading field 0: %s")
} else {
      _elem95 = ProductID(v)
}
      _val94 = append(_val94, _elem95)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return fmt.Errorf("error reading list end: %s")
    }
    p.ProductIDs[_key93] = _val94
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *CategoryNodeInfoResult)  readField2(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *CategoryNodeInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CategoryNodeInfoResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *CategoryNodeInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductIDs != nil {
    if err := oprot.WriteFieldBegin("productIDs", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productIDs: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.LIST, len(p.ProductIDs)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.ProductIDs {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := oprot.WriteListBegin(thrift.STRING, len(v)); err != nil {
        return fmt.Errorf("error writing list begin: %s")
      }
      for _, v := range v {
        if err := oprot.WriteString(string(v)); err != nil {
        return fmt.Errorf("%T. (0) field write error: %s", p) }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return fmt.Errorf("error writing list end: %s")
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productIDs: %s", p, err); }
  }
  return err
}

func (p *CategoryNodeInfoResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 2); err != nil {
        return fmt.Errorf("%T write field begin error 2:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 2:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *CategoryNodeInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CategoryNodeInfoResult(%+v)", *p)
}

type ItemHistoryRequest struct {
  ProductIds []ProductID `thrift:"productIds,1"`
  BaseRequest *BaseRequest `thrift:"baseRequest,2,required"`
}

func NewItemHistoryRequest() *ItemHistoryRequest {
  return &ItemHistoryRequest{}
}

func (p *ItemHistoryRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ItemHistoryRequest)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ProductIds = make([]ProductID, 0, size)
  for i := 0; i < size; i ++ {
var _elem96 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem96 = ProductID(v)
}
    p.ProductIds = append(p.ProductIds, _elem96)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ItemHistoryRequest)  readField2(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *ItemHistoryRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ItemHistoryRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ItemHistoryRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductIds != nil {
    if err := oprot.WriteFieldBegin("productIds", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ProductIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.ProductIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productIds: %s", p, err); }
  }
  return err
}

func (p *ItemHistoryRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:baseRequest: %s", p, err); }
  }
  return err
}

func (p *ItemHistoryRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemHistoryRequest(%+v)", *p)
}

type ItemHistory struct {
  CurrentItemID string `thrift:"currentItemID,1"`
  PreviousIDs []string `thrift:"previousIDs,2"`
}

func NewItemHistory() *ItemHistory {
  return &ItemHistory{}
}

func (p *ItemHistory) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ItemHistory)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.CurrentItemID = v
}
  return nil
}

func (p *ItemHistory)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.PreviousIDs = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem97 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem97 = v
}
    p.PreviousIDs = append(p.PreviousIDs, _elem97)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ItemHistory) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ItemHistory"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ItemHistory) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("currentItemID", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:currentItemID: %s", p, err); }
  if err := oprot.WriteString(string(p.CurrentItemID)); err != nil {
  return fmt.Errorf("%T.currentItemID (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:currentItemID: %s", p, err); }
  return err
}

func (p *ItemHistory) writeField2(oprot thrift.TProtocol) (err error) {
  if p.PreviousIDs != nil {
    if err := oprot.WriteFieldBegin("previousIDs", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:previousIDs: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.PreviousIDs)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.PreviousIDs {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:previousIDs: %s", p, err); }
  }
  return err
}

func (p *ItemHistory) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemHistory(%+v)", *p)
}

type ItemHistoryResult struct {
  HistoryMap map[ProductID]*ItemHistory `thrift:"historyMap,1"`
  UnavailablePids []ProductID `thrift:"unavailablePids,2"`
  BaseResult *BaseResult `thrift:"baseResult,3"`
}

func NewItemHistoryResult() *ItemHistoryResult {
  return &ItemHistoryResult{}
}

func (p *ItemHistoryResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *ItemHistoryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ItemHistoryResult)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.HistoryMap = make(map[ProductID]*ItemHistory, size)
  for i := 0; i < size; i ++ {
var _key98 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key98 = ProductID(v)
}
    _val99 := NewItemHistory()
    if err := _val99.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val99)
    }
    p.HistoryMap[_key98] = _val99
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *ItemHistoryResult)  readField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.UnavailablePids = make([]ProductID, 0, size)
  for i := 0; i < size; i ++ {
var _elem100 ProductID
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem100 = ProductID(v)
}
    p.UnavailablePids = append(p.UnavailablePids, _elem100)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *ItemHistoryResult)  readField3(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *ItemHistoryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ItemHistoryResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ItemHistoryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.HistoryMap != nil {
    if err := oprot.WriteFieldBegin("historyMap", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:historyMap: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.HistoryMap)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.HistoryMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:historyMap: %s", p, err); }
  }
  return err
}

func (p *ItemHistoryResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.UnavailablePids != nil {
    if err := oprot.WriteFieldBegin("unavailablePids", thrift.LIST, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:unavailablePids: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.UnavailablePids)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.UnavailablePids {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:unavailablePids: %s", p, err); }
  }
  return err
}

func (p *ItemHistoryResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 3); err != nil {
        return fmt.Errorf("%T write field begin error 3:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 3:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *ItemHistoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ItemHistoryResult(%+v)", *p)
}

type AttributeDefinition struct {
  AttributeName string `thrift:"attributeName,1"`
  DataType DataType `thrift:"dataType,2"`
  IsMultivalued bool `thrift:"isMultivalued,3"`
  HasGroup bool `thrift:"hasGroup,4"`
  GroupName string `thrift:"groupName,5"`
  Tags []string `thrift:"tags,6"`
}

func NewAttributeDefinition() *AttributeDefinition {
  return &AttributeDefinition{
DataType: math.MinInt32 - 1, // unset sentinal value
}
}

func (p *AttributeDefinition) IsSetDataType() bool {
  return int64(p.DataType) != math.MinInt32 - 1
}

func (p *AttributeDefinition) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
case 5:
      if err := p.readField5(iprot); err != nil {
        return err
      }
case 6:
      if err := p.readField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *AttributeDefinition)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.AttributeName = v
}
  return nil
}

func (p *AttributeDefinition)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.DataType = DataType(v)
}
  return nil
}

func (p *AttributeDefinition)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.IsMultivalued = v
}
  return nil
}

func (p *AttributeDefinition)  readField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return fmt.Errorf("error reading field 4: %s")
} else {
  p.HasGroup = v
}
  return nil
}

func (p *AttributeDefinition)  readField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 5: %s")
} else {
  p.GroupName = v
}
  return nil
}

func (p *AttributeDefinition)  readField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.Tags = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem101 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem101 = v
}
    p.Tags = append(p.Tags, _elem101)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *AttributeDefinition) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AttributeDefinition"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *AttributeDefinition) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attributeName", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:attributeName: %s", p, err); }
  if err := oprot.WriteString(string(p.AttributeName)); err != nil {
  return fmt.Errorf("%T.attributeName (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:attributeName: %s", p, err); }
  return err
}

func (p *AttributeDefinition) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDataType() {
    if err := oprot.WriteFieldBegin("dataType", thrift.I32, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:dataType: %s", p, err); }
    if err := oprot.WriteI32(int32(p.DataType)); err != nil {
    return fmt.Errorf("%T.dataType (2) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:dataType: %s", p, err); }
  }
  return err
}

func (p *AttributeDefinition) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("isMultivalued", thrift.BOOL, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:isMultivalued: %s", p, err); }
  if err := oprot.WriteBool(bool(p.IsMultivalued)); err != nil {
  return fmt.Errorf("%T.isMultivalued (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:isMultivalued: %s", p, err); }
  return err
}

func (p *AttributeDefinition) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasGroup", thrift.BOOL, 4); err != nil {
    return fmt.Errorf("%T write field begin error 4:hasGroup: %s", p, err); }
  if err := oprot.WriteBool(bool(p.HasGroup)); err != nil {
  return fmt.Errorf("%T.hasGroup (4) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 4:hasGroup: %s", p, err); }
  return err
}

func (p *AttributeDefinition) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupName", thrift.STRING, 5); err != nil {
    return fmt.Errorf("%T write field begin error 5:groupName: %s", p, err); }
  if err := oprot.WriteString(string(p.GroupName)); err != nil {
  return fmt.Errorf("%T.groupName (5) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 5:groupName: %s", p, err); }
  return err
}

func (p *AttributeDefinition) writeField6(oprot thrift.TProtocol) (err error) {
  if p.Tags != nil {
    if err := oprot.WriteFieldBegin("tags", thrift.LIST, 6); err != nil {
      return fmt.Errorf("%T write field begin error 6:tags: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Tags)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.Tags {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 6:tags: %s", p, err); }
  }
  return err
}

func (p *AttributeDefinition) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AttributeDefinition(%+v)", *p)
}

type VerticalAttributeDefinitionRequest struct {
  VerticalName string `thrift:"verticalName,1"`
  BaseRequest *BaseRequest `thrift:"baseRequest,2,required"`
}

func NewVerticalAttributeDefinitionRequest() *VerticalAttributeDefinitionRequest {
  return &VerticalAttributeDefinitionRequest{}
}

func (p *VerticalAttributeDefinitionRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *VerticalAttributeDefinitionRequest)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.VerticalName = v
}
  return nil
}

func (p *VerticalAttributeDefinitionRequest)  readField2(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *VerticalAttributeDefinitionRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VerticalAttributeDefinitionRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *VerticalAttributeDefinitionRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verticalName", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:verticalName: %s", p, err); }
  if err := oprot.WriteString(string(p.VerticalName)); err != nil {
  return fmt.Errorf("%T.verticalName (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:verticalName: %s", p, err); }
  return err
}

func (p *VerticalAttributeDefinitionRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:baseRequest: %s", p, err); }
  }
  return err
}

func (p *VerticalAttributeDefinitionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerticalAttributeDefinitionRequest(%+v)", *p)
}

type VerticalAttributeDefinitionResult struct {
  AttributeDefinitions []*AttributeDefinition `thrift:"attributeDefinitions,1"`
  BaseResult *BaseResult `thrift:"baseResult,2"`
}

func NewVerticalAttributeDefinitionResult() *VerticalAttributeDefinitionResult {
  return &VerticalAttributeDefinitionResult{}
}

func (p *VerticalAttributeDefinitionResult) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *VerticalAttributeDefinitionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *VerticalAttributeDefinitionResult)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.AttributeDefinitions = make([]*AttributeDefinition, 0, size)
  for i := 0; i < size; i ++ {
    _elem102 := NewAttributeDefinition()
    if err := _elem102.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _elem102)
    }
    p.AttributeDefinitions = append(p.AttributeDefinitions, _elem102)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *VerticalAttributeDefinitionResult)  readField2(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *VerticalAttributeDefinitionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VerticalAttributeDefinitionResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *VerticalAttributeDefinitionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.AttributeDefinitions != nil {
    if err := oprot.WriteFieldBegin("attributeDefinitions", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:attributeDefinitions: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AttributeDefinitions)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.AttributeDefinitions {
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:attributeDefinitions: %s", p, err); }
  }
  return err
}

func (p *VerticalAttributeDefinitionResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 2); err != nil {
        return fmt.Errorf("%T write field begin error 2:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 2:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *VerticalAttributeDefinitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerticalAttributeDefinitionResult(%+v)", *p)
}

type ProductMetadata struct {
  Id string `thrift:"id,1"`
  Vertical string `thrift:"vertical,2"`
  ItemID string `thrift:"itemID,3"`
  CategorizationInfo *cms.CategorizationInfo `thrift:"categorizationInfo,4"`
}

func NewProductMetadata() *ProductMetadata {
  return &ProductMetadata{}
}

func (p *ProductMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ProductMetadata)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Id = v
}
  return nil
}

func (p *ProductMetadata)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.Vertical = v
}
  return nil
}

func (p *ProductMetadata)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.ItemID = v
}
  return nil
}

func (p *ProductMetadata)  readField4(iprot thrift.TProtocol) error {
  p.CategorizationInfo = cms.NewCategorizationInfo()
  if err := p.CategorizationInfo.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CategorizationInfo)
  }
  return nil
}

func (p *ProductMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProductMetadata"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ProductMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:id: %s", p, err); }
  if err := oprot.WriteString(string(p.Id)); err != nil {
  return fmt.Errorf("%T.id (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:id: %s", p, err); }
  return err
}

func (p *ProductMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("vertical", thrift.STRING, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:vertical: %s", p, err); }
  if err := oprot.WriteString(string(p.Vertical)); err != nil {
  return fmt.Errorf("%T.vertical (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:vertical: %s", p, err); }
  return err
}

func (p *ProductMetadata) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itemID", thrift.STRING, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:itemID: %s", p, err); }
  if err := oprot.WriteString(string(p.ItemID)); err != nil {
  return fmt.Errorf("%T.itemID (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:itemID: %s", p, err); }
  return err
}

func (p *ProductMetadata) writeField4(oprot thrift.TProtocol) (err error) {
  if p.CategorizationInfo != nil {
    if err := oprot.WriteFieldBegin("categorizationInfo", thrift.STRUCT, 4); err != nil {
      return fmt.Errorf("%T write field begin error 4:categorizationInfo: %s", p, err); }
    if err := p.CategorizationInfo.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CategorizationInfo)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 4:categorizationInfo: %s", p, err); }
  }
  return err
}

func (p *ProductMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductMetadata(%+v)", *p)
}

type MetaDataRequest struct {
  ProductIds []string `thrift:"productIds,1"`
  BaseRequest *BaseRequest `thrift:"baseRequest,2,required"`
}

func NewMetaDataRequest() *MetaDataRequest {
  return &MetaDataRequest{}
}

func (p *MetaDataRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *MetaDataRequest)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.ProductIds = make([]string, 0, size)
  for i := 0; i < size; i ++ {
var _elem103 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _elem103 = v
}
    p.ProductIds = append(p.ProductIds, _elem103)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *MetaDataRequest)  readField2(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *MetaDataRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MetaDataRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *MetaDataRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductIds != nil {
    if err := oprot.WriteFieldBegin("productIds", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productIds: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.ProductIds)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.ProductIds {
      if err := oprot.WriteString(string(v)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productIds: %s", p, err); }
  }
  return err
}

func (p *MetaDataRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:baseRequest: %s", p, err); }
  }
  return err
}

func (p *MetaDataRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaDataRequest(%+v)", *p)
}

type MetaDataResponse struct {
  ProductMetadataMap map[string]*ProductMetadata `thrift:"productMetadataMap,1"`
  BaseResult *BaseResult `thrift:"baseResult,2"`
}

func NewMetaDataResponse() *MetaDataResponse {
  return &MetaDataResponse{}
}

func (p *MetaDataResponse) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *MetaDataResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *MetaDataResponse)  readField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.ProductMetadataMap = make(map[string]*ProductMetadata, size)
  for i := 0; i < size; i ++ {
var _key104 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key104 = v
}
    _val105 := NewProductMetadata()
    if err := _val105.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val105)
    }
    p.ProductMetadataMap[_key104] = _val105
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *MetaDataResponse)  readField2(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *MetaDataResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MetaDataResponse"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *MetaDataResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductMetadataMap != nil {
    if err := oprot.WriteFieldBegin("productMetadataMap", thrift.MAP, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productMetadataMap: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.ProductMetadataMap)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.ProductMetadataMap {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productMetadataMap: %s", p, err); }
  }
  return err
}

func (p *MetaDataResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 2); err != nil {
        return fmt.Errorf("%T write field begin error 2:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 2:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *MetaDataResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MetaDataResponse(%+v)", *p)
}

type ProductIdForEGVRequest struct {
  Amount int32 `thrift:"amount,1"`
  BaseRequest *BaseRequest `thrift:"baseRequest,2,required"`
}

func NewProductIdForEGVRequest() *ProductIdForEGVRequest {
  return &ProductIdForEGVRequest{}
}

func (p *ProductIdForEGVRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ProductIdForEGVRequest)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Amount = v
}
  return nil
}

func (p *ProductIdForEGVRequest)  readField2(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *ProductIdForEGVRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProductIdForEGVRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ProductIdForEGVRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I32, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:amount: %s", p, err); }
  if err := oprot.WriteI32(int32(p.Amount)); err != nil {
  return fmt.Errorf("%T.amount (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:amount: %s", p, err); }
  return err
}

func (p *ProductIdForEGVRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:baseRequest: %s", p, err); }
  }
  return err
}

func (p *ProductIdForEGVRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductIdForEGVRequest(%+v)", *p)
}

type ProductIdForEGVResponse struct {
  Id string `thrift:"id,1"`
  BaseResult *BaseResult `thrift:"baseResult,2"`
}

func NewProductIdForEGVResponse() *ProductIdForEGVResponse {
  return &ProductIdForEGVResponse{}
}

func (p *ProductIdForEGVResponse) IsSetBaseResult() bool {
  return p.BaseResult != nil
}

func (p *ProductIdForEGVResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *ProductIdForEGVResponse)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Id = v
}
  return nil
}

func (p *ProductIdForEGVResponse)  readField2(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *ProductIdForEGVResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProductIdForEGVResponse"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *ProductIdForEGVResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:id: %s", p, err); }
  if err := oprot.WriteString(string(p.Id)); err != nil {
  return fmt.Errorf("%T.id (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:id: %s", p, err); }
  return err
}

func (p *ProductIdForEGVResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if p.IsSetBaseResult() {
      if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 2); err != nil {
        return fmt.Errorf("%T write field begin error 2:baseResult: %s", p, err); }
      if err := p.BaseResult.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
      }
      if err := oprot.WriteFieldEnd(); err != nil {
        return fmt.Errorf("%T write field end error 2:baseResult: %s", p, err); }
    }
  }
  return err
}

func (p *ProductIdForEGVResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProductIdForEGVResponse(%+v)", *p)
}

type EntityID struct {
  Id string `thrift:"id,1"`
  Namspace string `thrift:"namspace,2"`
  EntityType EntityType `thrift:"entityType,3"`
}

func NewEntityID() *EntityID {
  return &EntityID{
EntityType: math.MinInt32 - 1, // unset sentinal value
}
}

func (p *EntityID) IsSetEntityType() bool {
  return int64(p.EntityType) != math.MinInt32 - 1
}

func (p *EntityID) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *EntityID)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Id = v
}
  return nil
}

func (p *EntityID)  readField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 2: %s")
} else {
  p.Namspace = v
}
  return nil
}

func (p *EntityID)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.EntityType = EntityType(v)
}
  return nil
}

func (p *EntityID) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EntityID"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *EntityID) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:id: %s", p, err); }
  if err := oprot.WriteString(string(p.Id)); err != nil {
  return fmt.Errorf("%T.id (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:id: %s", p, err); }
  return err
}

func (p *EntityID) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("namspace", thrift.STRING, 2); err != nil {
    return fmt.Errorf("%T write field begin error 2:namspace: %s", p, err); }
  if err := oprot.WriteString(string(p.Namspace)); err != nil {
  return fmt.Errorf("%T.namspace (2) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 2:namspace: %s", p, err); }
  return err
}

func (p *EntityID) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityType() {
    if err := oprot.WriteFieldBegin("entityType", thrift.I32, 3); err != nil {
      return fmt.Errorf("%T write field begin error 3:entityType: %s", p, err); }
    if err := oprot.WriteI32(int32(p.EntityType)); err != nil {
    return fmt.Errorf("%T.entityType (3) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 3:entityType: %s", p, err); }
  }
  return err
}

func (p *EntityID) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntityID(%+v)", *p)
}

type EntitySearchRequest struct {
  EntityType EntityType `thrift:"entityType,1"`
  SearchableAttributeData map[string]*cms.Attribute `thrift:"searchableAttributeData,2"`
  Namspace string `thrift:"namspace,3"`
  BaseRequest *BaseRequest `thrift:"baseRequest,4"`
}

func NewEntitySearchRequest() *EntitySearchRequest {
  return &EntitySearchRequest{
EntityType: math.MinInt32 - 1, // unset sentinal value
}
}

func (p *EntitySearchRequest) IsSetEntityType() bool {
  return int64(p.EntityType) != math.MinInt32 - 1
}

func (p *EntitySearchRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
case 3:
      if err := p.readField3(iprot); err != nil {
        return err
      }
case 4:
      if err := p.readField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *EntitySearchRequest)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.EntityType = EntityType(v)
}
  return nil
}

func (p *EntitySearchRequest)  readField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return fmt.Errorf("error reading map begin: %s")
  }
  p.SearchableAttributeData = make(map[string]*cms.Attribute, size)
  for i := 0; i < size; i ++ {
var _key106 string
    if v, err := iprot.ReadString(); err != nil {
    return fmt.Errorf("error reading field 0: %s")
} else {
    _key106 = v
}
    _val107 := cms.NewAttribute()
    if err := _val107.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _val107)
    }
    p.SearchableAttributeData[_key106] = _val107
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return fmt.Errorf("error reading map end: %s")
  }
  return nil
}

func (p *EntitySearchRequest)  readField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 3: %s")
} else {
  p.Namspace = v
}
  return nil
}

func (p *EntitySearchRequest)  readField4(iprot thrift.TProtocol) error {
  p.BaseRequest = NewBaseRequest()
  if err := p.BaseRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseRequest)
  }
  return nil
}

func (p *EntitySearchRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EntitySearchRequest"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *EntitySearchRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetEntityType() {
    if err := oprot.WriteFieldBegin("entityType", thrift.I32, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:entityType: %s", p, err); }
    if err := oprot.WriteI32(int32(p.EntityType)); err != nil {
    return fmt.Errorf("%T.entityType (1) field write error: %s", p) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:entityType: %s", p, err); }
  }
  return err
}

func (p *EntitySearchRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.SearchableAttributeData != nil {
    if err := oprot.WriteFieldBegin("searchableAttributeData", thrift.MAP, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:searchableAttributeData: %s", p, err); }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.SearchableAttributeData)); err != nil {
      return fmt.Errorf("error writing map begin: %s")
    }
    for k,v := range p.SearchableAttributeData {
      if err := oprot.WriteString(string(k)); err != nil {
      return fmt.Errorf("%T. (0) field write error: %s", p) }
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return fmt.Errorf("error writing map end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:searchableAttributeData: %s", p, err); }
  }
  return err
}

func (p *EntitySearchRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("namspace", thrift.STRING, 3); err != nil {
    return fmt.Errorf("%T write field begin error 3:namspace: %s", p, err); }
  if err := oprot.WriteString(string(p.Namspace)); err != nil {
  return fmt.Errorf("%T.namspace (3) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 3:namspace: %s", p, err); }
  return err
}

func (p *EntitySearchRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.BaseRequest != nil {
    if err := oprot.WriteFieldBegin("baseRequest", thrift.STRUCT, 4); err != nil {
      return fmt.Errorf("%T write field begin error 4:baseRequest: %s", p, err); }
    if err := p.BaseRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 4:baseRequest: %s", p, err); }
  }
  return err
}

func (p *EntitySearchRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntitySearchRequest(%+v)", *p)
}

type EntitySearchResult struct {
  MatchedEntities []*EntityID `thrift:"matchedEntities,1"`
  BaseResult *BaseResult `thrift:"baseResult,2"`
}

func NewEntitySearchResult() *EntitySearchResult {
  return &EntitySearchResult{}
}

func (p *EntitySearchResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
case 2:
      if err := p.readField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *EntitySearchResult)  readField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return fmt.Errorf("error reading list being: %s")
  }
  p.MatchedEntities = make([]*EntityID, 0, size)
  for i := 0; i < size; i ++ {
    _elem108 := NewEntityID()
    if err := _elem108.Read(iprot); err != nil {
      return fmt.Errorf("%T error reading struct: %s", _elem108)
    }
    p.MatchedEntities = append(p.MatchedEntities, _elem108)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return fmt.Errorf("error reading list end: %s")
  }
  return nil
}

func (p *EntitySearchResult)  readField2(iprot thrift.TProtocol) error {
  p.BaseResult = NewBaseResult()
  if err := p.BaseResult.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.BaseResult)
  }
  return nil
}

func (p *EntitySearchResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("EntitySearchResult"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *EntitySearchResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.MatchedEntities != nil {
    if err := oprot.WriteFieldBegin("matchedEntities", thrift.LIST, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:matchedEntities: %s", p, err); }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MatchedEntities)); err != nil {
      return fmt.Errorf("error writing list begin: %s")
    }
    for _, v := range p.MatchedEntities {
      if err := v.Write(oprot); err != nil {
        return fmt.Errorf("%T error writing struct: %s", v)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return fmt.Errorf("error writing list end: %s")
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:matchedEntities: %s", p, err); }
  }
  return err
}

func (p *EntitySearchResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.BaseResult != nil {
    if err := oprot.WriteFieldBegin("baseResult", thrift.STRUCT, 2); err != nil {
      return fmt.Errorf("%T write field begin error 2:baseResult: %s", p, err); }
    if err := p.BaseResult.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.BaseResult)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 2:baseResult: %s", p, err); }
  }
  return err
}

func (p *EntitySearchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EntitySearchResult(%+v)", *p)
}

