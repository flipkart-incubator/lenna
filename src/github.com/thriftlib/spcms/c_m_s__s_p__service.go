// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package spcms

import (
	"fmt"
	"math"
	"thrift"
	"github.com/thriftlib/cms"

)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = cms.GoUnusedProtection__
type CMS_SP_Service interface {
  GetSPCmsVerticalVersions() (r *cms.CmsVerticalVersionsResult, cmsException *cms.CMSException, err error)
  // Parameters:
  //  - DeltaRequest
  GetSPVerticalDelta(deltaRequest *cms.DeltaRequest) (r *cms.DeltaResult, cmsException *cms.CMSException, err error)
  // Parameters:
  //  - VerticalName
  GetSPVerticalVersion(verticalName string) (r *cms.VerticalVersionResult, cmsException *cms.CMSException, err error)
  // Parameters:
  //  - Request
  GetProductWithListings(request *ProductInfoRequest) (r *ProductListingsResult, cmsException *cms.CMSException, err error)
  // Parameters:
  //  - Request
  GetProductInfo(request *ProductInfoRequest) (r *ProductInfoResult, cmsException *cms.CMSException, err error)
  // Parameters:
  //  - Request
  GetListings(request *ListingRequest) (r *ListingResult, cmsException *cms.CMSException, err error)
  // Parameters:
  //  - Request
  GetListingDetail(request *ListingIDRequest) (r *ListingProductResult, cmsException *cms.CMSException, err error)
  // Parameters:
  //  - Amount
  GetListingIdfromEGV(amount int32) (r ListingID, cmsException *cms.CMSException, err error)
  // Parameters:
  //  - Request
  GetProductViews(request *ViewRequest) (r *ViewResult, cmsException *cms.CMSException, err error)
  // Parameters:
  //  - Request
  GetViewDefinition(request *ViewDefinitionRequest) (r *ViewDefinitionResult, cmsException *cms.CMSException, err error)
  // Parameters:
  //  - ContributorInfoRequest
  GetContributorInfo(contributorInfoRequest *ContributorInfoRequest) (r *ContributorInfoResult, spcmsException *SPCMSException, err error)
  // Parameters:
  //  - ItemsRequest
  GetItems(itemsRequest *ItemsRequest) (r *ItemsResult, spcmsException *SPCMSException, err error)
  // Parameters:
  //  - ItemDetailsRequest
  GetItemDetails(itemDetailsRequest *ItemDetailsRequest) (r *ItemDetailsResult, spcmsException *SPCMSException, err error)
  // Parameters:
  //  - CategoryTreeRequest
  GetCategorizationTree(categoryTreeRequest *CategoryTreeRequest) (r *CategoryTreeResult, spcmsException *SPCMSException, err error)
  // Parameters:
  //  - CategoryNodeInfoRequest
  GetCategoryNodeInfo(categoryNodeInfoRequest *CategoryNodeInfoRequest) (r *CategoryNodeInfoResult, spcmsException *SPCMSException, err error)
  // Parameters:
  //  - CategoryPathRequest
  GetCategoryPath(categoryPathRequest *CategoryPathRequest) (r *CategoryPathResult, spcmsException *SPCMSException, err error)
  // Parameters:
  //  - ItemHistoryRequest
  GetProductItemHistory(itemHistoryRequest *ItemHistoryRequest) (r *ItemHistoryResult, spcmsException *SPCMSException, err error)
  // Parameters:
  //  - VerticalAttributeDefinitionRequest
  GetVerticalAttributeDefinition(verticalAttributeDefinitionRequest *VerticalAttributeDefinitionRequest) (r *VerticalAttributeDefinitionResult, spcmsException *SPCMSException, err error)
  // Parameters:
  //  - MetaDataRequest
  GetMetaData(metaDataRequest *MetaDataRequest) (r *MetaDataResponse, spcmsException *SPCMSException, err error)
  // Parameters:
  //  - EntitySearchRequest
  SearchEntity(entitySearchRequest *EntitySearchRequest) (r *EntitySearchResult, spcmsException *SPCMSException, err error)
  // Parameters:
  //  - ProductIdForEGVRequest
  GetProductIDForEGV(productIdForEGVRequest *ProductIdForEGVRequest) (r *ProductIdForEGVResponse, spcmsException *SPCMSException, err error)
}

type CMS_SP_ServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewCMS_SP_ServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CMS_SP_ServiceClient {
  return &CMS_SP_ServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewCMS_SP_ServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CMS_SP_ServiceClient {
  return &CMS_SP_ServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

func (p *CMS_SP_ServiceClient) GetSPCmsVerticalVersions() (r *cms.CmsVerticalVersionsResult, cmsException *cms.CMSException, err error) {
  if err = p.sendGetSPCmsVerticalVersions(); err != nil { return }
  return p.recvGetSPCmsVerticalVersions()
}

func (p *CMS_SP_ServiceClient) sendGetSPCmsVerticalVersions()(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getSPCmsVerticalVersions", thrift.CALL, p.SeqId)
  args109 := NewGetSPCmsVerticalVersionsArgs()
  err = args109.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetSPCmsVerticalVersions() (value *cms.CmsVerticalVersionsResult, cmsException *cms.CMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error111 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error112 error
    error112, err = error111.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error112
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result110 := NewGetSPCmsVerticalVersionsResult()
  err = result110.Read(iprot)
  iprot.ReadMessageEnd()
  value = result110.Success
  if result110.CmsException != nil {
    cmsException = result110.CmsException
  }
  return
}

// Parameters:
//  - DeltaRequest
func (p *CMS_SP_ServiceClient) GetSPVerticalDelta(deltaRequest *cms.DeltaRequest) (r *cms.DeltaResult, cmsException *cms.CMSException, err error) {
  if err = p.sendGetSPVerticalDelta(deltaRequest); err != nil { return }
  return p.recvGetSPVerticalDelta()
}

func (p *CMS_SP_ServiceClient) sendGetSPVerticalDelta(deltaRequest *cms.DeltaRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getSPVerticalDelta", thrift.CALL, p.SeqId)
  args113 := NewGetSPVerticalDeltaArgs()
  args113.DeltaRequest = deltaRequest
  err = args113.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetSPVerticalDelta() (value *cms.DeltaResult, cmsException *cms.CMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error115 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error116 error
    error116, err = error115.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error116
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result114 := NewGetSPVerticalDeltaResult()
  err = result114.Read(iprot)
  iprot.ReadMessageEnd()
  value = result114.Success
  if result114.CmsException != nil {
    cmsException = result114.CmsException
  }
  return
}

// Parameters:
//  - VerticalName
func (p *CMS_SP_ServiceClient) GetSPVerticalVersion(verticalName string) (r *cms.VerticalVersionResult, cmsException *cms.CMSException, err error) {
  if err = p.sendGetSPVerticalVersion(verticalName); err != nil { return }
  return p.recvGetSPVerticalVersion()
}

func (p *CMS_SP_ServiceClient) sendGetSPVerticalVersion(verticalName string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getSPVerticalVersion", thrift.CALL, p.SeqId)
  args117 := NewGetSPVerticalVersionArgs()
  args117.VerticalName = verticalName
  err = args117.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetSPVerticalVersion() (value *cms.VerticalVersionResult, cmsException *cms.CMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error119 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error120 error
    error120, err = error119.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error120
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result118 := NewGetSPVerticalVersionResult()
  err = result118.Read(iprot)
  iprot.ReadMessageEnd()
  value = result118.Success
  if result118.CmsException != nil {
    cmsException = result118.CmsException
  }
  return
}

// Parameters:
//  - Request
func (p *CMS_SP_ServiceClient) GetProductWithListings(request *ProductInfoRequest) (r *ProductListingsResult, cmsException *cms.CMSException, err error) {
  if err = p.sendGetProductWithListings(request); err != nil { return }
  return p.recvGetProductWithListings()
}

func (p *CMS_SP_ServiceClient) sendGetProductWithListings(request *ProductInfoRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getProductWithListings", thrift.CALL, p.SeqId)
  args121 := NewGetProductWithListingsArgs()
  args121.Request = request
  err = args121.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetProductWithListings() (value *ProductListingsResult, cmsException *cms.CMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error123 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error124 error
    error124, err = error123.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error124
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result122 := NewGetProductWithListingsResult()
  err = result122.Read(iprot)
  iprot.ReadMessageEnd()
  value = result122.Success
  if result122.CmsException != nil {
    cmsException = result122.CmsException
  }
  return
}

// Parameters:
//  - Request
func (p *CMS_SP_ServiceClient) GetProductInfo(request *ProductInfoRequest) (r *ProductInfoResult, cmsException *cms.CMSException, err error) {
  if err = p.sendGetProductInfo(request); err != nil { return }
  return p.recvGetProductInfo()
}

func (p *CMS_SP_ServiceClient) sendGetProductInfo(request *ProductInfoRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getProductInfo", thrift.CALL, p.SeqId)
  args125 := NewGetProductInfoArgs()
  args125.Request = request
  err = args125.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetProductInfo() (value *ProductInfoResult, cmsException *cms.CMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error127 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error128 error
    error128, err = error127.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error128
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result126 := NewGetProductInfoResult()
  err = result126.Read(iprot)
  iprot.ReadMessageEnd()
  value = result126.Success
  if result126.CmsException != nil {
    cmsException = result126.CmsException
  }
  return
}

// Parameters:
//  - Request
func (p *CMS_SP_ServiceClient) GetListings(request *ListingRequest) (r *ListingResult, cmsException *cms.CMSException, err error) {
  if err = p.sendGetListings(request); err != nil { return }
  return p.recvGetListings()
}

func (p *CMS_SP_ServiceClient) sendGetListings(request *ListingRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getListings", thrift.CALL, p.SeqId)
  args129 := NewGetListingsArgs()
  args129.Request = request
  err = args129.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetListings() (value *ListingResult, cmsException *cms.CMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error131 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error132 error
    error132, err = error131.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error132
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result130 := NewGetListingsResult()
  err = result130.Read(iprot)
  iprot.ReadMessageEnd()
  value = result130.Success
  if result130.CmsException != nil {
    cmsException = result130.CmsException
  }
  return
}

// Parameters:
//  - Request
func (p *CMS_SP_ServiceClient) GetListingDetail(request *ListingIDRequest) (r *ListingProductResult, cmsException *cms.CMSException, err error) {
  if err = p.sendGetListingDetail(request); err != nil { return }
  return p.recvGetListingDetail()
}

func (p *CMS_SP_ServiceClient) sendGetListingDetail(request *ListingIDRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getListingDetail", thrift.CALL, p.SeqId)
  args133 := NewGetListingDetailArgs()
  args133.Request = request
  err = args133.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetListingDetail() (value *ListingProductResult, cmsException *cms.CMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error135 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error136 error
    error136, err = error135.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error136
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result134 := NewGetListingDetailResult()
  err = result134.Read(iprot)
  iprot.ReadMessageEnd()
  value = result134.Success
  if result134.CmsException != nil {
    cmsException = result134.CmsException
  }
  return
}

// Parameters:
//  - Amount
func (p *CMS_SP_ServiceClient) GetListingIdfromEGV(amount int32) (r ListingID, cmsException *cms.CMSException, err error) {
  if err = p.sendGetListingIdfromEGV(amount); err != nil { return }
  return p.recvGetListingIdfromEGV()
}

func (p *CMS_SP_ServiceClient) sendGetListingIdfromEGV(amount int32)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getListingIdfromEGV", thrift.CALL, p.SeqId)
  args137 := NewGetListingIdfromEGVArgs()
  args137.Amount = amount
  err = args137.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetListingIdfromEGV() (value ListingID, cmsException *cms.CMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error139 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error140 error
    error140, err = error139.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error140
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result138 := NewGetListingIdfromEGVResult()
  err = result138.Read(iprot)
  iprot.ReadMessageEnd()
  value = result138.Success
  if result138.CmsException != nil {
    cmsException = result138.CmsException
  }
  return
}

// Parameters:
//  - Request
func (p *CMS_SP_ServiceClient) GetProductViews(request *ViewRequest) (r *ViewResult, cmsException *cms.CMSException, err error) {
  if err = p.sendGetProductViews(request); err != nil { return }
  return p.recvGetProductViews()
}

func (p *CMS_SP_ServiceClient) sendGetProductViews(request *ViewRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getProductViews", thrift.CALL, p.SeqId)
  args141 := NewGetProductViewsArgs()
  args141.Request = request
  err = args141.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetProductViews() (value *ViewResult, cmsException *cms.CMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error143 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error144 error
    error144, err = error143.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error144
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result142 := NewGetProductViewsResult()
  err = result142.Read(iprot)
  iprot.ReadMessageEnd()
  value = result142.Success
  if result142.CmsException != nil {
    cmsException = result142.CmsException
  }
  return
}

// Parameters:
//  - Request
func (p *CMS_SP_ServiceClient) GetViewDefinition(request *ViewDefinitionRequest) (r *ViewDefinitionResult, cmsException *cms.CMSException, err error) {
  if err = p.sendGetViewDefinition(request); err != nil { return }
  return p.recvGetViewDefinition()
}

func (p *CMS_SP_ServiceClient) sendGetViewDefinition(request *ViewDefinitionRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getViewDefinition", thrift.CALL, p.SeqId)
  args145 := NewGetViewDefinitionArgs()
  args145.Request = request
  err = args145.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetViewDefinition() (value *ViewDefinitionResult, cmsException *cms.CMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error147 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error148 error
    error148, err = error147.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error148
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result146 := NewGetViewDefinitionResult()
  err = result146.Read(iprot)
  iprot.ReadMessageEnd()
  value = result146.Success
  if result146.CmsException != nil {
    cmsException = result146.CmsException
  }
  return
}

// Parameters:
//  - ContributorInfoRequest
func (p *CMS_SP_ServiceClient) GetContributorInfo(contributorInfoRequest *ContributorInfoRequest) (r *ContributorInfoResult, spcmsException *SPCMSException, err error) {
  if err = p.sendGetContributorInfo(contributorInfoRequest); err != nil { return }
  return p.recvGetContributorInfo()
}

func (p *CMS_SP_ServiceClient) sendGetContributorInfo(contributorInfoRequest *ContributorInfoRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getContributorInfo", thrift.CALL, p.SeqId)
  args149 := NewGetContributorInfoArgs()
  args149.ContributorInfoRequest = contributorInfoRequest
  err = args149.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetContributorInfo() (value *ContributorInfoResult, spcmsException *SPCMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error151 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error152 error
    error152, err = error151.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error152
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result150 := NewGetContributorInfoResult()
  err = result150.Read(iprot)
  iprot.ReadMessageEnd()
  value = result150.Success
  if result150.SpcmsException != nil {
    spcmsException = result150.SpcmsException
  }
  return
}

// Parameters:
//  - ItemsRequest
func (p *CMS_SP_ServiceClient) GetItems(itemsRequest *ItemsRequest) (r *ItemsResult, spcmsException *SPCMSException, err error) {
  if err = p.sendGetItems(itemsRequest); err != nil { return }
  return p.recvGetItems()
}

func (p *CMS_SP_ServiceClient) sendGetItems(itemsRequest *ItemsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getItems", thrift.CALL, p.SeqId)
  args153 := NewGetItemsArgs()
  args153.ItemsRequest = itemsRequest
  err = args153.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetItems() (value *ItemsResult, spcmsException *SPCMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error155 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error156 error
    error156, err = error155.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error156
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result154 := NewGetItemsResult()
  err = result154.Read(iprot)
  iprot.ReadMessageEnd()
  value = result154.Success
  if result154.SpcmsException != nil {
    spcmsException = result154.SpcmsException
  }
  return
}

// Parameters:
//  - ItemDetailsRequest
func (p *CMS_SP_ServiceClient) GetItemDetails(itemDetailsRequest *ItemDetailsRequest) (r *ItemDetailsResult, spcmsException *SPCMSException, err error) {
  if err = p.sendGetItemDetails(itemDetailsRequest); err != nil { return }
  return p.recvGetItemDetails()
}

func (p *CMS_SP_ServiceClient) sendGetItemDetails(itemDetailsRequest *ItemDetailsRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getItemDetails", thrift.CALL, p.SeqId)
  args157 := NewGetItemDetailsArgs()
  args157.ItemDetailsRequest = itemDetailsRequest
  err = args157.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetItemDetails() (value *ItemDetailsResult, spcmsException *SPCMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error159 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error160 error
    error160, err = error159.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error160
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result158 := NewGetItemDetailsResult()
  err = result158.Read(iprot)
  iprot.ReadMessageEnd()
  value = result158.Success
  if result158.SpcmsException != nil {
    spcmsException = result158.SpcmsException
  }
  return
}

// Parameters:
//  - CategoryTreeRequest
func (p *CMS_SP_ServiceClient) GetCategorizationTree(categoryTreeRequest *CategoryTreeRequest) (r *CategoryTreeResult, spcmsException *SPCMSException, err error) {
  if err = p.sendGetCategorizationTree(categoryTreeRequest); err != nil { return }
  return p.recvGetCategorizationTree()
}

func (p *CMS_SP_ServiceClient) sendGetCategorizationTree(categoryTreeRequest *CategoryTreeRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getCategorizationTree", thrift.CALL, p.SeqId)
  args161 := NewGetCategorizationTreeArgs()
  args161.CategoryTreeRequest = categoryTreeRequest
  err = args161.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetCategorizationTree() (value *CategoryTreeResult, spcmsException *SPCMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error163 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error164 error
    error164, err = error163.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error164
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result162 := NewGetCategorizationTreeResult()
  err = result162.Read(iprot)
  iprot.ReadMessageEnd()
  value = result162.Success
  if result162.SpcmsException != nil {
    spcmsException = result162.SpcmsException
  }
  return
}

// Parameters:
//  - CategoryNodeInfoRequest
func (p *CMS_SP_ServiceClient) GetCategoryNodeInfo(categoryNodeInfoRequest *CategoryNodeInfoRequest) (r *CategoryNodeInfoResult, spcmsException *SPCMSException, err error) {
  if err = p.sendGetCategoryNodeInfo(categoryNodeInfoRequest); err != nil { return }
  return p.recvGetCategoryNodeInfo()
}

func (p *CMS_SP_ServiceClient) sendGetCategoryNodeInfo(categoryNodeInfoRequest *CategoryNodeInfoRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getCategoryNodeInfo", thrift.CALL, p.SeqId)
  args165 := NewGetCategoryNodeInfoArgs()
  args165.CategoryNodeInfoRequest = categoryNodeInfoRequest
  err = args165.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetCategoryNodeInfo() (value *CategoryNodeInfoResult, spcmsException *SPCMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error167 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error168 error
    error168, err = error167.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error168
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result166 := NewGetCategoryNodeInfoResult()
  err = result166.Read(iprot)
  iprot.ReadMessageEnd()
  value = result166.Success
  if result166.SpcmsException != nil {
    spcmsException = result166.SpcmsException
  }
  return
}

// Parameters:
//  - CategoryPathRequest
func (p *CMS_SP_ServiceClient) GetCategoryPath(categoryPathRequest *CategoryPathRequest) (r *CategoryPathResult, spcmsException *SPCMSException, err error) {
  if err = p.sendGetCategoryPath(categoryPathRequest); err != nil { return }
  return p.recvGetCategoryPath()
}

func (p *CMS_SP_ServiceClient) sendGetCategoryPath(categoryPathRequest *CategoryPathRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getCategoryPath", thrift.CALL, p.SeqId)
  args169 := NewGetCategoryPathArgs()
  args169.CategoryPathRequest = categoryPathRequest
  err = args169.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetCategoryPath() (value *CategoryPathResult, spcmsException *SPCMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error171 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error172 error
    error172, err = error171.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error172
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result170 := NewGetCategoryPathResult()
  err = result170.Read(iprot)
  iprot.ReadMessageEnd()
  value = result170.Success
  if result170.SpcmsException != nil {
    spcmsException = result170.SpcmsException
  }
  return
}

// Parameters:
//  - ItemHistoryRequest
func (p *CMS_SP_ServiceClient) GetProductItemHistory(itemHistoryRequest *ItemHistoryRequest) (r *ItemHistoryResult, spcmsException *SPCMSException, err error) {
  if err = p.sendGetProductItemHistory(itemHistoryRequest); err != nil { return }
  return p.recvGetProductItemHistory()
}

func (p *CMS_SP_ServiceClient) sendGetProductItemHistory(itemHistoryRequest *ItemHistoryRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getProductItemHistory", thrift.CALL, p.SeqId)
  args173 := NewGetProductItemHistoryArgs()
  args173.ItemHistoryRequest = itemHistoryRequest
  err = args173.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetProductItemHistory() (value *ItemHistoryResult, spcmsException *SPCMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error175 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error176 error
    error176, err = error175.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error176
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result174 := NewGetProductItemHistoryResult()
  err = result174.Read(iprot)
  iprot.ReadMessageEnd()
  value = result174.Success
  if result174.SpcmsException != nil {
    spcmsException = result174.SpcmsException
  }
  return
}

// Parameters:
//  - VerticalAttributeDefinitionRequest
func (p *CMS_SP_ServiceClient) GetVerticalAttributeDefinition(verticalAttributeDefinitionRequest *VerticalAttributeDefinitionRequest) (r *VerticalAttributeDefinitionResult, spcmsException *SPCMSException, err error) {
  if err = p.sendGetVerticalAttributeDefinition(verticalAttributeDefinitionRequest); err != nil { return }
  return p.recvGetVerticalAttributeDefinition()
}

func (p *CMS_SP_ServiceClient) sendGetVerticalAttributeDefinition(verticalAttributeDefinitionRequest *VerticalAttributeDefinitionRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getVerticalAttributeDefinition", thrift.CALL, p.SeqId)
  args177 := NewGetVerticalAttributeDefinitionArgs()
  args177.VerticalAttributeDefinitionRequest = verticalAttributeDefinitionRequest
  err = args177.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetVerticalAttributeDefinition() (value *VerticalAttributeDefinitionResult, spcmsException *SPCMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error179 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error180 error
    error180, err = error179.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error180
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result178 := NewGetVerticalAttributeDefinitionResult()
  err = result178.Read(iprot)
  iprot.ReadMessageEnd()
  value = result178.Success
  if result178.SpcmsException != nil {
    spcmsException = result178.SpcmsException
  }
  return
}

// Parameters:
//  - MetaDataRequest
func (p *CMS_SP_ServiceClient) GetMetaData(metaDataRequest *MetaDataRequest) (r *MetaDataResponse, spcmsException *SPCMSException, err error) {
  if err = p.sendGetMetaData(metaDataRequest); err != nil { return }
  return p.recvGetMetaData()
}

func (p *CMS_SP_ServiceClient) sendGetMetaData(metaDataRequest *MetaDataRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getMetaData", thrift.CALL, p.SeqId)
  args181 := NewGetMetaDataArgs()
  args181.MetaDataRequest = metaDataRequest
  err = args181.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetMetaData() (value *MetaDataResponse, spcmsException *SPCMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error183 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error184 error
    error184, err = error183.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error184
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result182 := NewGetMetaDataResult()
  err = result182.Read(iprot)
  iprot.ReadMessageEnd()
  value = result182.Success
  if result182.SpcmsException != nil {
    spcmsException = result182.SpcmsException
  }
  return
}

// Parameters:
//  - EntitySearchRequest
func (p *CMS_SP_ServiceClient) SearchEntity(entitySearchRequest *EntitySearchRequest) (r *EntitySearchResult, spcmsException *SPCMSException, err error) {
  if err = p.sendSearchEntity(entitySearchRequest); err != nil { return }
  return p.recvSearchEntity()
}

func (p *CMS_SP_ServiceClient) sendSearchEntity(entitySearchRequest *EntitySearchRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("searchEntity", thrift.CALL, p.SeqId)
  args185 := NewSearchEntityArgs()
  args185.EntitySearchRequest = entitySearchRequest
  err = args185.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvSearchEntity() (value *EntitySearchResult, spcmsException *SPCMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error187 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error188 error
    error188, err = error187.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error188
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result186 := NewSearchEntityResult()
  err = result186.Read(iprot)
  iprot.ReadMessageEnd()
  value = result186.Success
  if result186.SpcmsException != nil {
    spcmsException = result186.SpcmsException
  }
  return
}

// Parameters:
//  - ProductIdForEGVRequest
func (p *CMS_SP_ServiceClient) GetProductIDForEGV(productIdForEGVRequest *ProductIdForEGVRequest) (r *ProductIdForEGVResponse, spcmsException *SPCMSException, err error) {
  if err = p.sendGetProductIDForEGV(productIdForEGVRequest); err != nil { return }
  return p.recvGetProductIDForEGV()
}

func (p *CMS_SP_ServiceClient) sendGetProductIDForEGV(productIdForEGVRequest *ProductIdForEGVRequest)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  oprot.WriteMessageBegin("getProductIDForEGV", thrift.CALL, p.SeqId)
  args189 := NewGetProductIDForEGVArgs()
  args189.ProductIdForEGVRequest = productIdForEGVRequest
  err = args189.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return
}


func (p *CMS_SP_ServiceClient) recvGetProductIDForEGV() (value *ProductIdForEGVResponse, spcmsException *SPCMSException, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  _, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error191 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error192 error
    error192, err = error191.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error192
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
    return
  }
  result190 := NewGetProductIDForEGVResult()
  err = result190.Read(iprot)
  iprot.ReadMessageEnd()
  value = result190.Success
  if result190.SpcmsException != nil {
    spcmsException = result190.SpcmsException
  }
  return
}


type CMS_SP_ServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler CMS_SP_Service
}

func (p *CMS_SP_ServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *CMS_SP_ServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *CMS_SP_ServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewCMS_SP_ServiceProcessor(handler CMS_SP_Service) *CMS_SP_ServiceProcessor {

  self193 := &CMS_SP_ServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self193.processorMap["getSPCmsVerticalVersions"] = &cMSSPServiceProcessorGetSPCmsVerticalVersions{handler:handler}
  self193.processorMap["getSPVerticalDelta"] = &cMSSPServiceProcessorGetSPVerticalDelta{handler:handler}
  self193.processorMap["getSPVerticalVersion"] = &cMSSPServiceProcessorGetSPVerticalVersion{handler:handler}
  self193.processorMap["getProductWithListings"] = &cMSSPServiceProcessorGetProductWithListings{handler:handler}
  self193.processorMap["getProductInfo"] = &cMSSPServiceProcessorGetProductInfo{handler:handler}
  self193.processorMap["getListings"] = &cMSSPServiceProcessorGetListings{handler:handler}
  self193.processorMap["getListingDetail"] = &cMSSPServiceProcessorGetListingDetail{handler:handler}
  self193.processorMap["getListingIdfromEGV"] = &cMSSPServiceProcessorGetListingIdfromEGV{handler:handler}
  self193.processorMap["getProductViews"] = &cMSSPServiceProcessorGetProductViews{handler:handler}
  self193.processorMap["getViewDefinition"] = &cMSSPServiceProcessorGetViewDefinition{handler:handler}
  self193.processorMap["getContributorInfo"] = &cMSSPServiceProcessorGetContributorInfo{handler:handler}
  self193.processorMap["getItems"] = &cMSSPServiceProcessorGetItems{handler:handler}
  self193.processorMap["getItemDetails"] = &cMSSPServiceProcessorGetItemDetails{handler:handler}
  self193.processorMap["getCategorizationTree"] = &cMSSPServiceProcessorGetCategorizationTree{handler:handler}
  self193.processorMap["getCategoryNodeInfo"] = &cMSSPServiceProcessorGetCategoryNodeInfo{handler:handler}
  self193.processorMap["getCategoryPath"] = &cMSSPServiceProcessorGetCategoryPath{handler:handler}
  self193.processorMap["getProductItemHistory"] = &cMSSPServiceProcessorGetProductItemHistory{handler:handler}
  self193.processorMap["getVerticalAttributeDefinition"] = &cMSSPServiceProcessorGetVerticalAttributeDefinition{handler:handler}
  self193.processorMap["getMetaData"] = &cMSSPServiceProcessorGetMetaData{handler:handler}
  self193.processorMap["searchEntity"] = &cMSSPServiceProcessorSearchEntity{handler:handler}
  self193.processorMap["getProductIDForEGV"] = &cMSSPServiceProcessorGetProductIDForEGV{handler:handler}
return self193
}

func (p *CMS_SP_ServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x194 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x194.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x194

}

type cMSSPServiceProcessorGetSPCmsVerticalVersions struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetSPCmsVerticalVersions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSPCmsVerticalVersionsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSPCmsVerticalVersions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSPCmsVerticalVersionsResult()
  if result.Success, result.CmsException, err = p.handler.GetSPCmsVerticalVersions(); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSPCmsVerticalVersions: " + err.Error())
    oprot.WriteMessageBegin("getSPCmsVerticalVersions", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getSPCmsVerticalVersions", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetSPVerticalDelta struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetSPVerticalDelta) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSPVerticalDeltaArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSPVerticalDelta", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSPVerticalDeltaResult()
  if result.Success, result.CmsException, err = p.handler.GetSPVerticalDelta(args.DeltaRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSPVerticalDelta: " + err.Error())
    oprot.WriteMessageBegin("getSPVerticalDelta", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getSPVerticalDelta", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetSPVerticalVersion struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetSPVerticalVersion) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetSPVerticalVersionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSPVerticalVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetSPVerticalVersionResult()
  if result.Success, result.CmsException, err = p.handler.GetSPVerticalVersion(args.VerticalName); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSPVerticalVersion: " + err.Error())
    oprot.WriteMessageBegin("getSPVerticalVersion", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getSPVerticalVersion", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetProductWithListings struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetProductWithListings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetProductWithListingsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProductWithListings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetProductWithListingsResult()
  if result.Success, result.CmsException, err = p.handler.GetProductWithListings(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductWithListings: " + err.Error())
    oprot.WriteMessageBegin("getProductWithListings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getProductWithListings", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetProductInfo struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetProductInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetProductInfoArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProductInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetProductInfoResult()
  if result.Success, result.CmsException, err = p.handler.GetProductInfo(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductInfo: " + err.Error())
    oprot.WriteMessageBegin("getProductInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getProductInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetListings struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetListings) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetListingsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getListings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetListingsResult()
  if result.Success, result.CmsException, err = p.handler.GetListings(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListings: " + err.Error())
    oprot.WriteMessageBegin("getListings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getListings", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetListingDetail struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetListingDetail) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetListingDetailArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getListingDetail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetListingDetailResult()
  if result.Success, result.CmsException, err = p.handler.GetListingDetail(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListingDetail: " + err.Error())
    oprot.WriteMessageBegin("getListingDetail", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getListingDetail", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetListingIdfromEGV struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetListingIdfromEGV) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetListingIdfromEGVArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getListingIdfromEGV", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetListingIdfromEGVResult()
  if result.Success, result.CmsException, err = p.handler.GetListingIdfromEGV(args.Amount); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getListingIdfromEGV: " + err.Error())
    oprot.WriteMessageBegin("getListingIdfromEGV", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getListingIdfromEGV", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetProductViews struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetProductViews) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetProductViewsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProductViews", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetProductViewsResult()
  if result.Success, result.CmsException, err = p.handler.GetProductViews(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductViews: " + err.Error())
    oprot.WriteMessageBegin("getProductViews", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getProductViews", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetViewDefinition struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetViewDefinition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetViewDefinitionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getViewDefinition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetViewDefinitionResult()
  if result.Success, result.CmsException, err = p.handler.GetViewDefinition(args.Request); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getViewDefinition: " + err.Error())
    oprot.WriteMessageBegin("getViewDefinition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getViewDefinition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetContributorInfo struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetContributorInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetContributorInfoArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getContributorInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetContributorInfoResult()
  if result.Success, result.SpcmsException, err = p.handler.GetContributorInfo(args.ContributorInfoRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContributorInfo: " + err.Error())
    oprot.WriteMessageBegin("getContributorInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getContributorInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetItems struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetItems) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetItemsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetItemsResult()
  if result.Success, result.SpcmsException, err = p.handler.GetItems(args.ItemsRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItems: " + err.Error())
    oprot.WriteMessageBegin("getItems", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getItems", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetItemDetails struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetItemDetails) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetItemDetailsArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getItemDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetItemDetailsResult()
  if result.Success, result.SpcmsException, err = p.handler.GetItemDetails(args.ItemDetailsRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getItemDetails: " + err.Error())
    oprot.WriteMessageBegin("getItemDetails", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getItemDetails", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetCategorizationTree struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetCategorizationTree) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetCategorizationTreeArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCategorizationTree", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetCategorizationTreeResult()
  if result.Success, result.SpcmsException, err = p.handler.GetCategorizationTree(args.CategoryTreeRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCategorizationTree: " + err.Error())
    oprot.WriteMessageBegin("getCategorizationTree", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getCategorizationTree", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetCategoryNodeInfo struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetCategoryNodeInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetCategoryNodeInfoArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCategoryNodeInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetCategoryNodeInfoResult()
  if result.Success, result.SpcmsException, err = p.handler.GetCategoryNodeInfo(args.CategoryNodeInfoRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCategoryNodeInfo: " + err.Error())
    oprot.WriteMessageBegin("getCategoryNodeInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getCategoryNodeInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetCategoryPath struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetCategoryPath) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetCategoryPathArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCategoryPath", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetCategoryPathResult()
  if result.Success, result.SpcmsException, err = p.handler.GetCategoryPath(args.CategoryPathRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCategoryPath: " + err.Error())
    oprot.WriteMessageBegin("getCategoryPath", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getCategoryPath", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetProductItemHistory struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetProductItemHistory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetProductItemHistoryArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProductItemHistory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetProductItemHistoryResult()
  if result.Success, result.SpcmsException, err = p.handler.GetProductItemHistory(args.ItemHistoryRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductItemHistory: " + err.Error())
    oprot.WriteMessageBegin("getProductItemHistory", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getProductItemHistory", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetVerticalAttributeDefinition struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetVerticalAttributeDefinition) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetVerticalAttributeDefinitionArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getVerticalAttributeDefinition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetVerticalAttributeDefinitionResult()
  if result.Success, result.SpcmsException, err = p.handler.GetVerticalAttributeDefinition(args.VerticalAttributeDefinitionRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVerticalAttributeDefinition: " + err.Error())
    oprot.WriteMessageBegin("getVerticalAttributeDefinition", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getVerticalAttributeDefinition", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetMetaData struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetMetaData) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetMetaDataArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMetaData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetMetaDataResult()
  if result.Success, result.SpcmsException, err = p.handler.GetMetaData(args.MetaDataRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMetaData: " + err.Error())
    oprot.WriteMessageBegin("getMetaData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getMetaData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorSearchEntity struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorSearchEntity) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewSearchEntityArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("searchEntity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewSearchEntityResult()
  if result.Success, result.SpcmsException, err = p.handler.SearchEntity(args.EntitySearchRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing searchEntity: " + err.Error())
    oprot.WriteMessageBegin("searchEntity", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("searchEntity", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type cMSSPServiceProcessorGetProductIDForEGV struct {
  handler CMS_SP_Service
}

func (p *cMSSPServiceProcessorGetProductIDForEGV) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := NewGetProductIDForEGVArgs()
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProductIDForEGV", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  iprot.ReadMessageEnd()
  result := NewGetProductIDForEGVResult()
  if result.Success, result.SpcmsException, err = p.handler.GetProductIDForEGV(args.ProductIdForEGVRequest); err != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProductIDForEGV: " + err.Error())
    oprot.WriteMessageBegin("getProductIDForEGV", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return
  }
  if err2 := oprot.WriteMessageBegin("getProductIDForEGV", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 := result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 := oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type GetSPCmsVerticalVersionsArgs struct {
}

func NewGetSPCmsVerticalVersionsArgs() *GetSPCmsVerticalVersionsArgs {
  return &GetSPCmsVerticalVersionsArgs{}
}

func (p *GetSPCmsVerticalVersionsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetSPCmsVerticalVersionsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSPCmsVerticalVersions_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetSPCmsVerticalVersionsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSPCmsVerticalVersionsArgs(%+v)", *p)
}

type GetSPCmsVerticalVersionsResult struct {
  Success *cms.CmsVerticalVersionsResult `thrift:"success,0"`
  CmsException *cms.CMSException `thrift:"cmsException,1"`
}

func NewGetSPCmsVerticalVersionsResult() *GetSPCmsVerticalVersionsResult {
  return &GetSPCmsVerticalVersionsResult{}
}

func (p *GetSPCmsVerticalVersionsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetSPCmsVerticalVersionsResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = cms.NewCmsVerticalVersionsResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetSPCmsVerticalVersionsResult)  readField1(iprot thrift.TProtocol) error {
  p.CmsException = cms.NewCMSException()
  if err := p.CmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CmsException)
  }
  return nil
}

func (p *GetSPCmsVerticalVersionsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSPCmsVerticalVersions_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.CmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetSPCmsVerticalVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetSPCmsVerticalVersionsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CmsException != nil {
    if err := oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:cmsException: %s", p, err); }
    if err := p.CmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:cmsException: %s", p, err); }
  }
  return err
}

func (p *GetSPCmsVerticalVersionsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSPCmsVerticalVersionsResult(%+v)", *p)
}

type GetSPVerticalDeltaArgs struct {
  DeltaRequest *cms.DeltaRequest `thrift:"deltaRequest,1"`
}

func NewGetSPVerticalDeltaArgs() *GetSPVerticalDeltaArgs {
  return &GetSPVerticalDeltaArgs{}
}

func (p *GetSPVerticalDeltaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetSPVerticalDeltaArgs)  readField1(iprot thrift.TProtocol) error {
  p.DeltaRequest = cms.NewDeltaRequest()
  if err := p.DeltaRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.DeltaRequest)
  }
  return nil
}

func (p *GetSPVerticalDeltaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSPVerticalDelta_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetSPVerticalDeltaArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.DeltaRequest != nil {
    if err := oprot.WriteFieldBegin("deltaRequest", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:deltaRequest: %s", p, err); }
    if err := p.DeltaRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.DeltaRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:deltaRequest: %s", p, err); }
  }
  return err
}

func (p *GetSPVerticalDeltaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSPVerticalDeltaArgs(%+v)", *p)
}

type GetSPVerticalDeltaResult struct {
  Success *cms.DeltaResult `thrift:"success,0"`
  CmsException *cms.CMSException `thrift:"cmsException,1"`
}

func NewGetSPVerticalDeltaResult() *GetSPVerticalDeltaResult {
  return &GetSPVerticalDeltaResult{}
}

func (p *GetSPVerticalDeltaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetSPVerticalDeltaResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = cms.NewDeltaResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetSPVerticalDeltaResult)  readField1(iprot thrift.TProtocol) error {
  p.CmsException = cms.NewCMSException()
  if err := p.CmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CmsException)
  }
  return nil
}

func (p *GetSPVerticalDeltaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSPVerticalDelta_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.CmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetSPVerticalDeltaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetSPVerticalDeltaResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CmsException != nil {
    if err := oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:cmsException: %s", p, err); }
    if err := p.CmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:cmsException: %s", p, err); }
  }
  return err
}

func (p *GetSPVerticalDeltaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSPVerticalDeltaResult(%+v)", *p)
}

type GetSPVerticalVersionArgs struct {
  VerticalName string `thrift:"verticalName,1"`
}

func NewGetSPVerticalVersionArgs() *GetSPVerticalVersionArgs {
  return &GetSPVerticalVersionArgs{}
}

func (p *GetSPVerticalVersionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetSPVerticalVersionArgs)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.VerticalName = v
}
  return nil
}

func (p *GetSPVerticalVersionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSPVerticalVersion_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetSPVerticalVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verticalName", thrift.STRING, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:verticalName: %s", p, err); }
  if err := oprot.WriteString(string(p.VerticalName)); err != nil {
  return fmt.Errorf("%T.verticalName (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:verticalName: %s", p, err); }
  return err
}

func (p *GetSPVerticalVersionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSPVerticalVersionArgs(%+v)", *p)
}

type GetSPVerticalVersionResult struct {
  Success *cms.VerticalVersionResult `thrift:"success,0"`
  CmsException *cms.CMSException `thrift:"cmsException,1"`
}

func NewGetSPVerticalVersionResult() *GetSPVerticalVersionResult {
  return &GetSPVerticalVersionResult{}
}

func (p *GetSPVerticalVersionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetSPVerticalVersionResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = cms.NewVerticalVersionResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetSPVerticalVersionResult)  readField1(iprot thrift.TProtocol) error {
  p.CmsException = cms.NewCMSException()
  if err := p.CmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CmsException)
  }
  return nil
}

func (p *GetSPVerticalVersionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSPVerticalVersion_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.CmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetSPVerticalVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetSPVerticalVersionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CmsException != nil {
    if err := oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:cmsException: %s", p, err); }
    if err := p.CmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:cmsException: %s", p, err); }
  }
  return err
}

func (p *GetSPVerticalVersionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetSPVerticalVersionResult(%+v)", *p)
}

type GetProductWithListingsArgs struct {
  Request *ProductInfoRequest `thrift:"request,1"`
}

func NewGetProductWithListingsArgs() *GetProductWithListingsArgs {
  return &GetProductWithListingsArgs{}
}

func (p *GetProductWithListingsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetProductWithListingsArgs)  readField1(iprot thrift.TProtocol) error {
  p.Request = NewProductInfoRequest()
  if err := p.Request.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Request)
  }
  return nil
}

func (p *GetProductWithListingsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProductWithListings_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetProductWithListingsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.Request != nil {
    if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:request: %s", p, err); }
    if err := p.Request.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Request)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:request: %s", p, err); }
  }
  return err
}

func (p *GetProductWithListingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductWithListingsArgs(%+v)", *p)
}

type GetProductWithListingsResult struct {
  Success *ProductListingsResult `thrift:"success,0"`
  CmsException *cms.CMSException `thrift:"cmsException,1"`
}

func NewGetProductWithListingsResult() *GetProductWithListingsResult {
  return &GetProductWithListingsResult{}
}

func (p *GetProductWithListingsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetProductWithListingsResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewProductListingsResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetProductWithListingsResult)  readField1(iprot thrift.TProtocol) error {
  p.CmsException = cms.NewCMSException()
  if err := p.CmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CmsException)
  }
  return nil
}

func (p *GetProductWithListingsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProductWithListings_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.CmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetProductWithListingsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetProductWithListingsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CmsException != nil {
    if err := oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:cmsException: %s", p, err); }
    if err := p.CmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:cmsException: %s", p, err); }
  }
  return err
}

func (p *GetProductWithListingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductWithListingsResult(%+v)", *p)
}

type GetProductInfoArgs struct {
  Request *ProductInfoRequest `thrift:"request,1"`
}

func NewGetProductInfoArgs() *GetProductInfoArgs {
  return &GetProductInfoArgs{}
}

func (p *GetProductInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetProductInfoArgs)  readField1(iprot thrift.TProtocol) error {
  p.Request = NewProductInfoRequest()
  if err := p.Request.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Request)
  }
  return nil
}

func (p *GetProductInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProductInfo_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetProductInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.Request != nil {
    if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:request: %s", p, err); }
    if err := p.Request.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Request)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:request: %s", p, err); }
  }
  return err
}

func (p *GetProductInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductInfoArgs(%+v)", *p)
}

type GetProductInfoResult struct {
  Success *ProductInfoResult `thrift:"success,0"`
  CmsException *cms.CMSException `thrift:"cmsException,1"`
}

func NewGetProductInfoResult() *GetProductInfoResult {
  return &GetProductInfoResult{}
}

func (p *GetProductInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetProductInfoResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewProductInfoResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetProductInfoResult)  readField1(iprot thrift.TProtocol) error {
  p.CmsException = cms.NewCMSException()
  if err := p.CmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CmsException)
  }
  return nil
}

func (p *GetProductInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProductInfo_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.CmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetProductInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetProductInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CmsException != nil {
    if err := oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:cmsException: %s", p, err); }
    if err := p.CmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:cmsException: %s", p, err); }
  }
  return err
}

func (p *GetProductInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductInfoResult(%+v)", *p)
}

type GetListingsArgs struct {
  Request *ListingRequest `thrift:"request,1"`
}

func NewGetListingsArgs() *GetListingsArgs {
  return &GetListingsArgs{}
}

func (p *GetListingsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetListingsArgs)  readField1(iprot thrift.TProtocol) error {
  p.Request = NewListingRequest()
  if err := p.Request.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Request)
  }
  return nil
}

func (p *GetListingsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListings_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetListingsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.Request != nil {
    if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:request: %s", p, err); }
    if err := p.Request.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Request)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:request: %s", p, err); }
  }
  return err
}

func (p *GetListingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetListingsArgs(%+v)", *p)
}

type GetListingsResult struct {
  Success *ListingResult `thrift:"success,0"`
  CmsException *cms.CMSException `thrift:"cmsException,1"`
}

func NewGetListingsResult() *GetListingsResult {
  return &GetListingsResult{}
}

func (p *GetListingsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetListingsResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewListingResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetListingsResult)  readField1(iprot thrift.TProtocol) error {
  p.CmsException = cms.NewCMSException()
  if err := p.CmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CmsException)
  }
  return nil
}

func (p *GetListingsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListings_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.CmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetListingsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetListingsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CmsException != nil {
    if err := oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:cmsException: %s", p, err); }
    if err := p.CmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:cmsException: %s", p, err); }
  }
  return err
}

func (p *GetListingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetListingsResult(%+v)", *p)
}

type GetListingDetailArgs struct {
  Request *ListingIDRequest `thrift:"request,1"`
}

func NewGetListingDetailArgs() *GetListingDetailArgs {
  return &GetListingDetailArgs{}
}

func (p *GetListingDetailArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetListingDetailArgs)  readField1(iprot thrift.TProtocol) error {
  p.Request = NewListingIDRequest()
  if err := p.Request.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Request)
  }
  return nil
}

func (p *GetListingDetailArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListingDetail_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetListingDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.Request != nil {
    if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:request: %s", p, err); }
    if err := p.Request.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Request)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:request: %s", p, err); }
  }
  return err
}

func (p *GetListingDetailArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetListingDetailArgs(%+v)", *p)
}

type GetListingDetailResult struct {
  Success *ListingProductResult `thrift:"success,0"`
  CmsException *cms.CMSException `thrift:"cmsException,1"`
}

func NewGetListingDetailResult() *GetListingDetailResult {
  return &GetListingDetailResult{}
}

func (p *GetListingDetailResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetListingDetailResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewListingProductResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetListingDetailResult)  readField1(iprot thrift.TProtocol) error {
  p.CmsException = cms.NewCMSException()
  if err := p.CmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CmsException)
  }
  return nil
}

func (p *GetListingDetailResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListingDetail_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.CmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetListingDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetListingDetailResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CmsException != nil {
    if err := oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:cmsException: %s", p, err); }
    if err := p.CmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:cmsException: %s", p, err); }
  }
  return err
}

func (p *GetListingDetailResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetListingDetailResult(%+v)", *p)
}

type GetListingIdfromEGVArgs struct {
  Amount int32 `thrift:"amount,1"`
}

func NewGetListingIdfromEGVArgs() *GetListingIdfromEGVArgs {
  return &GetListingIdfromEGVArgs{}
}

func (p *GetListingIdfromEGVArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetListingIdfromEGVArgs)  readField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return fmt.Errorf("error reading field 1: %s")
} else {
  p.Amount = v
}
  return nil
}

func (p *GetListingIdfromEGVArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListingIdfromEGV_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetListingIdfromEGVArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("amount", thrift.I32, 1); err != nil {
    return fmt.Errorf("%T write field begin error 1:amount: %s", p, err); }
  if err := oprot.WriteI32(int32(p.Amount)); err != nil {
  return fmt.Errorf("%T.amount (1) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 1:amount: %s", p, err); }
  return err
}

func (p *GetListingIdfromEGVArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetListingIdfromEGVArgs(%+v)", *p)
}

type GetListingIdfromEGVResult struct {
  Success ListingID `thrift:"success,0"`
  CmsException *cms.CMSException `thrift:"cmsException,1"`
}

func NewGetListingIdfromEGVResult() *GetListingIdfromEGVResult {
  return &GetListingIdfromEGVResult{}
}

func (p *GetListingIdfromEGVResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetListingIdfromEGVResult)  readField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return fmt.Errorf("error reading field 0: %s")
} else {
  p.Success = ListingID(v)
}
  return nil
}

func (p *GetListingIdfromEGVResult)  readField1(iprot thrift.TProtocol) error {
  p.CmsException = cms.NewCMSException()
  if err := p.CmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CmsException)
  }
  return nil
}

func (p *GetListingIdfromEGVResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getListingIdfromEGV_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.CmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetListingIdfromEGVResult) writeField0(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
    return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
  if err := oprot.WriteString(string(p.Success)); err != nil {
  return fmt.Errorf("%T.success (0) field write error: %s", p) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  return err
}

func (p *GetListingIdfromEGVResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CmsException != nil {
    if err := oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:cmsException: %s", p, err); }
    if err := p.CmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:cmsException: %s", p, err); }
  }
  return err
}

func (p *GetListingIdfromEGVResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetListingIdfromEGVResult(%+v)", *p)
}

type GetProductViewsArgs struct {
  Request *ViewRequest `thrift:"request,1"`
}

func NewGetProductViewsArgs() *GetProductViewsArgs {
  return &GetProductViewsArgs{}
}

func (p *GetProductViewsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetProductViewsArgs)  readField1(iprot thrift.TProtocol) error {
  p.Request = NewViewRequest()
  if err := p.Request.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Request)
  }
  return nil
}

func (p *GetProductViewsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProductViews_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetProductViewsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.Request != nil {
    if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:request: %s", p, err); }
    if err := p.Request.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Request)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:request: %s", p, err); }
  }
  return err
}

func (p *GetProductViewsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductViewsArgs(%+v)", *p)
}

type GetProductViewsResult struct {
  Success *ViewResult `thrift:"success,0"`
  CmsException *cms.CMSException `thrift:"cmsException,1"`
}

func NewGetProductViewsResult() *GetProductViewsResult {
  return &GetProductViewsResult{}
}

func (p *GetProductViewsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetProductViewsResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewViewResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetProductViewsResult)  readField1(iprot thrift.TProtocol) error {
  p.CmsException = cms.NewCMSException()
  if err := p.CmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CmsException)
  }
  return nil
}

func (p *GetProductViewsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProductViews_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.CmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetProductViewsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetProductViewsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CmsException != nil {
    if err := oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:cmsException: %s", p, err); }
    if err := p.CmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:cmsException: %s", p, err); }
  }
  return err
}

func (p *GetProductViewsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductViewsResult(%+v)", *p)
}

type GetViewDefinitionArgs struct {
  Request *ViewDefinitionRequest `thrift:"request,1"`
}

func NewGetViewDefinitionArgs() *GetViewDefinitionArgs {
  return &GetViewDefinitionArgs{}
}

func (p *GetViewDefinitionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetViewDefinitionArgs)  readField1(iprot thrift.TProtocol) error {
  p.Request = NewViewDefinitionRequest()
  if err := p.Request.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Request)
  }
  return nil
}

func (p *GetViewDefinitionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getViewDefinition_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetViewDefinitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.Request != nil {
    if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:request: %s", p, err); }
    if err := p.Request.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Request)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:request: %s", p, err); }
  }
  return err
}

func (p *GetViewDefinitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetViewDefinitionArgs(%+v)", *p)
}

type GetViewDefinitionResult struct {
  Success *ViewDefinitionResult `thrift:"success,0"`
  CmsException *cms.CMSException `thrift:"cmsException,1"`
}

func NewGetViewDefinitionResult() *GetViewDefinitionResult {
  return &GetViewDefinitionResult{}
}

func (p *GetViewDefinitionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetViewDefinitionResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewViewDefinitionResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetViewDefinitionResult)  readField1(iprot thrift.TProtocol) error {
  p.CmsException = cms.NewCMSException()
  if err := p.CmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CmsException)
  }
  return nil
}

func (p *GetViewDefinitionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getViewDefinition_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.CmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetViewDefinitionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetViewDefinitionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CmsException != nil {
    if err := oprot.WriteFieldBegin("cmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:cmsException: %s", p, err); }
    if err := p.CmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:cmsException: %s", p, err); }
  }
  return err
}

func (p *GetViewDefinitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetViewDefinitionResult(%+v)", *p)
}

type GetContributorInfoArgs struct {
  ContributorInfoRequest *ContributorInfoRequest `thrift:"contributorInfoRequest,1"`
}

func NewGetContributorInfoArgs() *GetContributorInfoArgs {
  return &GetContributorInfoArgs{}
}

func (p *GetContributorInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetContributorInfoArgs)  readField1(iprot thrift.TProtocol) error {
  p.ContributorInfoRequest = NewContributorInfoRequest()
  if err := p.ContributorInfoRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.ContributorInfoRequest)
  }
  return nil
}

func (p *GetContributorInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getContributorInfo_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetContributorInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ContributorInfoRequest != nil {
    if err := oprot.WriteFieldBegin("contributorInfoRequest", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:contributorInfoRequest: %s", p, err); }
    if err := p.ContributorInfoRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.ContributorInfoRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:contributorInfoRequest: %s", p, err); }
  }
  return err
}

func (p *GetContributorInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetContributorInfoArgs(%+v)", *p)
}

type GetContributorInfoResult struct {
  Success *ContributorInfoResult `thrift:"success,0"`
  SpcmsException *SPCMSException `thrift:"spcmsException,1"`
}

func NewGetContributorInfoResult() *GetContributorInfoResult {
  return &GetContributorInfoResult{}
}

func (p *GetContributorInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetContributorInfoResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewContributorInfoResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetContributorInfoResult)  readField1(iprot thrift.TProtocol) error {
  p.SpcmsException = NewSPCMSException()
  if err := p.SpcmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.SpcmsException)
  }
  return nil
}

func (p *GetContributorInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getContributorInfo_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.SpcmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetContributorInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetContributorInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.SpcmsException != nil {
    if err := oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:spcmsException: %s", p, err); }
    if err := p.SpcmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.SpcmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:spcmsException: %s", p, err); }
  }
  return err
}

func (p *GetContributorInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetContributorInfoResult(%+v)", *p)
}

type GetItemsArgs struct {
  ItemsRequest *ItemsRequest `thrift:"itemsRequest,1"`
}

func NewGetItemsArgs() *GetItemsArgs {
  return &GetItemsArgs{}
}

func (p *GetItemsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetItemsArgs)  readField1(iprot thrift.TProtocol) error {
  p.ItemsRequest = NewItemsRequest()
  if err := p.ItemsRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.ItemsRequest)
  }
  return nil
}

func (p *GetItemsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItems_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetItemsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ItemsRequest != nil {
    if err := oprot.WriteFieldBegin("itemsRequest", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:itemsRequest: %s", p, err); }
    if err := p.ItemsRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.ItemsRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:itemsRequest: %s", p, err); }
  }
  return err
}

func (p *GetItemsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetItemsArgs(%+v)", *p)
}

type GetItemsResult struct {
  Success *ItemsResult `thrift:"success,0"`
  SpcmsException *SPCMSException `thrift:"spcmsException,1"`
}

func NewGetItemsResult() *GetItemsResult {
  return &GetItemsResult{}
}

func (p *GetItemsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetItemsResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewItemsResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetItemsResult)  readField1(iprot thrift.TProtocol) error {
  p.SpcmsException = NewSPCMSException()
  if err := p.SpcmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.SpcmsException)
  }
  return nil
}

func (p *GetItemsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItems_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.SpcmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetItemsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetItemsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.SpcmsException != nil {
    if err := oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:spcmsException: %s", p, err); }
    if err := p.SpcmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.SpcmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:spcmsException: %s", p, err); }
  }
  return err
}

func (p *GetItemsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetItemsResult(%+v)", *p)
}

type GetItemDetailsArgs struct {
  ItemDetailsRequest *ItemDetailsRequest `thrift:"itemDetailsRequest,1"`
}

func NewGetItemDetailsArgs() *GetItemDetailsArgs {
  return &GetItemDetailsArgs{}
}

func (p *GetItemDetailsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetItemDetailsArgs)  readField1(iprot thrift.TProtocol) error {
  p.ItemDetailsRequest = NewItemDetailsRequest()
  if err := p.ItemDetailsRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.ItemDetailsRequest)
  }
  return nil
}

func (p *GetItemDetailsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemDetails_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetItemDetailsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ItemDetailsRequest != nil {
    if err := oprot.WriteFieldBegin("itemDetailsRequest", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:itemDetailsRequest: %s", p, err); }
    if err := p.ItemDetailsRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.ItemDetailsRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:itemDetailsRequest: %s", p, err); }
  }
  return err
}

func (p *GetItemDetailsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetItemDetailsArgs(%+v)", *p)
}

type GetItemDetailsResult struct {
  Success *ItemDetailsResult `thrift:"success,0"`
  SpcmsException *SPCMSException `thrift:"spcmsException,1"`
}

func NewGetItemDetailsResult() *GetItemDetailsResult {
  return &GetItemDetailsResult{}
}

func (p *GetItemDetailsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetItemDetailsResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewItemDetailsResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetItemDetailsResult)  readField1(iprot thrift.TProtocol) error {
  p.SpcmsException = NewSPCMSException()
  if err := p.SpcmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.SpcmsException)
  }
  return nil
}

func (p *GetItemDetailsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getItemDetails_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.SpcmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetItemDetailsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetItemDetailsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.SpcmsException != nil {
    if err := oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:spcmsException: %s", p, err); }
    if err := p.SpcmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.SpcmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:spcmsException: %s", p, err); }
  }
  return err
}

func (p *GetItemDetailsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetItemDetailsResult(%+v)", *p)
}

type GetCategorizationTreeArgs struct {
  CategoryTreeRequest *CategoryTreeRequest `thrift:"categoryTreeRequest,1"`
}

func NewGetCategorizationTreeArgs() *GetCategorizationTreeArgs {
  return &GetCategorizationTreeArgs{}
}

func (p *GetCategorizationTreeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetCategorizationTreeArgs)  readField1(iprot thrift.TProtocol) error {
  p.CategoryTreeRequest = NewCategoryTreeRequest()
  if err := p.CategoryTreeRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CategoryTreeRequest)
  }
  return nil
}

func (p *GetCategorizationTreeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCategorizationTree_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetCategorizationTreeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CategoryTreeRequest != nil {
    if err := oprot.WriteFieldBegin("categoryTreeRequest", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:categoryTreeRequest: %s", p, err); }
    if err := p.CategoryTreeRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CategoryTreeRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:categoryTreeRequest: %s", p, err); }
  }
  return err
}

func (p *GetCategorizationTreeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCategorizationTreeArgs(%+v)", *p)
}

type GetCategorizationTreeResult struct {
  Success *CategoryTreeResult `thrift:"success,0"`
  SpcmsException *SPCMSException `thrift:"spcmsException,1"`
}

func NewGetCategorizationTreeResult() *GetCategorizationTreeResult {
  return &GetCategorizationTreeResult{}
}

func (p *GetCategorizationTreeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetCategorizationTreeResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewCategoryTreeResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetCategorizationTreeResult)  readField1(iprot thrift.TProtocol) error {
  p.SpcmsException = NewSPCMSException()
  if err := p.SpcmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.SpcmsException)
  }
  return nil
}

func (p *GetCategorizationTreeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCategorizationTree_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.SpcmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetCategorizationTreeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetCategorizationTreeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.SpcmsException != nil {
    if err := oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:spcmsException: %s", p, err); }
    if err := p.SpcmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.SpcmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:spcmsException: %s", p, err); }
  }
  return err
}

func (p *GetCategorizationTreeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCategorizationTreeResult(%+v)", *p)
}

type GetCategoryNodeInfoArgs struct {
  CategoryNodeInfoRequest *CategoryNodeInfoRequest `thrift:"categoryNodeInfoRequest,1"`
}

func NewGetCategoryNodeInfoArgs() *GetCategoryNodeInfoArgs {
  return &GetCategoryNodeInfoArgs{}
}

func (p *GetCategoryNodeInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetCategoryNodeInfoArgs)  readField1(iprot thrift.TProtocol) error {
  p.CategoryNodeInfoRequest = NewCategoryNodeInfoRequest()
  if err := p.CategoryNodeInfoRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CategoryNodeInfoRequest)
  }
  return nil
}

func (p *GetCategoryNodeInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCategoryNodeInfo_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetCategoryNodeInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CategoryNodeInfoRequest != nil {
    if err := oprot.WriteFieldBegin("categoryNodeInfoRequest", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:categoryNodeInfoRequest: %s", p, err); }
    if err := p.CategoryNodeInfoRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CategoryNodeInfoRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:categoryNodeInfoRequest: %s", p, err); }
  }
  return err
}

func (p *GetCategoryNodeInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCategoryNodeInfoArgs(%+v)", *p)
}

type GetCategoryNodeInfoResult struct {
  Success *CategoryNodeInfoResult `thrift:"success,0"`
  SpcmsException *SPCMSException `thrift:"spcmsException,1"`
}

func NewGetCategoryNodeInfoResult() *GetCategoryNodeInfoResult {
  return &GetCategoryNodeInfoResult{}
}

func (p *GetCategoryNodeInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetCategoryNodeInfoResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewCategoryNodeInfoResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetCategoryNodeInfoResult)  readField1(iprot thrift.TProtocol) error {
  p.SpcmsException = NewSPCMSException()
  if err := p.SpcmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.SpcmsException)
  }
  return nil
}

func (p *GetCategoryNodeInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCategoryNodeInfo_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.SpcmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetCategoryNodeInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetCategoryNodeInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.SpcmsException != nil {
    if err := oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:spcmsException: %s", p, err); }
    if err := p.SpcmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.SpcmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:spcmsException: %s", p, err); }
  }
  return err
}

func (p *GetCategoryNodeInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCategoryNodeInfoResult(%+v)", *p)
}

type GetCategoryPathArgs struct {
  CategoryPathRequest *CategoryPathRequest `thrift:"categoryPathRequest,1"`
}

func NewGetCategoryPathArgs() *GetCategoryPathArgs {
  return &GetCategoryPathArgs{}
}

func (p *GetCategoryPathArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetCategoryPathArgs)  readField1(iprot thrift.TProtocol) error {
  p.CategoryPathRequest = NewCategoryPathRequest()
  if err := p.CategoryPathRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.CategoryPathRequest)
  }
  return nil
}

func (p *GetCategoryPathArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCategoryPath_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetCategoryPathArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.CategoryPathRequest != nil {
    if err := oprot.WriteFieldBegin("categoryPathRequest", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:categoryPathRequest: %s", p, err); }
    if err := p.CategoryPathRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.CategoryPathRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:categoryPathRequest: %s", p, err); }
  }
  return err
}

func (p *GetCategoryPathArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCategoryPathArgs(%+v)", *p)
}

type GetCategoryPathResult struct {
  Success *CategoryPathResult `thrift:"success,0"`
  SpcmsException *SPCMSException `thrift:"spcmsException,1"`
}

func NewGetCategoryPathResult() *GetCategoryPathResult {
  return &GetCategoryPathResult{}
}

func (p *GetCategoryPathResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetCategoryPathResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewCategoryPathResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetCategoryPathResult)  readField1(iprot thrift.TProtocol) error {
  p.SpcmsException = NewSPCMSException()
  if err := p.SpcmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.SpcmsException)
  }
  return nil
}

func (p *GetCategoryPathResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCategoryPath_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.SpcmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetCategoryPathResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetCategoryPathResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.SpcmsException != nil {
    if err := oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:spcmsException: %s", p, err); }
    if err := p.SpcmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.SpcmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:spcmsException: %s", p, err); }
  }
  return err
}

func (p *GetCategoryPathResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetCategoryPathResult(%+v)", *p)
}

type GetProductItemHistoryArgs struct {
  ItemHistoryRequest *ItemHistoryRequest `thrift:"itemHistoryRequest,1"`
}

func NewGetProductItemHistoryArgs() *GetProductItemHistoryArgs {
  return &GetProductItemHistoryArgs{}
}

func (p *GetProductItemHistoryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetProductItemHistoryArgs)  readField1(iprot thrift.TProtocol) error {
  p.ItemHistoryRequest = NewItemHistoryRequest()
  if err := p.ItemHistoryRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.ItemHistoryRequest)
  }
  return nil
}

func (p *GetProductItemHistoryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProductItemHistory_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetProductItemHistoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ItemHistoryRequest != nil {
    if err := oprot.WriteFieldBegin("itemHistoryRequest", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:itemHistoryRequest: %s", p, err); }
    if err := p.ItemHistoryRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.ItemHistoryRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:itemHistoryRequest: %s", p, err); }
  }
  return err
}

func (p *GetProductItemHistoryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductItemHistoryArgs(%+v)", *p)
}

type GetProductItemHistoryResult struct {
  Success *ItemHistoryResult `thrift:"success,0"`
  SpcmsException *SPCMSException `thrift:"spcmsException,1"`
}

func NewGetProductItemHistoryResult() *GetProductItemHistoryResult {
  return &GetProductItemHistoryResult{}
}

func (p *GetProductItemHistoryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetProductItemHistoryResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewItemHistoryResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetProductItemHistoryResult)  readField1(iprot thrift.TProtocol) error {
  p.SpcmsException = NewSPCMSException()
  if err := p.SpcmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.SpcmsException)
  }
  return nil
}

func (p *GetProductItemHistoryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProductItemHistory_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.SpcmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetProductItemHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetProductItemHistoryResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.SpcmsException != nil {
    if err := oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:spcmsException: %s", p, err); }
    if err := p.SpcmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.SpcmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:spcmsException: %s", p, err); }
  }
  return err
}

func (p *GetProductItemHistoryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductItemHistoryResult(%+v)", *p)
}

type GetVerticalAttributeDefinitionArgs struct {
  VerticalAttributeDefinitionRequest *VerticalAttributeDefinitionRequest `thrift:"verticalAttributeDefinitionRequest,1"`
}

func NewGetVerticalAttributeDefinitionArgs() *GetVerticalAttributeDefinitionArgs {
  return &GetVerticalAttributeDefinitionArgs{}
}

func (p *GetVerticalAttributeDefinitionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetVerticalAttributeDefinitionArgs)  readField1(iprot thrift.TProtocol) error {
  p.VerticalAttributeDefinitionRequest = NewVerticalAttributeDefinitionRequest()
  if err := p.VerticalAttributeDefinitionRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.VerticalAttributeDefinitionRequest)
  }
  return nil
}

func (p *GetVerticalAttributeDefinitionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getVerticalAttributeDefinition_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetVerticalAttributeDefinitionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.VerticalAttributeDefinitionRequest != nil {
    if err := oprot.WriteFieldBegin("verticalAttributeDefinitionRequest", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:verticalAttributeDefinitionRequest: %s", p, err); }
    if err := p.VerticalAttributeDefinitionRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.VerticalAttributeDefinitionRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:verticalAttributeDefinitionRequest: %s", p, err); }
  }
  return err
}

func (p *GetVerticalAttributeDefinitionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetVerticalAttributeDefinitionArgs(%+v)", *p)
}

type GetVerticalAttributeDefinitionResult struct {
  Success *VerticalAttributeDefinitionResult `thrift:"success,0"`
  SpcmsException *SPCMSException `thrift:"spcmsException,1"`
}

func NewGetVerticalAttributeDefinitionResult() *GetVerticalAttributeDefinitionResult {
  return &GetVerticalAttributeDefinitionResult{}
}

func (p *GetVerticalAttributeDefinitionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetVerticalAttributeDefinitionResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewVerticalAttributeDefinitionResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetVerticalAttributeDefinitionResult)  readField1(iprot thrift.TProtocol) error {
  p.SpcmsException = NewSPCMSException()
  if err := p.SpcmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.SpcmsException)
  }
  return nil
}

func (p *GetVerticalAttributeDefinitionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getVerticalAttributeDefinition_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.SpcmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetVerticalAttributeDefinitionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetVerticalAttributeDefinitionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.SpcmsException != nil {
    if err := oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:spcmsException: %s", p, err); }
    if err := p.SpcmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.SpcmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:spcmsException: %s", p, err); }
  }
  return err
}

func (p *GetVerticalAttributeDefinitionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetVerticalAttributeDefinitionResult(%+v)", *p)
}

type GetMetaDataArgs struct {
  MetaDataRequest *MetaDataRequest `thrift:"metaDataRequest,1"`
}

func NewGetMetaDataArgs() *GetMetaDataArgs {
  return &GetMetaDataArgs{}
}

func (p *GetMetaDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetMetaDataArgs)  readField1(iprot thrift.TProtocol) error {
  p.MetaDataRequest = NewMetaDataRequest()
  if err := p.MetaDataRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.MetaDataRequest)
  }
  return nil
}

func (p *GetMetaDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMetaData_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetMetaDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.MetaDataRequest != nil {
    if err := oprot.WriteFieldBegin("metaDataRequest", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:metaDataRequest: %s", p, err); }
    if err := p.MetaDataRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.MetaDataRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:metaDataRequest: %s", p, err); }
  }
  return err
}

func (p *GetMetaDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMetaDataArgs(%+v)", *p)
}

type GetMetaDataResult struct {
  Success *MetaDataResponse `thrift:"success,0"`
  SpcmsException *SPCMSException `thrift:"spcmsException,1"`
}

func NewGetMetaDataResult() *GetMetaDataResult {
  return &GetMetaDataResult{}
}

func (p *GetMetaDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetMetaDataResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewMetaDataResponse()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetMetaDataResult)  readField1(iprot thrift.TProtocol) error {
  p.SpcmsException = NewSPCMSException()
  if err := p.SpcmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.SpcmsException)
  }
  return nil
}

func (p *GetMetaDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMetaData_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.SpcmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetMetaDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetMetaDataResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.SpcmsException != nil {
    if err := oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:spcmsException: %s", p, err); }
    if err := p.SpcmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.SpcmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:spcmsException: %s", p, err); }
  }
  return err
}

func (p *GetMetaDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetMetaDataResult(%+v)", *p)
}

type SearchEntityArgs struct {
  EntitySearchRequest *EntitySearchRequest `thrift:"entitySearchRequest,1"`
}

func NewSearchEntityArgs() *SearchEntityArgs {
  return &SearchEntityArgs{}
}

func (p *SearchEntityArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *SearchEntityArgs)  readField1(iprot thrift.TProtocol) error {
  p.EntitySearchRequest = NewEntitySearchRequest()
  if err := p.EntitySearchRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.EntitySearchRequest)
  }
  return nil
}

func (p *SearchEntityArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchEntity_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *SearchEntityArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.EntitySearchRequest != nil {
    if err := oprot.WriteFieldBegin("entitySearchRequest", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:entitySearchRequest: %s", p, err); }
    if err := p.EntitySearchRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.EntitySearchRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:entitySearchRequest: %s", p, err); }
  }
  return err
}

func (p *SearchEntityArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchEntityArgs(%+v)", *p)
}

type SearchEntityResult struct {
  Success *EntitySearchResult `thrift:"success,0"`
  SpcmsException *SPCMSException `thrift:"spcmsException,1"`
}

func NewSearchEntityResult() *SearchEntityResult {
  return &SearchEntityResult{}
}

func (p *SearchEntityResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *SearchEntityResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewEntitySearchResult()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *SearchEntityResult)  readField1(iprot thrift.TProtocol) error {
  p.SpcmsException = NewSPCMSException()
  if err := p.SpcmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.SpcmsException)
  }
  return nil
}

func (p *SearchEntityResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("searchEntity_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.SpcmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *SearchEntityResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *SearchEntityResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.SpcmsException != nil {
    if err := oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:spcmsException: %s", p, err); }
    if err := p.SpcmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.SpcmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:spcmsException: %s", p, err); }
  }
  return err
}

func (p *SearchEntityResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchEntityResult(%+v)", *p)
}

type GetProductIDForEGVArgs struct {
  ProductIdForEGVRequest *ProductIdForEGVRequest `thrift:"productIdForEGVRequest,1"`
}

func NewGetProductIDForEGVArgs() *GetProductIDForEGVArgs {
  return &GetProductIDForEGVArgs{}
}

func (p *GetProductIDForEGVArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetProductIDForEGVArgs)  readField1(iprot thrift.TProtocol) error {
  p.ProductIdForEGVRequest = NewProductIdForEGVRequest()
  if err := p.ProductIdForEGVRequest.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.ProductIdForEGVRequest)
  }
  return nil
}

func (p *GetProductIDForEGVArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProductIDForEGV_args"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetProductIDForEGVArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if p.ProductIdForEGVRequest != nil {
    if err := oprot.WriteFieldBegin("productIdForEGVRequest", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:productIdForEGVRequest: %s", p, err); }
    if err := p.ProductIdForEGVRequest.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.ProductIdForEGVRequest)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:productIdForEGVRequest: %s", p, err); }
  }
  return err
}

func (p *GetProductIDForEGVArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductIDForEGVArgs(%+v)", *p)
}

type GetProductIDForEGVResult struct {
  Success *ProductIdForEGVResponse `thrift:"success,0"`
  SpcmsException *SPCMSException `thrift:"spcmsException,1"`
}

func NewGetProductIDForEGVResult() *GetProductIDForEGVResult {
  return &GetProductIDForEGVResult{}
}

func (p *GetProductIDForEGVResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return fmt.Errorf("%T read error", p)
  }
  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
case 0:
      if err := p.readField0(iprot); err != nil {
        return err
      }
case 1:
      if err := p.readField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return fmt.Errorf("%T read struct end error: %s", p, err)
  }
  return nil
}

func (p *GetProductIDForEGVResult)  readField0(iprot thrift.TProtocol) error {
  p.Success = NewProductIdForEGVResponse()
  if err := p.Success.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.Success)
  }
  return nil
}

func (p *GetProductIDForEGVResult)  readField1(iprot thrift.TProtocol) error {
  p.SpcmsException = NewSPCMSException()
  if err := p.SpcmsException.Read(iprot); err != nil {
    return fmt.Errorf("%T error reading struct: %s", p.SpcmsException)
  }
  return nil
}

func (p *GetProductIDForEGVResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProductIDForEGV_result"); err != nil {
    return fmt.Errorf("%T write struct begin error: %s", p, err) }
  switch {
  case p.SpcmsException != nil:
    if err := p.writeField1(oprot); err != nil { return err }
  default:
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return fmt.Errorf("%T write field stop error: %s", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return fmt.Errorf("%T write struct stop error: %s", err) }
  return nil
}

func (p *GetProductIDForEGVResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.Success != nil {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return fmt.Errorf("%T write field begin error 0:success: %s", p, err); }
    if err := p.Success.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.Success)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 0:success: %s", p, err); }
  }
  return err
}

func (p *GetProductIDForEGVResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.SpcmsException != nil {
    if err := oprot.WriteFieldBegin("spcmsException", thrift.STRUCT, 1); err != nil {
      return fmt.Errorf("%T write field begin error 1:spcmsException: %s", p, err); }
    if err := p.SpcmsException.Write(oprot); err != nil {
      return fmt.Errorf("%T error writing struct: %s", p.SpcmsException)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return fmt.Errorf("%T write field end error 1:spcmsException: %s", p, err); }
  }
  return err
}

func (p *GetProductIDForEGVResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetProductIDForEGVResult(%+v)", *p)
}


