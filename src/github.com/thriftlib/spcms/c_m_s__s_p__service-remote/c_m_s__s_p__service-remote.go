// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"thrift"
	"math"
	"net"
	"net/url"
	"os"
	"rukmini/connector/thriftlib/spcms"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  CmsVerticalVersionsResult getSPCmsVerticalVersions()")
	fmt.Fprintln(os.Stderr, "  DeltaResult getSPVerticalDelta(DeltaRequest deltaRequest)")
	fmt.Fprintln(os.Stderr, "  VerticalVersionResult getSPVerticalVersion(string verticalName)")
	fmt.Fprintln(os.Stderr, "  ProductListingsResult getProductWithListings(ProductInfoRequest request)")
	fmt.Fprintln(os.Stderr, "  ProductInfoResult getProductInfo(ProductInfoRequest request)")
	fmt.Fprintln(os.Stderr, "  ListingResult getListings(ListingRequest request)")
	fmt.Fprintln(os.Stderr, "  ListingProductResult getListingDetail(ListingIDRequest request)")
	fmt.Fprintln(os.Stderr, "  ListingID getListingIdfromEGV(i32 amount)")
	fmt.Fprintln(os.Stderr, "  ViewResult getProductViews(ViewRequest request)")
	fmt.Fprintln(os.Stderr, "  ViewDefinitionResult getViewDefinition(ViewDefinitionRequest request)")
	fmt.Fprintln(os.Stderr, "  ContributorInfoResult getContributorInfo(ContributorInfoRequest contributorInfoRequest)")
	fmt.Fprintln(os.Stderr, "  ItemsResult getItems(ItemsRequest itemsRequest)")
	fmt.Fprintln(os.Stderr, "  ItemDetailsResult getItemDetails(ItemDetailsRequest itemDetailsRequest)")
	fmt.Fprintln(os.Stderr, "  CategoryTreeResult getCategorizationTree(CategoryTreeRequest categoryTreeRequest)")
	fmt.Fprintln(os.Stderr, "  CategoryNodeInfoResult getCategoryNodeInfo(CategoryNodeInfoRequest categoryNodeInfoRequest)")
	fmt.Fprintln(os.Stderr, "  CategoryPathResult getCategoryPath(CategoryPathRequest categoryPathRequest)")
	fmt.Fprintln(os.Stderr, "  ItemHistoryResult getProductItemHistory(ItemHistoryRequest itemHistoryRequest)")
	fmt.Fprintln(os.Stderr, "  VerticalAttributeDefinitionResult getVerticalAttributeDefinition(VerticalAttributeDefinitionRequest verticalAttributeDefinitionRequest)")
	fmt.Fprintln(os.Stderr, "  MetaDataResponse getMetaData(MetaDataRequest metaDataRequest)")
	fmt.Fprintln(os.Stderr, "  EntitySearchResult searchEntity(EntitySearchRequest entitySearchRequest)")
	fmt.Fprintln(os.Stderr, "  ProductIdForEGVResponse getProductIDForEGV(ProductIdForEGVRequest productIdForEGVRequest)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := sp - cms.NewCMS_SP_ServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "getSPCmsVerticalVersions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetSPCmsVerticalVersions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetSPCmsVerticalVersions())
		fmt.Print("\n")
		break
	case "getSPVerticalDelta":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSPVerticalDelta requires 1 args")
			flag.Usage()
		}
		arg195 := flag.Arg(1)
		mbTrans196 := thrift.NewTMemoryBufferLen(len(arg195))
		defer mbTrans196.Close()
		_, err197 := mbTrans196.WriteString(arg195)
		if err197 != nil {
			Usage()
			return
		}
		factory198 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt199 := factory198.GetProtocol(mbTrans196)
		argvalue0 := sp - cms.NewDeltaRequest()
		err200 := argvalue0.Read(jsProt199)
		if err200 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetSPVerticalDelta(value0))
		fmt.Print("\n")
		break
	case "getSPVerticalVersion":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetSPVerticalVersion requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetSPVerticalVersion(value0))
		fmt.Print("\n")
		break
	case "getProductWithListings":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetProductWithListings requires 1 args")
			flag.Usage()
		}
		arg202 := flag.Arg(1)
		mbTrans203 := thrift.NewTMemoryBufferLen(len(arg202))
		defer mbTrans203.Close()
		_, err204 := mbTrans203.WriteString(arg202)
		if err204 != nil {
			Usage()
			return
		}
		factory205 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt206 := factory205.GetProtocol(mbTrans203)
		argvalue0 := sp - cms.NewProductInfoRequest()
		err207 := argvalue0.Read(jsProt206)
		if err207 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetProductWithListings(value0))
		fmt.Print("\n")
		break
	case "getProductInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetProductInfo requires 1 args")
			flag.Usage()
		}
		arg208 := flag.Arg(1)
		mbTrans209 := thrift.NewTMemoryBufferLen(len(arg208))
		defer mbTrans209.Close()
		_, err210 := mbTrans209.WriteString(arg208)
		if err210 != nil {
			Usage()
			return
		}
		factory211 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt212 := factory211.GetProtocol(mbTrans209)
		argvalue0 := sp - cms.NewProductInfoRequest()
		err213 := argvalue0.Read(jsProt212)
		if err213 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetProductInfo(value0))
		fmt.Print("\n")
		break
	case "getListings":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetListings requires 1 args")
			flag.Usage()
		}
		arg214 := flag.Arg(1)
		mbTrans215 := thrift.NewTMemoryBufferLen(len(arg214))
		defer mbTrans215.Close()
		_, err216 := mbTrans215.WriteString(arg214)
		if err216 != nil {
			Usage()
			return
		}
		factory217 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt218 := factory217.GetProtocol(mbTrans215)
		argvalue0 := sp - cms.NewListingRequest()
		err219 := argvalue0.Read(jsProt218)
		if err219 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetListings(value0))
		fmt.Print("\n")
		break
	case "getListingDetail":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetListingDetail requires 1 args")
			flag.Usage()
		}
		arg220 := flag.Arg(1)
		mbTrans221 := thrift.NewTMemoryBufferLen(len(arg220))
		defer mbTrans221.Close()
		_, err222 := mbTrans221.WriteString(arg220)
		if err222 != nil {
			Usage()
			return
		}
		factory223 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt224 := factory223.GetProtocol(mbTrans221)
		argvalue0 := sp - cms.NewListingIDRequest()
		err225 := argvalue0.Read(jsProt224)
		if err225 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetListingDetail(value0))
		fmt.Print("\n")
		break
	case "getListingIdfromEGV":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetListingIdfromEGV requires 1 args")
			flag.Usage()
		}
		tmp0, err226 := (strconv.Atoi(flag.Arg(1)))
		if err226 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetListingIdfromEGV(value0))
		fmt.Print("\n")
		break
	case "getProductViews":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetProductViews requires 1 args")
			flag.Usage()
		}
		arg227 := flag.Arg(1)
		mbTrans228 := thrift.NewTMemoryBufferLen(len(arg227))
		defer mbTrans228.Close()
		_, err229 := mbTrans228.WriteString(arg227)
		if err229 != nil {
			Usage()
			return
		}
		factory230 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt231 := factory230.GetProtocol(mbTrans228)
		argvalue0 := sp - cms.NewViewRequest()
		err232 := argvalue0.Read(jsProt231)
		if err232 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetProductViews(value0))
		fmt.Print("\n")
		break
	case "getViewDefinition":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetViewDefinition requires 1 args")
			flag.Usage()
		}
		arg233 := flag.Arg(1)
		mbTrans234 := thrift.NewTMemoryBufferLen(len(arg233))
		defer mbTrans234.Close()
		_, err235 := mbTrans234.WriteString(arg233)
		if err235 != nil {
			Usage()
			return
		}
		factory236 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt237 := factory236.GetProtocol(mbTrans234)
		argvalue0 := sp - cms.NewViewDefinitionRequest()
		err238 := argvalue0.Read(jsProt237)
		if err238 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetViewDefinition(value0))
		fmt.Print("\n")
		break
	case "getContributorInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetContributorInfo requires 1 args")
			flag.Usage()
		}
		arg239 := flag.Arg(1)
		mbTrans240 := thrift.NewTMemoryBufferLen(len(arg239))
		defer mbTrans240.Close()
		_, err241 := mbTrans240.WriteString(arg239)
		if err241 != nil {
			Usage()
			return
		}
		factory242 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt243 := factory242.GetProtocol(mbTrans240)
		argvalue0 := sp - cms.NewContributorInfoRequest()
		err244 := argvalue0.Read(jsProt243)
		if err244 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetContributorInfo(value0))
		fmt.Print("\n")
		break
	case "getItems":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetItems requires 1 args")
			flag.Usage()
		}
		arg245 := flag.Arg(1)
		mbTrans246 := thrift.NewTMemoryBufferLen(len(arg245))
		defer mbTrans246.Close()
		_, err247 := mbTrans246.WriteString(arg245)
		if err247 != nil {
			Usage()
			return
		}
		factory248 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt249 := factory248.GetProtocol(mbTrans246)
		argvalue0 := sp - cms.NewItemsRequest()
		err250 := argvalue0.Read(jsProt249)
		if err250 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetItems(value0))
		fmt.Print("\n")
		break
	case "getItemDetails":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetItemDetails requires 1 args")
			flag.Usage()
		}
		arg251 := flag.Arg(1)
		mbTrans252 := thrift.NewTMemoryBufferLen(len(arg251))
		defer mbTrans252.Close()
		_, err253 := mbTrans252.WriteString(arg251)
		if err253 != nil {
			Usage()
			return
		}
		factory254 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt255 := factory254.GetProtocol(mbTrans252)
		argvalue0 := sp - cms.NewItemDetailsRequest()
		err256 := argvalue0.Read(jsProt255)
		if err256 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetItemDetails(value0))
		fmt.Print("\n")
		break
	case "getCategorizationTree":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCategorizationTree requires 1 args")
			flag.Usage()
		}
		arg257 := flag.Arg(1)
		mbTrans258 := thrift.NewTMemoryBufferLen(len(arg257))
		defer mbTrans258.Close()
		_, err259 := mbTrans258.WriteString(arg257)
		if err259 != nil {
			Usage()
			return
		}
		factory260 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt261 := factory260.GetProtocol(mbTrans258)
		argvalue0 := sp - cms.NewCategoryTreeRequest()
		err262 := argvalue0.Read(jsProt261)
		if err262 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetCategorizationTree(value0))
		fmt.Print("\n")
		break
	case "getCategoryNodeInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCategoryNodeInfo requires 1 args")
			flag.Usage()
		}
		arg263 := flag.Arg(1)
		mbTrans264 := thrift.NewTMemoryBufferLen(len(arg263))
		defer mbTrans264.Close()
		_, err265 := mbTrans264.WriteString(arg263)
		if err265 != nil {
			Usage()
			return
		}
		factory266 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt267 := factory266.GetProtocol(mbTrans264)
		argvalue0 := sp - cms.NewCategoryNodeInfoRequest()
		err268 := argvalue0.Read(jsProt267)
		if err268 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetCategoryNodeInfo(value0))
		fmt.Print("\n")
		break
	case "getCategoryPath":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetCategoryPath requires 1 args")
			flag.Usage()
		}
		arg269 := flag.Arg(1)
		mbTrans270 := thrift.NewTMemoryBufferLen(len(arg269))
		defer mbTrans270.Close()
		_, err271 := mbTrans270.WriteString(arg269)
		if err271 != nil {
			Usage()
			return
		}
		factory272 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt273 := factory272.GetProtocol(mbTrans270)
		argvalue0 := sp - cms.NewCategoryPathRequest()
		err274 := argvalue0.Read(jsProt273)
		if err274 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetCategoryPath(value0))
		fmt.Print("\n")
		break
	case "getProductItemHistory":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetProductItemHistory requires 1 args")
			flag.Usage()
		}
		arg275 := flag.Arg(1)
		mbTrans276 := thrift.NewTMemoryBufferLen(len(arg275))
		defer mbTrans276.Close()
		_, err277 := mbTrans276.WriteString(arg275)
		if err277 != nil {
			Usage()
			return
		}
		factory278 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt279 := factory278.GetProtocol(mbTrans276)
		argvalue0 := sp - cms.NewItemHistoryRequest()
		err280 := argvalue0.Read(jsProt279)
		if err280 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetProductItemHistory(value0))
		fmt.Print("\n")
		break
	case "getVerticalAttributeDefinition":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetVerticalAttributeDefinition requires 1 args")
			flag.Usage()
		}
		arg281 := flag.Arg(1)
		mbTrans282 := thrift.NewTMemoryBufferLen(len(arg281))
		defer mbTrans282.Close()
		_, err283 := mbTrans282.WriteString(arg281)
		if err283 != nil {
			Usage()
			return
		}
		factory284 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt285 := factory284.GetProtocol(mbTrans282)
		argvalue0 := sp - cms.NewVerticalAttributeDefinitionRequest()
		err286 := argvalue0.Read(jsProt285)
		if err286 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetVerticalAttributeDefinition(value0))
		fmt.Print("\n")
		break
	case "getMetaData":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetMetaData requires 1 args")
			flag.Usage()
		}
		arg287 := flag.Arg(1)
		mbTrans288 := thrift.NewTMemoryBufferLen(len(arg287))
		defer mbTrans288.Close()
		_, err289 := mbTrans288.WriteString(arg287)
		if err289 != nil {
			Usage()
			return
		}
		factory290 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt291 := factory290.GetProtocol(mbTrans288)
		argvalue0 := sp - cms.NewMetaDataRequest()
		err292 := argvalue0.Read(jsProt291)
		if err292 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetMetaData(value0))
		fmt.Print("\n")
		break
	case "searchEntity":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "SearchEntity requires 1 args")
			flag.Usage()
		}
		arg293 := flag.Arg(1)
		mbTrans294 := thrift.NewTMemoryBufferLen(len(arg293))
		defer mbTrans294.Close()
		_, err295 := mbTrans294.WriteString(arg293)
		if err295 != nil {
			Usage()
			return
		}
		factory296 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt297 := factory296.GetProtocol(mbTrans294)
		argvalue0 := sp - cms.NewEntitySearchRequest()
		err298 := argvalue0.Read(jsProt297)
		if err298 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.SearchEntity(value0))
		fmt.Print("\n")
		break
	case "getProductIDForEGV":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetProductIDForEGV requires 1 args")
			flag.Usage()
		}
		arg299 := flag.Arg(1)
		mbTrans300 := thrift.NewTMemoryBufferLen(len(arg299))
		defer mbTrans300.Close()
		_, err301 := mbTrans300.WriteString(arg299)
		if err301 != nil {
			Usage()
			return
		}
		factory302 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt303 := factory302.GetProtocol(mbTrans300)
		argvalue0 := sp - cms.NewProductIdForEGVRequest()
		err304 := argvalue0.Read(jsProt303)
		if err304 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetProductIDForEGV(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
